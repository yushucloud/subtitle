1
00:00:00,320 --> 00:00:04,720
docker是一个可以将软件打包到任何环境中的可靠容器运行工具

2
00:00:04,720 --> 00:00:07,919
但是什么是容器以及为什么需要容器，让我们假设您使用cobalt构建了一个应用程序

3
00:00:07,919 --> 00:00:11,120
该应用程序可以在linux上运行,您想与您的朋友

4
00:00:11,120 --> 00:00:14,080
分享这个应用程序，你们有两个完全不同的系统

5
00:00:14,080 --> 00:00:18,280
问题变成了我们如何在任何机器上复制我们的软件所需的环境

6
00:00:18,280 --> 00:00:21,080
打包应用程序的一种方法是使用虚拟机模拟硬件环境

7
00:00:21,080 --> 00:00:24,160
然后安装所需的操作系统和相关软件

8
00:00:24,160 --> 00:00:28,360
这允许我们在同一个基础设施上运行多个应用程序

9
00:00:28,360 --> 00:00:30,920
但是每个虚拟机都运行自己的操作系统

10
00:00:30,920 --> 00:00:34,079
因此它们往往体积庞大且运行速度慢

11
00:00:34,079 --> 00:00:37,279
与虚拟机非常相似，单有一个关键性区别

12
00:00:37,279 --> 00:00:40,320
那就是虚拟化操作系统，而不是虚拟化硬件容器

13
00:00:40,320 --> 00:00:44,000
或者换句话说，所有应用程序或容器都在单个内核运行

14
00:00:44,000 --> 00:00:48,200
这使得几乎所有事情都变得更快、更高效

15
00:00:48,200 --> 00:00:51,400
docker宇宙中包含三个基本元素

16
00:00:51,400 --> 00:00:54,480
docker文件、docker镜像、docker容器文件，

17
00:00:54,480 --> 00:00:58,640
他们就像DNA只告诉docker如何构建镜像的代码

18
00:00:58,640 --> 00:01:01,760
它是软件快照以及它的所有

19
00:01:01,760 --> 00:01:05,960
对于操作系统级别的依赖，该映像不可变用于启动多个容器

20
00:01:05,960 --> 00:01:09,079
这是您在现实世界中运行的实际软件

21
00:01:09,079 --> 00:01:11,360
创建一个docker文件并使用

22
00:01:11,360 --> 00:01:15,560
从现有模板开始,如ubuntu，此基础映从云中像被拉取下来

23
00:01:15,560 --> 00:01:17,600
您还可以将自己的镜像上传到

24
00:01:17,600 --> 00:01:19,759
各种不同的docker注册中心中

25
00:01:19,759 --> 00:01:23,040
您可能希望使用run命令将依赖项安装到镜像中

26
00:01:23,040 --> 00:01:26,159
然后您可以设置环境变量并执行其他各种命令

27
00:01:26,159 --> 00:01:29,360
你要做的最后一件事是设置一个在

28
00:01:29,360 --> 00:01:31,439
启动容器时执行的默认命令

29
00:01:31,439 --> 00:01:34,880
现在我们可以通过运行 docker build 命令来创建镜像文件

30
00:01:34,880 --> 00:01:39,080
它通过我们的docker文件中的每个步骤逐层构建映像

31
00:01:39,080 --> 00:01:43,280
然后我们可以使用 docker run 命令将该映像作为容器赋予生命

32
00:01:43,280 --> 00:01:46,520
当您的应用程序需要更多资源时

33
00:01:46,520 --> 00:01:49,600
您可以在多台云服务上运行它

34
00:01:49,600 --> 00:01:52,960
如果您确定喜欢它

35
00:01:52,960 --> 00:01:56,640
请订阅并继续关注更多docker内容

36
00:01:56,640 --> 00:01:59,320
感谢您的收看，下次见