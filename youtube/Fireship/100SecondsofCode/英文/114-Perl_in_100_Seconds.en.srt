1
00:00:00,120 --> 00:00:02,520
Pearl a dynamic interpreted scripting


2
00:00:02,520 --> 00:00:04,560
language famous for its powerful text


3
00:00:04,560 --> 00:00:06,660
processing abilities it was developed in


4
00:00:06,660 --> 00:00:09,300
1987 by Larry wall a linguist who


5
00:00:09,300 --> 00:00:10,800
designed it to feel more like a human


6
00:00:10,800 --> 00:00:12,599
language than a computer language when


7
00:00:12,599 --> 00:00:13,980
someone says Pearl they're usually


8
00:00:13,980 --> 00:00:15,839
talking about version 5. there was a


9
00:00:15,839 --> 00:00:17,520
version 6 under development but it


10
00:00:17,520 --> 00:00:18,900
evolved into another language called


11
00:00:18,900 --> 00:00:21,180
Raku Pearl is often referred to as a


12
00:00:21,180 --> 00:00:22,920
glue language and has been dubbed the


13
00:00:22,920 --> 00:00:24,660
Swiss Army chainsaw of the Internet it's


14
00:00:24,660 --> 00:00:26,699
most commonly used to write CGI scripts


15
00:00:26,699 --> 00:00:28,380
that allow web servers to communicate


16
00:00:28,380 --> 00:00:30,359
with external programs its powerful


17
00:00:30,359 --> 00:00:32,219
string parsing abilities has made it the


18
00:00:32,219 --> 00:00:34,020
language of choice on high traffic sites


19
00:00:34,020 --> 00:00:36,239
like DuckDuckGo booking.com and


20
00:00:36,239 --> 00:00:38,399
Craigslist syntactically it resembles C


21
00:00:38,399 --> 00:00:40,140
but is far more compressed allowing


22
00:00:40,140 --> 00:00:41,879
developers to write very tourist code


23
00:00:41,879 --> 00:00:43,620
like one-liners that hack together a


24
00:00:43,620 --> 00:00:44,879
solution much quicker than other


25
00:00:44,879 --> 00:00:46,680
scripting languages like python it


26
00:00:46,680 --> 00:00:48,059
contains a large collection of language


27
00:00:48,059 --> 00:00:50,160
Primitives and a ton of shortcuts for


28
00:00:50,160 --> 00:00:51,899
getting things done quickly you may find


29
00:00:51,899 --> 00:00:53,579
it ugly and awkward but system


30
00:00:53,579 --> 00:00:55,500
administrators love it because it gets


31
00:00:55,500 --> 00:00:57,360
the job done to get started install the


32
00:00:57,360 --> 00:00:59,100
Pearl interpreter then create a file


33
00:00:59,100 --> 00:01:01,379
ending in.pl it's a scripting language


34
00:01:01,379 --> 00:01:03,359
so we start with a shebang and point it


35
00:01:03,359 --> 00:01:05,280
to the interpreter's binary declare a


36
00:01:05,280 --> 00:01:07,020
variable with a dollar sign then print


37
00:01:07,020 --> 00:01:08,400
it to the standard output and the


38
00:01:08,400 --> 00:01:10,320
variable can be easily interpolated into


39
00:01:10,320 --> 00:01:12,240
another string variables can be scoped


40
00:01:12,240 --> 00:01:14,100
locally with the my keyword or globally


41
00:01:14,100 --> 00:01:15,900
to an entire package with the hour


42
00:01:15,900 --> 00:01:18,000
keyword the dollar sign creates a scalar


43
00:01:18,000 --> 00:01:20,100
variable which is a single value like a


44
00:01:20,100 --> 00:01:21,659
string or number if we change the dollar


45
00:01:21,659 --> 00:01:23,520
sign to the at symbol this variable


46
00:01:23,520 --> 00:01:25,560
becomes an array the index of any item


47
00:01:25,560 --> 00:01:27,119
in the array can be accessed with


48
00:01:27,119 --> 00:01:28,979
brackets now name the variable with a


49
00:01:28,979 --> 00:01:31,259
percent sign to get a hash or key value


50
00:01:31,259 --> 00:01:33,540
pair to access one of its Keys use


51
00:01:33,540 --> 00:01:35,520
braces one of the design principles of


52
00:01:35,520 --> 00:01:37,020
pearl is things that are different


53
00:01:37,020 --> 00:01:38,880
should look different handle conditional


54
00:01:38,880 --> 00:01:41,100
logic using IF or unless then make it


55
00:01:41,100 --> 00:01:43,020
more concise by refactoring it to one


56
00:01:43,020 --> 00:01:44,640
line then make it even more concise


57
00:01:44,640 --> 00:01:46,560
using the ternary operator one of the


58
00:01:46,560 --> 00:01:48,479
most unusual things about Pearl is that


59
00:01:48,479 --> 00:01:49,920
your functions are defined as


60
00:01:49,920 --> 00:01:51,600
subroutines instead of defining


61
00:01:51,600 --> 00:01:53,340
parameters within parentheses like most


62
00:01:53,340 --> 00:01:55,380
other languages any arguments passed to


63
00:01:55,380 --> 00:01:57,360
the function can be accessed with the at


64
00:01:57,360 --> 00:01:58,979
underscore array when it comes to


65
00:01:58,979 --> 00:02:01,380
parsing text regex is built in and The


66
00:02:01,380 --> 00:02:03,180
Binding operator can easily match a


67
00:02:03,180 --> 00:02:05,159
string to a regular expression Pearl


68
00:02:05,159 --> 00:02:07,020
also has a lot of magic features like


69
00:02:07,020 --> 00:02:09,119
Auto vivification where if we try to


70
00:02:09,119 --> 00:02:10,860
increment a value in an array that


71
00:02:10,860 --> 00:02:12,239
doesn't exist it will automatically


72
00:02:12,239 --> 00:02:13,980
bring to life all the elements in


73
00:02:13,980 --> 00:02:15,720
between now to render code open the


74
00:02:15,720 --> 00:02:17,580
terminal and run The Interpreter this


75
00:02:17,580 --> 00:02:19,739
has been Pearl in 100 seconds hit the


76
00:02:19,739 --> 00:02:21,300
like button and subscribe if you want to


77
00:02:21,300 --> 00:02:22,860
see more short videos like this thanks


78
00:02:22,860 --> 00:02:24,840
for watching and I will see you in the


79
00:02:24,840 --> 00:02:27,140
next one


