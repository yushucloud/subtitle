1
00:00:00,399 --> 00:00:02,560
serverless computing it's a misnomer


2
00:00:02,560 --> 00:00:04,400
used to describe servers in the cloud


3
00:00:04,400 --> 00:00:06,399
that requires zero configuration or


4
00:00:06,399 --> 00:00:07,680
maintenance from the developer


5
00:00:07,680 --> 00:00:09,440
imagine you need water for your house


6
00:00:09,440 --> 00:00:10,719
you could spend a bunch of time and


7
00:00:10,719 --> 00:00:11,759
money digging a well


8
00:00:11,759 --> 00:00:13,599
testing the water quality and plumbing


9
00:00:13,599 --> 00:00:15,360
it to your house or you could just tap


10
00:00:15,360 --> 00:00:16,720
into the city water supply


11
00:00:16,720 --> 00:00:18,240
and pay a monthly fee based on the


12
00:00:18,240 --> 00:00:19,760
amount of water that you use


13
00:00:19,760 --> 00:00:21,840
serverless computing is the same idea


14
00:00:21,840 --> 00:00:22,880
but instead of water


15
00:00:22,880 --> 00:00:24,720
we're talking about the amount of cpu


16
00:00:24,720 --> 00:00:26,720
and memory it takes to run your code


17
00:00:26,720 --> 00:00:29,199
services like aws lambda google cloud


18
00:00:29,199 --> 00:00:30,000
functions and


19
00:00:30,000 --> 00:00:31,920
azure functions allow you to run your


20
00:00:31,920 --> 00:00:33,760
back-end code across their global data


21
00:00:33,760 --> 00:00:34,239
centers


22
00:00:34,239 --> 00:00:35,680
then they mail you a bill at the end of


23
00:00:35,680 --> 00:00:37,120
the month that's factored down to the


24
00:00:37,120 --> 00:00:37,840
millisecond


25
00:00:37,840 --> 00:00:39,440
the beauty of this approach is that your


26
00:00:39,440 --> 00:00:41,200
only concern is writing code


27
00:00:41,200 --> 00:00:42,480
you don't have to pick an operating


28
00:00:42,480 --> 00:00:44,480
system configure networking patch


29
00:00:44,480 --> 00:00:46,559
improvements or provision capacity to


30
00:00:46,559 --> 00:00:48,480
run at scale the cloud handles all that


31
00:00:48,480 --> 00:00:49,760
for you behind the scenes


32
00:00:49,760 --> 00:00:51,520
from an architectural standpoint it


33
00:00:51,520 --> 00:00:53,280
allows you to develop and test each


34
00:00:53,280 --> 00:00:54,320
business requirement


35
00:00:54,320 --> 00:00:56,160
independent of a bigger monolithic


36
00:00:56,160 --> 00:00:58,399
system not only do serverless functions


37
00:00:58,399 --> 00:01:00,079
make servers easier to manage


38
00:01:00,079 --> 00:01:02,079
but they can also be executed based on


39
00:01:02,079 --> 00:01:03,520
different events that happen in the


40
00:01:03,520 --> 00:01:03,920
cloud


41
00:01:03,920 --> 00:01:05,840
which can actually simplify your backend


42
00:01:05,840 --> 00:01:06,960
code for example


43
00:01:06,960 --> 00:01:08,479
you might create a new database record


44
00:01:08,479 --> 00:01:10,400
when a user places an order which then


45
00:01:10,400 --> 00:01:12,000
triggers a serverless function to


46
00:01:12,000 --> 00:01:14,240
send an email confirmation or maybe an


47
00:01:14,240 --> 00:01:16,479
iot event on a home security system


48
00:01:16,479 --> 00:01:18,400
invokes a function that sends a push


49
00:01:18,400 --> 00:01:20,320
notification to the user's device


50
00:01:20,320 --> 00:01:21,840
one of the easiest ways to get started


51
00:01:21,840 --> 00:01:23,680
with serverless is firebase cloud


52
00:01:23,680 --> 00:01:25,280
functions the command line tool will


53
00:01:25,280 --> 00:01:26,240
give us a project


54
00:01:26,240 --> 00:01:28,000
that looks like any other node.js


55
00:01:28,000 --> 00:01:30,560
backend in the code we can export named


56
00:01:30,560 --> 00:01:31,200
functions


57
00:01:31,200 --> 00:01:33,200
that are configured to run on different


58
00:01:33,200 --> 00:01:34,960
events that happen in google cloud


59
00:01:34,960 --> 00:01:37,759
an event could be a simple http request


60
00:01:37,759 --> 00:01:40,000
or a file upload database write


61
00:01:40,000 --> 00:01:42,240
analytics event and so on after writing


62
00:01:42,240 --> 00:01:43,759
our code we can then deploy it to


63
00:01:43,759 --> 00:01:45,759
production with a single command and we


64
00:01:45,759 --> 00:01:47,920
now have a reliable backend that is


65
00:01:47,920 --> 00:01:48,880
ready to scale


66
00:01:48,880 --> 00:01:51,200
this has been serverless in 100 seconds


67
00:01:51,200 --> 00:01:52,880
but if that sounded too good to be true


68
00:01:52,880 --> 00:01:54,479
make sure to stay tuned because i've


69
00:01:54,479 --> 00:01:56,399
invited dane from the filled stacks


70
00:01:56,399 --> 00:01:58,240
youtube channel to show us how to build


71
00:01:58,240 --> 00:02:00,719
a serverless backend for a big complex


72
00:02:00,719 --> 00:02:01,280
project


73
00:02:01,280 --> 00:02:02,399
if you're building anything with


74
00:02:02,399 --> 00:02:04,240
firebase or flutter you'll definitely


75
00:02:04,240 --> 00:02:06,000
want to follow his work


76
00:02:06,000 --> 00:02:08,160
hey there my name is dane and i run a


77
00:02:08,160 --> 00:02:09,679
little youtube channel called


78
00:02:09,679 --> 00:02:11,920
falstax that's focused on sharing the


79
00:02:11,920 --> 00:02:13,360
code that we use to build


80
00:02:13,360 --> 00:02:15,920
apps for our clients over on my channel


81
00:02:15,920 --> 00:02:17,840
we are building a product called


82
00:02:17,840 --> 00:02:20,400
boxed out a set of software built for a


83
00:02:20,400 --> 00:02:22,080
company that wants to run a


84
00:02:22,080 --> 00:02:24,319
product or food delivery service


85
00:02:24,319 --> 00:02:25,760
building one cloud function


86
00:02:25,760 --> 00:02:28,239
is easy but how do you structure dozens


87
00:02:28,239 --> 00:02:30,160
of functions to scale to real world


88
00:02:30,160 --> 00:02:32,239
demands how do you ensure you have a


89
00:02:32,239 --> 00:02:33,840
structured and maintainable


90
00:02:33,840 --> 00:02:36,080
backend how does a back-end with only


91
00:02:36,080 --> 00:02:37,920
serverless functions look


92
00:02:37,920 --> 00:02:39,599
over the next 15 minutes you'll learn


93
00:02:39,599 --> 00:02:41,680
how to build a serverless backend for


94
00:02:41,680 --> 00:02:42,959
non-trivial apps


95
00:02:42,959 --> 00:02:44,400
i'd like to start out by taking you


96
00:02:44,400 --> 00:02:46,400
through a high-level overview of how the


97
00:02:46,400 --> 00:02:47,840
back-end will be set up


98
00:02:47,840 --> 00:02:49,920
this overview will go over the types of


99
00:02:49,920 --> 00:02:50,959
functions we use


100
00:02:50,959 --> 00:02:53,599
as well as the actual code structure the


101
00:02:53,599 --> 00:02:55,920
backend is bold around the strings that


102
00:02:55,920 --> 00:02:57,040
firebase possess


103
00:02:57,040 --> 00:02:59,519
in the serverless cloud functions setup


104
00:02:59,519 --> 00:03:00,879
focusing on those strings


105
00:03:00,879 --> 00:03:02,879
we can break the system into two types


106
00:03:02,879 --> 00:03:04,000
of functions


107
00:03:04,000 --> 00:03:06,319
the two types of functions are restful


108
00:03:06,319 --> 00:03:07,440
and reactive


109
00:03:07,440 --> 00:03:09,760
a reactive function is a function that


110
00:03:09,760 --> 00:03:10,800
will only run


111
00:03:10,800 --> 00:03:13,920
in reaction to data or state that's


112
00:03:13,920 --> 00:03:15,840
being updated on the back end


113
00:03:15,840 --> 00:03:17,840
an example of this will be when a file


114
00:03:17,840 --> 00:03:19,680
is uploaded to cloud storage


115
00:03:19,680 --> 00:03:22,480
or the most common when a document or an


116
00:03:22,480 --> 00:03:24,959
entry in the database has been updated a


117
00:03:24,959 --> 00:03:26,959
restful function is a traditional


118
00:03:26,959 --> 00:03:29,519
restful function which will run when a


119
00:03:29,519 --> 00:03:32,000
client makes an http request


120
00:03:32,000 --> 00:03:34,239
to the uri that the function is assigned


121
00:03:34,239 --> 00:03:35,760
to now we can move on to


122
00:03:35,760 --> 00:03:38,400
the code structure we have an enforced


123
00:03:38,400 --> 00:03:39,360
code structure


124
00:03:39,360 --> 00:03:41,599
that will help with organization of the


125
00:03:41,599 --> 00:03:43,599
backend as well as the overall


126
00:03:43,599 --> 00:03:45,120
maintenance as it grows


127
00:03:45,120 --> 00:03:47,120
there's three major things to go over


128
00:03:47,120 --> 00:03:49,280
number one each function will be


129
00:03:49,280 --> 00:03:52,159
in its own dedicated file this is to get


130
00:03:52,159 --> 00:03:53,519
rid of the natural


131
00:03:53,519 --> 00:03:55,439
tendency when starting with firebase


132
00:03:55,439 --> 00:03:56,640
cloud functions


133
00:03:56,640 --> 00:03:58,879
to keep adding functions into the same


134
00:03:58,879 --> 00:04:01,120
index file forcing it to grow bigger as


135
00:04:01,120 --> 00:04:03,120
your backend requirements grow


136
00:04:03,120 --> 00:04:05,360
and as a note the file name will be the


137
00:04:05,360 --> 00:04:06,159
exact name


138
00:04:06,159 --> 00:04:08,319
of the endpoint or function to keep


139
00:04:08,319 --> 00:04:09,680
things easy to manage


140
00:04:09,680 --> 00:04:11,599
this is not a requirement but i found it


141
00:04:11,599 --> 00:04:13,120
to be quite useful


142
00:04:13,120 --> 00:04:15,519
number two functions will be placed in a


143
00:04:15,519 --> 00:04:18,639
folder titled either restful or reactive


144
00:04:18,639 --> 00:04:20,720
number three the backend will be split


145
00:04:20,720 --> 00:04:23,040
into different resource groups to ensure


146
00:04:23,040 --> 00:04:25,520
a structured backend in production


147
00:04:25,520 --> 00:04:27,360
as a quick example of this we can look


148
00:04:27,360 --> 00:04:29,199
at the code structure below for the


149
00:04:29,199 --> 00:04:31,440
product delivery service backend


150
00:04:31,440 --> 00:04:34,080
there are three resource groups orders


151
00:04:34,080 --> 00:04:34,800
payments


152
00:04:34,800 --> 00:04:37,199
and users and in each of those resource


153
00:04:37,199 --> 00:04:38,479
groups we are very active


154
00:04:38,479 --> 00:04:40,479
and a restful folder this is the only


155
00:04:40,479 --> 00:04:42,320
folder structure that you would need


156
00:04:42,320 --> 00:04:44,320
the rest is handled by the fact that


157
00:04:44,320 --> 00:04:45,680
each of the files will be


158
00:04:45,680 --> 00:04:48,160
its own function now that you have a


159
00:04:48,160 --> 00:04:50,320
basic overview of the code setup


160
00:04:50,320 --> 00:04:52,400
let's start with the actual


161
00:04:52,400 --> 00:04:53,919
implementation


162
00:04:53,919 --> 00:04:56,320
we'll start by creating a new folder


163
00:04:56,320 --> 00:04:57,600
called boxed out


164
00:04:57,600 --> 00:04:59,600
and inside that folder create a new


165
00:04:59,600 --> 00:05:01,280
folder called backend


166
00:05:01,280 --> 00:05:03,039
then we can navigate into the backend


167
00:05:03,039 --> 00:05:04,800
folder and run firebase


168
00:05:04,800 --> 00:05:07,520
init then you have to select yes to


169
00:05:07,520 --> 00:05:09,440
proceed when presented with the


170
00:05:09,440 --> 00:05:10,880
functions to select


171
00:05:10,880 --> 00:05:13,680
we'll choose firestore functions and


172
00:05:13,680 --> 00:05:14,560
emulators


173
00:05:14,560 --> 00:05:16,400
then we'll choose to create a new


174
00:05:16,400 --> 00:05:18,000
project and we'll call out


175
00:05:18,000 --> 00:05:20,800
boxed out dash backend we'll use that


176
00:05:20,800 --> 00:05:22,400
same name for the project


177
00:05:22,400 --> 00:05:25,440
name and then the firestore setup


178
00:05:25,440 --> 00:05:27,919
usually fails on first try because you


179
00:05:27,919 --> 00:05:29,440
have to click on the get


180
00:05:29,440 --> 00:05:32,560
started button go to the url that has


181
00:05:32,560 --> 00:05:33,759
been handed to you


182
00:05:33,759 --> 00:05:36,560
you end up on the cloud firestore page


183
00:05:36,560 --> 00:05:38,080
where you can click on create


184
00:05:38,080 --> 00:05:40,560
database for now we'll start in test


185
00:05:40,560 --> 00:05:41,919
mode i'm going to select


186
00:05:41,919 --> 00:05:44,320
europe west because i'm in africa and


187
00:05:44,320 --> 00:05:45,680
once that is complete


188
00:05:45,680 --> 00:05:48,479
go back to your command line shell that


189
00:05:48,479 --> 00:05:49,440
you've been using


190
00:05:49,440 --> 00:05:54,320
then we can run firebase init again


191
00:05:54,320 --> 00:05:57,919
we'll select firestore functions


192
00:05:57,919 --> 00:06:00,319
and emulators and this time we'll use an


193
00:06:00,319 --> 00:06:01,120
existing


194
00:06:01,120 --> 00:06:04,240
project and we'll use the boxed out


195
00:06:04,240 --> 00:06:06,479
backend that we just created then we'll


196
00:06:06,479 --> 00:06:07,919
select the default


197
00:06:07,919 --> 00:06:10,800
values for all the questions and for the


198
00:06:10,800 --> 00:06:11,440
functions


199
00:06:11,440 --> 00:06:13,840
setup will be using typescript i'm going


200
00:06:13,840 --> 00:06:15,840
to say no to eslint for now


201
00:06:15,840 --> 00:06:17,919
and then i will say yes to installing


202
00:06:17,919 --> 00:06:19,520
the dependencies


203
00:06:19,520 --> 00:06:21,440
when asked about the emulators we will


204
00:06:21,440 --> 00:06:23,759
select functions and firestore press


205
00:06:23,759 --> 00:06:24,639
enter to select


206
00:06:24,639 --> 00:06:27,840
all the default ports and we'll


207
00:06:27,840 --> 00:06:30,319
select to enable the emulator ui if you


208
00:06:30,319 --> 00:06:32,000
don't have the emulators downloaded


209
00:06:32,000 --> 00:06:34,240
select yes to download the emulators


210
00:06:34,240 --> 00:06:36,639
and that should complete your firebase


211
00:06:36,639 --> 00:06:37,360
functions


212
00:06:37,360 --> 00:06:41,840
setup and if we open up this code now


213
00:06:41,840 --> 00:06:44,479
you'll see a folder with another folder


214
00:06:44,479 --> 00:06:45,919
inside called functions


215
00:06:45,919 --> 00:06:47,680
and that is where the end will be


216
00:06:47,680 --> 00:06:49,520
written the files in


217
00:06:49,520 --> 00:06:52,880
the root folder describes the firestore


218
00:06:52,880 --> 00:06:55,520
project and some of the overall rules in


219
00:06:55,520 --> 00:06:56,880
the firestore project


220
00:06:56,880 --> 00:06:58,880
now that we've configured the basics of


221
00:06:58,880 --> 00:07:00,800
firebase functions project


222
00:07:00,800 --> 00:07:03,199
we can implement the backend system as


223
00:07:03,199 --> 00:07:03,919
described


224
00:07:03,919 --> 00:07:06,240
at the beginning we'll start off by


225
00:07:06,240 --> 00:07:07,520
installing the package


226
00:07:07,520 --> 00:07:10,160
dedicated to using the system described


227
00:07:10,160 --> 00:07:10,720
earlier


228
00:07:10,720 --> 00:07:12,960
it's called firebase backend we'll


229
00:07:12,960 --> 00:07:15,199
navigate into the functions folder


230
00:07:15,199 --> 00:07:18,160
and then we'll run npm install firebase


231
00:07:18,160 --> 00:07:18,720
dash


232
00:07:18,720 --> 00:07:20,599
backend then you can open up your


233
00:07:20,599 --> 00:07:22,160
index.ts file


234
00:07:22,160 --> 00:07:24,960
in your source folder you can delete all


235
00:07:24,960 --> 00:07:27,039
of the code in the file currently


236
00:07:27,039 --> 00:07:29,919
then we'll import the function parser


237
00:07:29,919 --> 00:07:31,680
from the firebase backend


238
00:07:31,680 --> 00:07:34,800
then we can set the exports equal to


239
00:07:34,800 --> 00:07:38,080
a newly constructed function parser


240
00:07:38,080 --> 00:07:41,599
that takes in the current directory name


241
00:07:41,599 --> 00:07:44,720
as well as the exports this will be all


242
00:07:44,720 --> 00:07:47,199
the code you need in your index.ts file


243
00:07:47,199 --> 00:07:50,319
regardless of how big your backend gets


244
00:07:50,319 --> 00:07:52,240
and that's also all the setup we need


245
00:07:52,240 --> 00:07:53,599
before we can actually start


246
00:07:53,599 --> 00:07:55,840
writing any functions let's start with


247
00:07:55,840 --> 00:07:56,960
something familiar


248
00:07:56,960 --> 00:07:59,199
we'll create a restful endpoint on our


249
00:07:59,199 --> 00:08:01,919
backend we'll start by creating a folder


250
00:08:01,919 --> 00:08:04,160
the resource group and we'll call that


251
00:08:04,160 --> 00:08:05,120
users


252
00:08:05,120 --> 00:08:07,120
then in the folder we'll create another


253
00:08:07,120 --> 00:08:08,240
folder called


254
00:08:08,240 --> 00:08:11,199
restful and in that folder we'll create


255
00:08:11,199 --> 00:08:12,160
a new file


256
00:08:12,160 --> 00:08:16,560
called add paymentmethod.endpoint.ts


257
00:08:16,560 --> 00:08:19,520
for any endpoint the file has to end in


258
00:08:19,520 --> 00:08:19,919
dot


259
00:08:19,919 --> 00:08:23,120
endpoint dot ts if it doesn't then it


260
00:08:23,120 --> 00:08:25,599
won't be loaded as an http endpoint on


261
00:08:25,599 --> 00:08:26,479
the backend


262
00:08:26,479 --> 00:08:28,639
then we'll start off in the file by


263
00:08:28,639 --> 00:08:30,000
importing request


264
00:08:30,000 --> 00:08:32,959
and response from express and will also


265
00:08:32,959 --> 00:08:33,599
import


266
00:08:33,599 --> 00:08:35,519
endpoint and request type from the


267
00:08:35,519 --> 00:08:36,880
firebase backend


268
00:08:36,880 --> 00:08:40,479
then we will export a default new


269
00:08:40,479 --> 00:08:43,279
endpoint the first value will pass in is


270
00:08:43,279 --> 00:08:44,080
the name


271
00:08:44,080 --> 00:08:46,320
of the endpoint we'll pass in the add


272
00:08:46,320 --> 00:08:47,200
payment method


273
00:08:47,200 --> 00:08:50,000
string the second parameter expects the


274
00:08:50,000 --> 00:08:50,640
type of


275
00:08:50,640 --> 00:08:53,600
endpoint that we are creating we'll pass


276
00:08:53,600 --> 00:08:54,560
in request


277
00:08:54,560 --> 00:08:58,080
type dot post and for the last parameter


278
00:08:58,080 --> 00:09:01,120
we pass in the express endpoint handler


279
00:09:01,120 --> 00:09:02,959
which is will be the actual code that's


280
00:09:02,959 --> 00:09:05,120
executed when your endpoint is called


281
00:09:05,120 --> 00:09:07,680
this is a function that takes in a


282
00:09:07,680 --> 00:09:08,560
request


283
00:09:08,560 --> 00:09:10,560
as well as a response and what we'll


284
00:09:10,560 --> 00:09:11,760
write in this function


285
00:09:11,760 --> 00:09:14,959
is just some code to read the values


286
00:09:14,959 --> 00:09:17,519
sent in the request and then return that


287
00:09:17,519 --> 00:09:18,399
in a different


288
00:09:18,399 --> 00:09:20,720
format so we can know that it's working


289
00:09:20,720 --> 00:09:22,160
we'll start by reading


290
00:09:22,160 --> 00:09:24,800
out the card number and the card holder


291
00:09:24,800 --> 00:09:25,839
from the request


292
00:09:25,839 --> 00:09:28,160
body then we'll create a new value


293
00:09:28,160 --> 00:09:29,279
called payment


294
00:09:29,279 --> 00:09:31,600
token that has these two values


295
00:09:31,600 --> 00:09:33,839
concatenated with an underscore in the


296
00:09:33,839 --> 00:09:35,360
middle and then we'll return


297
00:09:35,360 --> 00:09:38,640
a response with a status 201 and we'll


298
00:09:38,640 --> 00:09:39,519
send back


299
00:09:39,519 --> 00:09:42,720
a map with a key token and we'll assign


300
00:09:42,720 --> 00:09:45,040
it the payment token to make maintenance


301
00:09:45,040 --> 00:09:46,640
easy as the code base grows


302
00:09:46,640 --> 00:09:48,560
remember the tip that i mentioned give


303
00:09:48,560 --> 00:09:50,320
your file name the same name


304
00:09:50,320 --> 00:09:52,640
as your function endpoint that way when


305
00:09:52,640 --> 00:09:54,720
you are debugging an error in production


306
00:09:54,720 --> 00:09:56,800
you know exactly which file to go to to


307
00:09:56,800 --> 00:09:58,000
find your function


308
00:09:58,000 --> 00:10:00,399
now we can go ahead and test out this


309
00:10:00,399 --> 00:10:02,480
function to test this out we can simply


310
00:10:02,480 --> 00:10:02,880
run


311
00:10:02,880 --> 00:10:06,079
npm run serve this will build the


312
00:10:06,079 --> 00:10:06,880
typescript


313
00:10:06,880 --> 00:10:08,959
code and then serve the functions


314
00:10:08,959 --> 00:10:11,040
locally through the emulator


315
00:10:11,040 --> 00:10:13,839
if this command is successful you should


316
00:10:13,839 --> 00:10:14,240
see


317
00:10:14,240 --> 00:10:16,800
the following in your console as you can


318
00:10:16,800 --> 00:10:17,279
see


319
00:10:17,279 --> 00:10:20,320
the api has been deployed under


320
00:10:20,320 --> 00:10:23,600
this url which ends in users dash


321
00:10:23,600 --> 00:10:26,800
api each resource group that you create


322
00:10:26,800 --> 00:10:30,079
will have all the api endpoints under


323
00:10:30,079 --> 00:10:31,200
the resource group


324
00:10:31,200 --> 00:10:34,160
dash api with this deployed let's see if


325
00:10:34,160 --> 00:10:35,920
we can make a post to it and get the


326
00:10:35,920 --> 00:10:36,560
expected


327
00:10:36,560 --> 00:10:38,959
response for this i will be using


328
00:10:38,959 --> 00:10:39,760
postman


329
00:10:39,760 --> 00:10:41,839
we'll take the url that the api has been


330
00:10:41,839 --> 00:10:42,800
deployed to


331
00:10:42,800 --> 00:10:45,839
and paste that in the postman url field


332
00:10:45,839 --> 00:10:47,920
we can add our actual


333
00:10:47,920 --> 00:10:51,120
endpoint name at the end of it slash add


334
00:10:51,120 --> 00:10:54,240
payment method we'll change the request


335
00:10:54,240 --> 00:10:56,720
type to post and then for the body we


336
00:10:56,720 --> 00:10:57,760
will pass in


337
00:10:57,760 --> 00:11:01,279
payroll jason blob the first value will


338
00:11:01,279 --> 00:11:01,519
be


339
00:11:01,519 --> 00:11:03,760
card number i'll give it a basic value


340
00:11:03,760 --> 00:11:05,519
of one two three four five


341
00:11:05,519 --> 00:11:07,600
six seven and the second value will be


342
00:11:07,600 --> 00:11:10,000
card underscore holder and for the value


343
00:11:10,000 --> 00:11:10,880
we'll pass in


344
00:11:10,880 --> 00:11:13,120
full stacks when i execute this function


345
00:11:13,120 --> 00:11:15,519
now we should get back a token


346
00:11:15,519 --> 00:11:17,760
that has the card number followed by


347
00:11:17,760 --> 00:11:19,920
underscore and then with a card holder


348
00:11:19,920 --> 00:11:20,720
at the end of it


349
00:11:20,720 --> 00:11:22,480
and that's it that's how we create an


350
00:11:22,480 --> 00:11:24,320
endpoint and that's how all endpoints


351
00:11:24,320 --> 00:11:26,079
going forward will be created


352
00:11:26,079 --> 00:11:28,399
then you can stop your emulators from


353
00:11:28,399 --> 00:11:30,720
running and will move on to creating a


354
00:11:30,720 --> 00:11:31,600
reactive


355
00:11:31,600 --> 00:11:33,760
function to demonstrate this we'll add a


356
00:11:33,760 --> 00:11:36,480
function that will fire when a new user


357
00:11:36,480 --> 00:11:38,959
is created in the firestore database


358
00:11:38,959 --> 00:11:41,040
we'll create a new folder in the users


359
00:11:41,040 --> 00:11:43,519
folder called reactive and inside that


360
00:11:43,519 --> 00:11:44,079
folder


361
00:11:44,079 --> 00:11:48,519
will create a new file called on


362
00:11:48,519 --> 00:11:49,839
usercreated.function.ts


363
00:11:49,839 --> 00:11:52,440
and as you can imagine the


364
00:11:52,440 --> 00:11:53,600
part.function.ts


365
00:11:53,600 --> 00:11:55,920
is very important that's how we know


366
00:11:55,920 --> 00:11:58,399
which file to load as a reactive cloud


367
00:11:58,399 --> 00:12:00,399
function we'll start off by importing


368
00:12:00,399 --> 00:12:02,240
the firebase functions as


369
00:12:02,240 --> 00:12:04,560
functions and then on the exports we'll


370
00:12:04,560 --> 00:12:05,839
create a new


371
00:12:05,839 --> 00:12:08,480
function called on user created and


372
00:12:08,480 --> 00:12:09,600
we'll assign that


373
00:12:09,600 --> 00:12:13,360
to the oncreate function callback


374
00:12:13,360 --> 00:12:16,399
provided by a document from firestore


375
00:12:16,399 --> 00:12:18,480
to access that we'll index into


376
00:12:18,480 --> 00:12:22,000
functions


377
00:12:22,000 --> 00:12:25,040
go to firestore then supply the document


378
00:12:25,040 --> 00:12:25,600
pattern


379
00:12:25,600 --> 00:12:28,240
that we would like to listen to in our


380
00:12:28,240 --> 00:12:30,639
case we want to listen to the users


381
00:12:30,639 --> 00:12:31,360
collection


382
00:12:31,360 --> 00:12:34,480
and check for any new user id and lastly


383
00:12:34,480 --> 00:12:35,519
we want to listen


384
00:12:35,519 --> 00:12:38,720
to the oncreate function callback this


385
00:12:38,720 --> 00:12:39,440
takes in


386
00:12:39,440 --> 00:12:42,160
a callback function that provides us


387
00:12:42,160 --> 00:12:43,279
with the user's


388
00:12:43,279 --> 00:12:46,079
snapshot as well as the context of this


389
00:12:46,079 --> 00:12:47,200
event trigger


390
00:12:47,200 --> 00:12:49,440
the data for this document can be


391
00:12:49,440 --> 00:12:51,839
retrieved by calling the data function


392
00:12:51,839 --> 00:12:53,519
on the user snapshot


393
00:12:53,519 --> 00:12:55,920
to avoid getting off topic we're simply


394
00:12:55,920 --> 00:12:56,720
going to


395
00:12:56,720 --> 00:12:59,200
log out some text that says that we have


396
00:12:59,200 --> 00:13:00,639
sent an email to


397
00:13:00,639 --> 00:13:02,880
the email value on the data from the


398
00:13:02,880 --> 00:13:05,040
document to test out a reactive


399
00:13:05,040 --> 00:13:07,279
function you have to start all of the


400
00:13:07,279 --> 00:13:08,399
emulators


401
00:13:08,399 --> 00:13:11,920
so the npm run sir function won't work


402
00:13:11,920 --> 00:13:13,519
because that only deploys


403
00:13:13,519 --> 00:13:15,600
the functions to the emulator so to run


404
00:13:15,600 --> 00:13:17,360
this time we'll first run


405
00:13:17,360 --> 00:13:20,000
npm run bold and once that's complete


406
00:13:20,000 --> 00:13:20,800
we'll run


407
00:13:20,800 --> 00:13:23,920
firebase emulators colon start this will


408
00:13:23,920 --> 00:13:24,480
start up


409
00:13:24,480 --> 00:13:26,959
the functions as well as the firestore


410
00:13:26,959 --> 00:13:28,639
emulator that we selected at the


411
00:13:28,639 --> 00:13:29,360
beginning


412
00:13:29,360 --> 00:13:32,079
and then you'll see two urls one for the


413
00:13:32,079 --> 00:13:33,839
functions emulator and one for the


414
00:13:33,839 --> 00:13:34,639
firestore


415
00:13:34,639 --> 00:13:36,959
emulator in addition to that we can see


416
00:13:36,959 --> 00:13:39,040
that we also now have a new function


417
00:13:39,040 --> 00:13:40,000
deployed


418
00:13:40,000 --> 00:13:43,120
called on user created we will go ahead


419
00:13:43,120 --> 00:13:43,920
and create


420
00:13:43,920 --> 00:13:45,600
an actual document in the users


421
00:13:45,600 --> 00:13:47,440
collection and that function


422
00:13:47,440 --> 00:13:49,839
should fire on its own which is why it's


423
00:13:49,839 --> 00:13:51,519
called a reactive function


424
00:13:51,519 --> 00:13:54,240
you can open up the firestore emulator


425
00:13:54,240 --> 00:13:54,880
url


426
00:13:54,880 --> 00:13:57,199
then you can click on start collection


427
00:13:57,199 --> 00:13:59,600
we'll give it a collection id of users


428
00:13:59,600 --> 00:14:02,000
and for the field value we know that we


429
00:14:02,000 --> 00:14:03,279
are expecting an


430
00:14:03,279 --> 00:14:05,279
email i'll be so kind to give you my


431
00:14:05,279 --> 00:14:07,120
actual email address in case you have


432
00:14:07,120 --> 00:14:08,000
any questions


433
00:14:08,000 --> 00:14:13,519
which is dane at faultstacks.com


434
00:14:13,519 --> 00:14:15,920
if i click save and that document is


435
00:14:15,920 --> 00:14:16,560
created


436
00:14:16,560 --> 00:14:18,959
when i open up the console there should


437
00:14:18,959 --> 00:14:19,600
be


438
00:14:19,600 --> 00:14:22,240
logs saying that we've sent an email to


439
00:14:22,240 --> 00:14:23,600
this email address


440
00:14:23,600 --> 00:14:26,160
it tells us that it begins the execution


441
00:14:26,160 --> 00:14:27,680
and then it sends the email


442
00:14:27,680 --> 00:14:30,000
and that's it you've created a reactive


443
00:14:30,000 --> 00:14:31,600
function as well as an


444
00:14:31,600 --> 00:14:34,480
http endpoint going further when you


445
00:14:34,480 --> 00:14:36,320
want to expand your backend


446
00:14:36,320 --> 00:14:38,399
you simply create a new file in the


447
00:14:38,399 --> 00:14:39,600
dedicated folder


448
00:14:39,600 --> 00:14:41,600
and it will be added automatically to


449
00:14:41,600 --> 00:14:43,760
your backend when you deploy this one


450
00:14:43,760 --> 00:14:44,959
last thing i wanted


451
00:14:44,959 --> 00:14:47,600
to show you which is to improve the code


452
00:14:47,600 --> 00:14:49,440
setup the way that the default


453
00:14:49,440 --> 00:14:51,440
typescript project is set up is not


454
00:14:51,440 --> 00:14:53,920
sufficient for consistent deployments


455
00:14:53,920 --> 00:14:54,800
and debugging


456
00:14:54,800 --> 00:14:56,079
and because of that we'll add some


457
00:14:56,079 --> 00:14:57,920
additional things into our project we'll


458
00:14:57,920 --> 00:14:59,839
start by making sure that the old


459
00:14:59,839 --> 00:15:00,880
function code


460
00:15:00,880 --> 00:15:02,959
doesn't lurk around when we're testing


461
00:15:02,959 --> 00:15:04,079
any new changes


462
00:15:04,079 --> 00:15:06,560
to fix that we'll add a new package into


463
00:15:06,560 --> 00:15:08,079
the functions folder called


464
00:15:08,079 --> 00:15:11,360
remraf we'll run npm install


465
00:15:11,360 --> 00:15:14,399
d remraf this will install it as a


466
00:15:14,399 --> 00:15:15,360
development


467
00:15:15,360 --> 00:15:17,959
dependency then you can open up your


468
00:15:17,959 --> 00:15:19,519
package.json file


469
00:15:19,519 --> 00:15:21,959
and we'll add two new scripts into the


470
00:15:21,959 --> 00:15:23,120
package.json


471
00:15:23,120 --> 00:15:26,240
above the bold script we'll add a clean


472
00:15:26,240 --> 00:15:27,680
script which we'll call


473
00:15:27,680 --> 00:15:30,959
rimref and pass in the lib directory


474
00:15:30,959 --> 00:15:33,440
and then we'll add our second script


475
00:15:33,440 --> 00:15:34,320
which is called


476
00:15:34,320 --> 00:15:36,959
pre-build and this will call the clean


477
00:15:36,959 --> 00:15:37,759
script


478
00:15:37,759 --> 00:15:39,759
the pre-build will always run before


479
00:15:39,759 --> 00:15:41,920
build which pulls our typescript meaning


480
00:15:41,920 --> 00:15:43,600
the old code will be deleted


481
00:15:43,600 --> 00:15:46,000
before we build the new code and then to


482
00:15:46,000 --> 00:15:47,120
deploy we can run


483
00:15:47,120 --> 00:15:50,000
npm run build as you see there will now


484
00:15:50,000 --> 00:15:50,639
be


485
00:15:50,639 --> 00:15:52,560
three scripts that's being executed


486
00:15:52,560 --> 00:15:54,160
because of the two additional ones we


487
00:15:54,160 --> 00:15:55,440
added and then we'll run


488
00:15:55,440 --> 00:15:58,480
npm run deploy this will only deploy the


489
00:15:58,480 --> 00:16:00,240
functions to your backend


490
00:16:00,240 --> 00:16:02,079
when the deployment is complete you'll


491
00:16:02,079 --> 00:16:04,320
see your api link printed out


492
00:16:04,320 --> 00:16:06,720
and we can do the exact same test with


493
00:16:06,720 --> 00:16:08,399
postman that we did earlier


494
00:16:08,399 --> 00:16:10,560
this is quite a new package and a way of


495
00:16:10,560 --> 00:16:11,839
developing a back-end


496
00:16:11,839 --> 00:16:14,480
on firebase for us but it provides a


497
00:16:14,480 --> 00:16:16,079
clear path towards a


498
00:16:16,079 --> 00:16:19,040
large and maintainable firebase product


499
00:16:19,040 --> 00:16:20,959
if you want to see this being used in


500
00:16:20,959 --> 00:16:23,120
development please check out my channel


501
00:16:23,120 --> 00:16:24,720
where i'll be doing backend and


502
00:16:24,720 --> 00:16:26,959
front-end work on a product over the


503
00:16:26,959 --> 00:16:27,600
next


504
00:16:27,600 --> 00:16:29,360
year thank you jeff for having me on


505
00:16:29,360 --> 00:16:31,279
this awesome channel and thank you to


506
00:16:31,279 --> 00:16:33,519
the contributors lou allen android that


507
00:16:33,519 --> 00:16:35,360
helped me get the packages ready for


508
00:16:35,360 --> 00:16:36,240
this tutorial


509
00:16:36,240 --> 00:16:38,079
thank you guys for watching and i hope i


510
00:16:38,079 --> 00:16:40,480
see you over at the full stacks channel


511
00:16:40,480 --> 00:16:42,399
thanks for watching and i will see you


512
00:16:42,399 --> 00:16:47,680
in the next one


