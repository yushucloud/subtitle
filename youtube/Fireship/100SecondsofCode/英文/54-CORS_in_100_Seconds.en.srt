1
00:00:00,480 --> 00:00:03,040
cross-origin resource sharing or cores


2
00:00:03,040 --> 00:00:05,120
is a mechanism that allows a website on


3
00:00:05,120 --> 00:00:07,359
one url to request data from a different


4
00:00:07,359 --> 00:00:07,919
url


5
00:00:07,919 --> 00:00:09,760
and it's frustrated both front-end and


6
00:00:09,760 --> 00:00:11,519
back-end developers since the dawn of


7
00:00:11,519 --> 00:00:13,040
time you may have tried to use an image


8
00:00:13,040 --> 00:00:14,320
on your website that lives on a


9
00:00:14,320 --> 00:00:15,200
different url


10
00:00:15,200 --> 00:00:17,440
only to end up with a broken image or


11
00:00:17,440 --> 00:00:19,199
your website might try to fetch data


12
00:00:19,199 --> 00:00:20,160
from your api


13
00:00:20,160 --> 00:00:21,920
then fail with a coors error in the


14
00:00:21,920 --> 00:00:23,199
console that happens


15
00:00:23,199 --> 00:00:25,119
because the browser implements the same


16
00:00:25,119 --> 00:00:27,279
origin policy as part of its security


17
00:00:27,279 --> 00:00:29,439
model which allows a website to freely


18
00:00:29,439 --> 00:00:30,000
request


19
00:00:30,000 --> 00:00:32,239
images and data from its own url but


20
00:00:32,239 --> 00:00:34,399
blocks anything from an external url


21
00:00:34,399 --> 00:00:36,079
unless certain conditions are met when


22
00:00:36,079 --> 00:00:37,440
the browser makes a request


23
00:00:37,440 --> 00:00:39,520
it adds an origin header to the request


24
00:00:39,520 --> 00:00:41,600
message if that request goes to a server


25
00:00:41,600 --> 00:00:42,640
on the same origin


26
00:00:42,640 --> 00:00:44,480
then it's allowed by the browser with no


27
00:00:44,480 --> 00:00:45,840
questions asked however


28
00:00:45,840 --> 00:00:47,840
if that request goes to a different url


29
00:00:47,840 --> 00:00:49,520
then it's known as a cross origin


30
00:00:49,520 --> 00:00:50,079
request


31
00:00:50,079 --> 00:00:52,000
when sending the response the server


32
00:00:52,000 --> 00:00:54,559
will add the access control allow origin


33
00:00:54,559 --> 00:00:55,039
header


34
00:00:55,039 --> 00:00:56,960
its value needs to match the origin


35
00:00:56,960 --> 00:00:58,079
header on the request


36
00:00:58,079 --> 00:00:59,840
or it can be a wild card which allows


37
00:00:59,840 --> 00:01:01,440
any url to make the request


38
00:01:01,440 --> 00:01:03,120
if it's a mismatch though the browser


39
00:01:03,120 --> 00:01:04,640
will prevent the response data from


40
00:01:04,640 --> 00:01:05,920
being shared with the client


41
00:01:05,920 --> 00:01:07,680
this results in an error in the browser


42
00:01:07,680 --> 00:01:09,439
but for security reasons there's very


43
00:01:09,439 --> 00:01:11,360
limited information about what actually


44
00:01:11,360 --> 00:01:12,000
went wrong


45
00:01:12,000 --> 00:01:14,000
the solution to a corsair lies on the


46
00:01:14,000 --> 00:01:15,600
server if you don't control the server


47
00:01:15,600 --> 00:01:16,400
you're out of luck


48
00:01:16,400 --> 00:01:18,000
if you do control it you likely just


49
00:01:18,000 --> 00:01:19,920
need to configure it to respond with a


50
00:01:19,920 --> 00:01:22,240
proper header in express.js for example


51
00:01:22,240 --> 00:01:23,840
that can be achieved with a single line


52
00:01:23,840 --> 00:01:25,280
of middleware code which tells the


53
00:01:25,280 --> 00:01:27,280
server to include the course headers on


54
00:01:27,280 --> 00:01:28,320
every response


55
00:01:28,320 --> 00:01:31,040
now certain http requests like put or


56
00:01:31,040 --> 00:01:32,960
any request with a non-standard header


57
00:01:32,960 --> 00:01:34,400
will need to be preflighted


58
00:01:34,400 --> 00:01:36,000
and just like at the airport it's a


59
00:01:36,000 --> 00:01:38,079
sanity check that ensures the passenger


60
00:01:38,079 --> 00:01:38,799
or request


61
00:01:38,799 --> 00:01:41,040
is safe to fly on the airplane or server


62
00:01:41,040 --> 00:01:42,720
the browser automatically knows when to


63
00:01:42,720 --> 00:01:44,560
preflight and will first make a request


64
00:01:44,560 --> 00:01:46,720
using the options http verb


65
00:01:46,720 --> 00:01:48,720
the server will then respond saying yes


66
00:01:48,720 --> 00:01:49,920
i allow this origin


67
00:01:49,920 --> 00:01:51,439
to make requests with the following


68
00:01:51,439 --> 00:01:53,520
methods at which point the main request


69
00:01:53,520 --> 00:01:54,000
can happen


70
00:01:54,000 --> 00:01:56,079
without fear of disaster that may sound


71
00:01:56,079 --> 00:01:57,920
inefficient but the server can respond


72
00:01:57,920 --> 00:01:59,600
with a max age header allowing the


73
00:01:59,600 --> 00:02:01,520
browser to cache a preflight for a


74
00:02:01,520 --> 00:02:02,560
certain amount of time


75
00:02:02,560 --> 00:02:04,479
if you happen to be facing a coors error


76
00:02:04,479 --> 00:02:06,240
right now open the network tab in the


77
00:02:06,240 --> 00:02:06,799
browser


78
00:02:06,799 --> 00:02:08,479
find the response and look for the


79
00:02:08,479 --> 00:02:10,879
access control allow origin header if it


80
00:02:10,879 --> 00:02:12,879
doesn't exist you need to enable cores


81
00:02:12,879 --> 00:02:13,599
on your server


82
00:02:13,599 --> 00:02:15,599
if it does exist the url may be a


83
00:02:15,599 --> 00:02:16,959
mismatch with the website


84
00:02:16,959 --> 00:02:18,959
or if it was preflighted it may not be


85
00:02:18,959 --> 00:02:20,959
allowing those methods or headers in the


86
00:02:20,959 --> 00:02:21,599
request


87
00:02:21,599 --> 00:02:22,720
all of which are things you can


88
00:02:22,720 --> 00:02:24,640
configure on the server this has been


89
00:02:24,640 --> 00:02:26,720
cross origin resource sharing in 100


90
00:02:26,720 --> 00:02:28,560
seconds thanks for watching and i will


91
00:02:28,560 --> 00:02:32,640
see you in the next one


