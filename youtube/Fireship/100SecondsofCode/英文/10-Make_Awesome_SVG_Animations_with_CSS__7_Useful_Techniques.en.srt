1
00:00:01,199 --> 00:00:03,360
combining scalable vector graphics with


2
00:00:03,360 --> 00:00:04,560
css animation


3
00:00:04,560 --> 00:00:06,080
is one of the most powerful techniques


4
00:00:06,080 --> 00:00:07,440
that web designers have at their


5
00:00:07,440 --> 00:00:08,960
disposal to stand out from the


6
00:00:08,960 --> 00:00:09,760
competition


7
00:00:09,760 --> 00:00:11,679
just look at all the amazing animated


8
00:00:11,679 --> 00:00:14,000
duotone icons on the stripe homepage


9
00:00:14,000 --> 00:00:15,759
or this looping animated explainer


10
00:00:15,759 --> 00:00:17,600
sequence on the gatsby homepage


11
00:00:17,600 --> 00:00:19,279
you don't need to be an expert designer


12
00:00:19,279 --> 00:00:21,199
animator or developer to create things


13
00:00:21,199 --> 00:00:22,560
like this


14
00:00:22,560 --> 00:00:24,560
oh that was easy in today's tutorial


15
00:00:24,560 --> 00:00:26,560
you'll build two things an animated icon


16
00:00:26,560 --> 00:00:28,720
the user can interact with and a looping


17
00:00:28,720 --> 00:00:29,760
animated sequence


18
00:00:29,760 --> 00:00:32,079
all of which are powered by just svg and


19
00:00:32,079 --> 00:00:32,800
css


20
00:00:32,800 --> 00:00:34,320
and in the process you'll learn seven


21
00:00:34,320 --> 00:00:36,000
cool techniques that have helped me with


22
00:00:36,000 --> 00:00:37,520
vector graphics on the web over the


23
00:00:37,520 --> 00:00:38,000
years


24
00:00:38,000 --> 00:00:39,600
if you're new here like and subscribe


25
00:00:39,600 --> 00:00:41,120
sadly half the people that watch my


26
00:00:41,120 --> 00:00:41,680
content


27
00:00:41,680 --> 00:00:43,520
aren't actually subscribed yet first of


28
00:00:43,520 --> 00:00:45,760
all what is a scalable vector graphic


29
00:00:45,760 --> 00:00:47,920
well what it isn't is a raster image


30
00:00:47,920 --> 00:00:50,320
like a png or jpeg image that you might


31
00:00:50,320 --> 00:00:51,280
take on your phone


32
00:00:51,280 --> 00:00:53,199
those formats represent an image with a


33
00:00:53,199 --> 00:00:54,559
grid of pixels and that means the


34
00:00:54,559 --> 00:00:55,280
resolution


35
00:00:55,280 --> 00:00:57,120
is dependent on the number of pixels in


36
00:00:57,120 --> 00:00:59,039
the image to get a higher resolution


37
00:00:59,039 --> 00:00:59,440
image


38
00:00:59,440 --> 00:01:01,039
you need a bigger matrix with more


39
00:01:01,039 --> 00:01:02,719
pixels in it in contrast


40
00:01:02,719 --> 00:01:04,720
a vector image uses a totally different


41
00:01:04,720 --> 00:01:06,720
approach that's based on geometry and


42
00:01:06,720 --> 00:01:08,560
math instead of static pixels


43
00:01:08,560 --> 00:01:10,720
if you open an svg file in your editor


44
00:01:10,720 --> 00:01:12,720
you'll notice it looks exactly like html


45
00:01:12,720 --> 00:01:13,280
markup


46
00:01:13,280 --> 00:01:15,520
the svg tag has an attribute called view


47
00:01:15,520 --> 00:01:17,200
box that defines a grid


48
00:01:17,200 --> 00:01:18,799
then any graphics that are computed


49
00:01:18,799 --> 00:01:21,119
inside that grid can be scaled up to any


50
00:01:21,119 --> 00:01:21,600
size


51
00:01:21,600 --> 00:01:23,040
because you're just multiplying the math


52
00:01:23,040 --> 00:01:25,119
in that grid by the image resolution


53
00:01:25,119 --> 00:01:27,280
now inside the svg tags we have a bunch


54
00:01:27,280 --> 00:01:28,400
of different elements


55
00:01:28,400 --> 00:01:31,040
like rect circle and polygon to draw


56
00:01:31,040 --> 00:01:31,920
basic shapes


57
00:01:31,920 --> 00:01:33,360
the shapes have different attributes to


58
00:01:33,360 --> 00:01:35,600
define their xy coordinates and size


59
00:01:35,600 --> 00:01:37,200
then you have the path element which is


60
00:01:37,200 --> 00:01:39,119
the most powerful element in an svg


61
00:01:39,119 --> 00:01:40,720
because it's like having access to an


62
00:01:40,720 --> 00:01:42,640
imaginary pen where you can define any


63
00:01:42,640 --> 00:01:44,479
sequence of lines and curves


64
00:01:44,479 --> 00:01:45,840
now it's good to know what's inside an


65
00:01:45,840 --> 00:01:47,920
svg but you should rarely need to write


66
00:01:47,920 --> 00:01:49,759
the actual graphics code by hand


67
00:01:49,759 --> 00:01:51,280
instead you should be having a graphic


68
00:01:51,280 --> 00:01:53,360
designer do that in a design tool like


69
00:01:53,360 --> 00:01:55,520
figma illustrator or inkscape all of


70
00:01:55,520 --> 00:01:57,520
which can export vector graphics to the


71
00:01:57,520 --> 00:01:58,640
svg format


72
00:01:58,640 --> 00:02:00,240
now once a graphic has been drawn there


73
00:02:00,240 --> 00:02:01,600
are some cool things you can do to the


74
00:02:01,600 --> 00:02:04,479
code by integrating css for styling and


75
00:02:04,479 --> 00:02:06,320
javascript for interaction


76
00:02:06,320 --> 00:02:07,680
and we'll take a hands-on look at that


77
00:02:07,680 --> 00:02:10,479
now by building an animated svg icon the


78
00:02:10,479 --> 00:02:11,599
only thing you really need to follow


79
00:02:11,599 --> 00:02:12,640
along with this project


80
00:02:12,640 --> 00:02:15,200
is an html file and a design tool like


81
00:02:15,200 --> 00:02:17,280
figma that can export svg


82
00:02:17,280 --> 00:02:18,879
you can also find the full source code


83
00:02:18,879 --> 00:02:20,480
on github or follow along with the


84
00:02:20,480 --> 00:02:22,239
article on fireship io


85
00:02:22,239 --> 00:02:23,840
i'm on the stripe homepage and i see


86
00:02:23,840 --> 00:02:25,760
this little animated triangle icon


87
00:02:25,760 --> 00:02:27,280
and what i want to do is reverse


88
00:02:27,280 --> 00:02:29,120
engineer it if we open up chrome dev


89
00:02:29,120 --> 00:02:29,680
tools


90
00:02:29,680 --> 00:02:31,599
we can then hit command p and then


91
00:02:31,599 --> 00:02:32,959
search for animations


92
00:02:32,959 --> 00:02:35,200
to bring up the animations tab this is a


93
00:02:35,200 --> 00:02:36,000
really awesome little


94
00:02:36,000 --> 00:02:37,760
feature that will record all of the


95
00:02:37,760 --> 00:02:39,280
animations on the page


96
00:02:39,280 --> 00:02:40,800
then give you a breakdown of the


97
00:02:40,800 --> 00:02:43,120
keyframes and which elements they affect


98
00:02:43,120 --> 00:02:44,800
you can pause the animation and slow it


99
00:02:44,800 --> 00:02:46,400
down then when you click on one of them


100
00:02:46,400 --> 00:02:47,840
it will take you to that element in the


101
00:02:47,840 --> 00:02:50,080
dom it's really useful to inspect other


102
00:02:50,080 --> 00:02:52,080
websites that have impressive animations


103
00:02:52,080 --> 00:02:52,720
going on


104
00:02:52,720 --> 00:02:54,239
you can see how their svg code is


105
00:02:54,239 --> 00:02:55,840
structured and you can even copy and


106
00:02:55,840 --> 00:02:57,599
paste it if you want to mess with it in


107
00:02:57,599 --> 00:02:59,200
your own editor a useful piece of


108
00:02:59,200 --> 00:03:00,640
information i've gathered by inspecting


109
00:03:00,640 --> 00:03:01,120
the code


110
00:03:01,120 --> 00:03:02,879
is that it's not actually two triangles


111
00:03:02,879 --> 00:03:04,720
but four triangles it's just that two of


112
00:03:04,720 --> 00:03:05,519
them are hidden


113
00:03:05,519 --> 00:03:07,280
off canvas to make the animation


114
00:03:07,280 --> 00:03:09,360
possible the first step in recreating


115
00:03:09,360 --> 00:03:10,239
something like this


116
00:03:10,239 --> 00:03:12,159
is to draw the graphics and to handle


117
00:03:12,159 --> 00:03:14,159
that we'll use a free tool on the web


118
00:03:14,159 --> 00:03:15,120
called figma


119
00:03:15,120 --> 00:03:16,720
inside the app we'll create a frame


120
00:03:16,720 --> 00:03:18,640
which is equivalent to the view box in


121
00:03:18,640 --> 00:03:19,840
the svg code


122
00:03:19,840 --> 00:03:22,239
we'll make the canvas a 120 units wide


123
00:03:22,239 --> 00:03:23,599
by a hundred units high


124
00:03:23,599 --> 00:03:25,599
when designing we'll think in pixels and


125
00:03:25,599 --> 00:03:27,360
i'd recommend drawing on the smallest


126
00:03:27,360 --> 00:03:29,200
frame possible that'll make it easier to


127
00:03:29,200 --> 00:03:30,879
align things and make your graphics


128
00:03:30,879 --> 00:03:31,680
pixel perfect


129
00:03:31,680 --> 00:03:33,680
from there we'll use the polygon tool to


130
00:03:33,680 --> 00:03:35,040
draw three triangles


131
00:03:35,040 --> 00:03:36,319
we'll give one of the triangles a


132
00:03:36,319 --> 00:03:38,080
different color and then decrease the


133
00:03:38,080 --> 00:03:39,840
opacity on all of them making them


134
00:03:39,840 --> 00:03:41,519
somewhat transparent you'll notice on


135
00:03:41,519 --> 00:03:43,599
the layers panel here that figma is


136
00:03:43,599 --> 00:03:45,440
automatically creating layer names for


137
00:03:45,440 --> 00:03:47,120
us but if you have layers that you're


138
00:03:47,120 --> 00:03:48,720
going to style with css


139
00:03:48,720 --> 00:03:50,640
or animate i'd recommend giving them


140
00:03:50,640 --> 00:03:51,920
their own custom names


141
00:03:51,920 --> 00:03:53,120
like in this case i've named my


142
00:03:53,120 --> 00:03:55,040
triangles dark 1 dark 2


143
00:03:55,040 --> 00:03:57,280
and light 1. and when figma exports it


144
00:03:57,280 --> 00:03:58,319
to svg


145
00:03:58,319 --> 00:04:00,640
it will use those names as ids on the


146
00:04:00,640 --> 00:04:02,799
element allowing us to easily target it


147
00:04:02,799 --> 00:04:05,040
in the code with a css selector


148
00:04:05,040 --> 00:04:06,959
now another very important tip if you


149
00:04:06,959 --> 00:04:08,879
want to create duotone icons


150
00:04:08,879 --> 00:04:10,879
is to group your elements together based


151
00:04:10,879 --> 00:04:12,560
on color when you create a group


152
00:04:12,560 --> 00:04:14,720
it's actually going to create a g


153
00:04:14,720 --> 00:04:16,720
element in the svg code


154
00:04:16,720 --> 00:04:19,040
which is kind of like a div in html it's


155
00:04:19,040 --> 00:04:20,799
just a container for grouping


156
00:04:20,799 --> 00:04:22,720
and styling elements together so we'll


157
00:04:22,720 --> 00:04:24,240
select the two dark elements


158
00:04:24,240 --> 00:04:26,479
group them then give the group itself a


159
00:04:26,479 --> 00:04:27,680
name of dark group


160
00:04:27,680 --> 00:04:29,440
and then do the same thing for the light


161
00:04:29,440 --> 00:04:31,440
group now to recreate the animation


162
00:04:31,440 --> 00:04:32,960
we'll want to position the light


163
00:04:32,960 --> 00:04:34,880
triangle first then the dark one


164
00:04:34,880 --> 00:04:35,440
triangle


165
00:04:35,440 --> 00:04:37,430
after it now the second dark 

166
00:04:37,430 --> 00:04:37,440
after it now the second dark triangle


167
00:04:37,440 --> 00:04:38,800
will actually be positioned


168
00:04:38,800 --> 00:04:40,880
off the screen when the animation starts


169
00:04:40,880 --> 00:04:42,560
but we'll handle that with css


170
00:04:42,560 --> 00:04:44,400
so for right now we'll just position it


171
00:04:44,400 --> 00:04:46,479
directly on top of the light triangle


172
00:04:46,479 --> 00:04:47,840
that takes care of our design


173
00:04:47,840 --> 00:04:50,000
now we just need to export it to svg


174
00:04:50,000 --> 00:04:51,840
which we can do in figma by selecting


175
00:04:51,840 --> 00:04:52,479
the frame


176
00:04:52,479 --> 00:04:54,240
then clicking on the export button down


177
00:04:54,240 --> 00:04:55,919
here on the bottom right corner make


178
00:04:55,919 --> 00:04:57,600
sure that it's svg format


179
00:04:57,600 --> 00:04:59,759
then click on the menu to also include


180
00:04:59,759 --> 00:05:02,240
the id attributes on the export that'll


181
00:05:02,240 --> 00:05:04,080
make the file a little bit larger but


182
00:05:04,080 --> 00:05:06,000
much easier to work with with css


183
00:05:06,000 --> 00:05:06,880
animation


184
00:05:06,880 --> 00:05:09,120
oh and also uncheck the box to show the


185
00:05:09,120 --> 00:05:10,080
frame fill color


186
00:05:10,080 --> 00:05:12,160
and the export now go ahead and open the


187
00:05:12,160 --> 00:05:13,600
file up in vs code


188
00:05:13,600 --> 00:05:15,840
you should see markup with an svg that


189
00:05:15,840 --> 00:05:18,400
has a view box of 120 by 100


190
00:05:18,400 --> 00:05:20,080
then you'll see group elements that have


191
00:05:20,080 --> 00:05:22,320
ids based on what we assigned in figma


192
00:05:22,320 --> 00:05:23,919
and finally inside the groups you'll


193
00:05:23,919 --> 00:05:25,919
find the actual paths that draw the


194
00:05:25,919 --> 00:05:26,560
graphics


195
00:05:26,560 --> 00:05:28,800
now we could use this svg file with an


196
00:05:28,800 --> 00:05:30,160
html image tag


197
00:05:30,160 --> 00:05:31,919
but we can also just declare this markup


198
00:05:31,919 --> 00:05:34,000
directly in the html which opens up the


199
00:05:34,000 --> 00:05:35,600
door to custom styling


200
00:05:35,600 --> 00:05:37,919
and animation go ahead and copy the code


201
00:05:37,919 --> 00:05:39,759
then create an html file


202
00:05:39,759 --> 00:05:42,240
and add the svg graphic to the body what


203
00:05:42,240 --> 00:05:43,120
i want to show you now


204
00:05:43,120 --> 00:05:45,600
is how to make this a themeable duotone


205
00:05:45,600 --> 00:05:46,320
icon


206
00:05:46,320 --> 00:05:48,240
if you open up this html page in a


207
00:05:48,240 --> 00:05:50,479
browser you should notice the icon there


208
00:05:50,479 --> 00:05:52,080
that looks identical to what you


209
00:05:52,080 --> 00:05:53,840
designed in figma if we take a closer


210
00:05:53,840 --> 00:05:55,600
look at one of the path elements you'll


211
00:05:55,600 --> 00:05:56,720
notice that there's a fill


212
00:05:56,720 --> 00:05:58,560
attribute that is coded to a certain


213
00:05:58,560 --> 00:06:00,240
color that's fine if the color never


214
00:06:00,240 --> 00:06:00,880
changes


215
00:06:00,880 --> 00:06:03,120
but inline styles like this are hard to


216
00:06:03,120 --> 00:06:05,199
override so let's go ahead and delete


217
00:06:05,199 --> 00:06:06,000
the fill colors


218
00:06:06,000 --> 00:06:08,000
from the svg code if you open up the


219
00:06:08,000 --> 00:06:09,840
html page you'll notice that the


220
00:06:09,840 --> 00:06:11,280
triangles are invisible


221
00:06:11,280 --> 00:06:13,600
we can change that by opening up a style


222
00:06:13,600 --> 00:06:15,360
tag and then we'll target the root


223
00:06:15,360 --> 00:06:17,360
element where we can define css


224
00:06:17,360 --> 00:06:18,080
variables


225
00:06:18,080 --> 00:06:20,240
we have a dark color and a light color


226
00:06:20,240 --> 00:06:21,919
then we can assign those variables to


227
00:06:21,919 --> 00:06:23,199
groups in our svg


228
00:06:23,199 --> 00:06:25,360
by targeting their id the dark group is


229
00:06:25,360 --> 00:06:26,880
filled with a dark color and the light


230
00:06:26,880 --> 00:06:28,240
group filled with the light color


231
00:06:28,240 --> 00:06:30,560
and now our icon is easily themable the


232
00:06:30,560 --> 00:06:31,440
next question


233
00:06:31,440 --> 00:06:33,280
is how do we animate this icon when the


234
00:06:33,280 --> 00:06:34,639
user hovers over it


235
00:06:34,639 --> 00:06:36,479
first we'll need to select the three


236
00:06:36,479 --> 00:06:38,319
triangles that we want to animate based


237
00:06:38,319 --> 00:06:39,199
on their ids


238
00:06:39,199 --> 00:06:40,720
we can then tell them to animate


239
00:06:40,720 --> 00:06:42,639
automatically using the transition


240
00:06:42,639 --> 00:06:43,199
property


241
00:06:43,199 --> 00:06:45,759
this tells css to animate all properties


242
00:06:45,759 --> 00:06:46,560
on the element


243
00:06:46,560 --> 00:06:48,880
over a duration of one second with a


244
00:06:48,880 --> 00:06:50,479
timing function of ease


245
00:06:50,479 --> 00:06:51,919
and now all we have to do is change the


246
00:06:51,919 --> 00:06:53,520
styling on the elements and they will


247
00:06:53,520 --> 00:06:54,800
animate automatically


248
00:06:54,800 --> 00:06:56,800
if you remember earlier our graphic has


249
00:06:56,800 --> 00:06:57,919
a dark triangle


250
00:06:57,919 --> 00:07:00,000
on top of the light triangle but we want


251
00:07:00,000 --> 00:07:02,400
to move that entirely off the screen


252
00:07:02,400 --> 00:07:04,400
before the animation starts and we can


253
00:07:04,400 --> 00:07:06,479
do that by setting its transform


254
00:07:06,479 --> 00:07:08,639
translate x value to negative one


255
00:07:08,639 --> 00:07:09,520
hundred percent


256
00:07:09,520 --> 00:07:11,520
which will move it over to the left now


257
00:07:11,520 --> 00:07:13,599
from there we'll target the hover event


258
00:07:13,599 --> 00:07:15,680
on the svg itself then we'll target the


259
00:07:15,680 --> 00:07:17,199
styling of each triangle


260
00:07:17,199 --> 00:07:18,960
individually the light triangle will


261
00:07:18,960 --> 00:07:20,560
just move over to the right a little bit


262
00:07:20,560 --> 00:07:22,479
the dark triangle will also move over to


263
00:07:22,479 --> 00:07:24,080
the right but it will also change its


264
00:07:24,080 --> 00:07:25,360
opacity to zero


265
00:07:25,360 --> 00:07:27,360
to fade out and then finally we have the


266
00:07:27,360 --> 00:07:29,120
second dark triangle which is currently


267
00:07:29,120 --> 00:07:30,479
invisible off the screen


268
00:07:30,479 --> 00:07:32,560
we can bring it back into the screen by


269
00:07:32,560 --> 00:07:34,720
setting the translate x back to zero


270
00:07:34,720 --> 00:07:36,240
and now if we go back to the demo and


271
00:07:36,240 --> 00:07:38,160
hover over the icon you should see the


272
00:07:38,160 --> 00:07:40,319
animation transition back and forth


273
00:07:40,319 --> 00:07:42,000
that's a good start but another cool


274
00:07:42,000 --> 00:07:44,000
thing we can do is target events on the


275
00:07:44,000 --> 00:07:44,720
svg


276
00:07:44,720 --> 00:07:46,879
using javascript what we'll do next is


277
00:07:46,879 --> 00:07:48,479
change the styling of the button


278
00:07:48,479 --> 00:07:50,560
dynamically every time that it's clicked


279
00:07:50,560 --> 00:07:52,400
to handle that we'll open up a script


280
00:07:52,400 --> 00:07:54,879
tag just before the closing body tag


281
00:07:54,879 --> 00:07:57,120
you can handle events on the svg itself


282
00:07:57,120 --> 00:07:59,599
or individual shapes within the svg


283
00:07:59,599 --> 00:08:01,520
we'll go ahead and select our triangles


284
00:08:01,520 --> 00:08:04,400
group using document getelementbyid then


285
00:08:04,400 --> 00:08:05,599
we can define a function


286
00:08:05,599 --> 00:08:07,520
that will be called on its click event


287
00:08:07,520 --> 00:08:09,599
the function contains an array of colors


288
00:08:09,599 --> 00:08:11,520
then we'll define another function here


289
00:08:11,520 --> 00:08:13,840
to randomly select a color from that


290
00:08:13,840 --> 00:08:14,319
array


291
00:08:14,319 --> 00:08:16,080
we can then change the css variables


292
00:08:16,080 --> 00:08:17,360
that we defined earlier


293
00:08:17,360 --> 00:08:19,680
by targeting the document element style


294
00:08:19,680 --> 00:08:20,879
css text


295
00:08:20,879 --> 00:08:22,479
and that will change our dark and light


296
00:08:22,479 --> 00:08:24,639
color variables to random values


297
00:08:24,639 --> 00:08:26,479
a nice little bonus here is that the


298
00:08:26,479 --> 00:08:28,479
color change will also be animated


299
00:08:28,479 --> 00:08:30,080
because we already have that transition


300
00:08:30,080 --> 00:08:30,720
animation


301
00:08:30,720 --> 00:08:32,880
on the element targeting all properties


302
00:08:32,880 --> 00:08:34,479
and now we get a nice little translation


303
00:08:34,479 --> 00:08:36,159
between colors whenever we click on the


304
00:08:36,159 --> 00:08:36,800
icon


305
00:08:36,800 --> 00:08:38,800
icons are cool but what if we wanted a


306
00:08:38,800 --> 00:08:40,800
looping animation that just runs in the


307
00:08:40,800 --> 00:08:41,440
background


308
00:08:41,440 --> 00:08:42,959
without the need for the user to


309
00:08:42,959 --> 00:08:44,720
interact with it something like that


310
00:08:44,720 --> 00:08:46,720
will require keyframe animations in the


311
00:08:46,720 --> 00:08:48,720
demo notice how we have an outline of a


312
00:08:48,720 --> 00:08:49,279
phone


313
00:08:49,279 --> 00:08:51,279
then some skeleton text pops in from the


314
00:08:51,279 --> 00:08:52,560
bottom after that


315
00:08:52,560 --> 00:08:54,880
a few icons drop in in a staggered


316
00:08:54,880 --> 00:08:56,160
motion from the top


317
00:08:56,160 --> 00:08:57,680
now i'm not going to draw this graphic


318
00:08:57,680 --> 00:08:59,440
from scratch and figma it's really just


319
00:08:59,440 --> 00:09:00,959
a set of a bunch of simple shapes that


320
00:09:00,959 --> 00:09:02,240
i'm sure you can figure out and of


321
00:09:02,240 --> 00:09:03,519
course you can find the code for this


322
00:09:03,519 --> 00:09:04,720
graphic on github


323
00:09:04,720 --> 00:09:06,000
what i do want to show you though is


324
00:09:06,000 --> 00:09:07,519
that we have separate groups for the


325
00:09:07,519 --> 00:09:09,120
phone the skeleton text


326
00:09:09,120 --> 00:09:11,519
and the bolt icons when the icons drop


327
00:09:11,519 --> 00:09:12,800
in they'll be staggered


328
00:09:12,800 --> 00:09:15,040
so we have those numbered based on the


329
00:09:15,040 --> 00:09:16,480
order in which they should appear


330
00:09:16,480 --> 00:09:18,560
go ahead and export the graphic and then


331
00:09:18,560 --> 00:09:20,720
bring it into your html just like we did


332
00:09:20,720 --> 00:09:22,000
in the previous example


333
00:09:22,000 --> 00:09:24,240
then open up a style tag and the first


334
00:09:24,240 --> 00:09:25,680
group that we'll want to target


335
00:09:25,680 --> 00:09:27,680
is the skeleton text it should fade


336
00:09:27,680 --> 00:09:28,880
upwards from the bottom


337
00:09:28,880 --> 00:09:30,880
so we'll create a keyframes animation


338
00:09:30,880 --> 00:09:32,240
called fade in up


339
00:09:32,240 --> 00:09:34,000
we can then apply that animation to the


340
00:09:34,000 --> 00:09:36,240
group in the svg using the animation


341
00:09:36,240 --> 00:09:37,040
property


342
00:09:37,040 --> 00:09:39,519
with the name over a duration of one


343
00:09:39,519 --> 00:09:40,240
second


344
00:09:40,240 --> 00:09:42,320
now the way a keyframes animation works


345
00:09:42,320 --> 00:09:43,839
is it starts with a certain set of


346
00:09:43,839 --> 00:09:44,640
properties


347
00:09:44,640 --> 00:09:46,320
then animates to a different set of


348
00:09:46,320 --> 00:09:48,320
properties over that duration which in


349
00:09:48,320 --> 00:09:50,320
this case would be one second from


350
00:09:50,320 --> 00:09:52,160
is the beginning of the animation which


351
00:09:52,160 --> 00:09:53,920
will start with an opacity of zero


352
00:09:53,920 --> 00:09:56,000
and a transform that will move the group


353
00:09:56,000 --> 00:09:57,200
slightly down the y


354
00:09:57,200 --> 00:09:59,120
axis by twenty percent then we can


355
00:09:59,120 --> 00:10:00,240
define properties for


356
00:10:00,240 --> 00:10:02,560
two which is the end of the animation at


357
00:10:02,560 --> 00:10:03,920
that point the group should have an


358
00:10:03,920 --> 00:10:04,959
opacity of 1


359
00:10:04,959 --> 00:10:06,800
and be translated back to its original


360
00:10:06,800 --> 00:10:08,560
position and that's all it takes to


361
00:10:08,560 --> 00:10:10,160
build a simple keyframe animation


362
00:10:10,160 --> 00:10:12,079
that can fade in the skeleton text now


363
00:10:12,079 --> 00:10:13,360
we'll tackle the more complex


364
00:10:13,360 --> 00:10:14,000
requirement


365
00:10:14,000 --> 00:10:15,760
of building a staggered keyframe


366
00:10:15,760 --> 00:10:18,000
animation we need to target each icon


367
00:10:18,000 --> 00:10:19,760
in the bulk group individually and then


368
00:10:19,760 --> 00:10:21,360
we'll define a keyframes animation


369
00:10:21,360 --> 00:10:22,320
called drop in


370
00:10:22,320 --> 00:10:24,160
that will drop those icons in from the


371
00:10:24,160 --> 00:10:26,000
top initially they'll have an opacity of


372
00:10:26,000 --> 00:10:26,640
zero


373
00:10:26,640 --> 00:10:28,800
then we'll assign the animation to run


374
00:10:28,800 --> 00:10:30,640
for eight seconds with an easing


375
00:10:30,640 --> 00:10:31,200
function


376
00:10:31,200 --> 00:10:33,120
in addition we'll define the animation


377
00:10:33,120 --> 00:10:34,480
direction as forwards


378
00:10:34,480 --> 00:10:36,160
which tells it to use the last value in


379
00:10:36,160 --> 00:10:38,399
the keyframe after the animation ends


380
00:10:38,399 --> 00:10:40,240
in addition if you want the animation to


381
00:10:40,240 --> 00:10:42,320
loop you can add the infinite value


382
00:10:42,320 --> 00:10:44,240
which tells it to run continuously on a


383
00:10:44,240 --> 00:10:44,640
loop


384
00:10:44,640 --> 00:10:46,240
now when you have a staggered animation


385
00:10:46,240 --> 00:10:47,839
running on a loop you really need to


386
00:10:47,839 --> 00:10:49,920
think carefully about your keyframes


387
00:10:49,920 --> 00:10:51,440
you need to think of the animation in


388
00:10:51,440 --> 00:10:53,040
its entirety which in this case


389
00:10:53,040 --> 00:10:54,959
is a full 8 seconds and design the


390
00:10:54,959 --> 00:10:56,160
keyframes accordingly


391
00:10:56,160 --> 00:10:57,600
in this example we don't want the


392
00:10:57,600 --> 00:10:59,519
elements to appear for the first twenty


393
00:10:59,519 --> 00:11:01,040
percent of the animation


394
00:11:01,040 --> 00:11:03,120
then between twenty and thirty percent


395
00:11:03,120 --> 00:11:04,480
they'll drop in from the top


396
00:11:04,480 --> 00:11:06,079
then normally they would start fading


397
00:11:06,079 --> 00:11:07,920
out for the remaining seventy percent of


398
00:11:07,920 --> 00:11:08,800
the animation


399
00:11:08,800 --> 00:11:10,560
but in this case we want them to hold


400
00:11:10,560 --> 00:11:12,480
that position so we'll also keep those


401
00:11:12,480 --> 00:11:13,600
values consistent


402
00:11:13,600 --> 00:11:15,920
through 100 so that takes care of the


403
00:11:15,920 --> 00:11:17,120
drop in animation


404
00:11:17,120 --> 00:11:19,040
but now the question becomes how do we


405
00:11:19,040 --> 00:11:20,560
stagger it there are a few different


406
00:11:20,560 --> 00:11:21,680
ways you might approach this


407
00:11:21,680 --> 00:11:23,440
but i think the cleanest way is to


408
00:11:23,440 --> 00:11:25,760
define inline css variables


409
00:11:25,760 --> 00:11:28,240
directly in the svg itself the inline


410
00:11:28,240 --> 00:11:30,000
variables will have higher priority


411
00:11:30,000 --> 00:11:31,360
which means we can access them


412
00:11:31,360 --> 00:11:33,680
in our style sheet in the svg code we'll


413
00:11:33,680 --> 00:11:34,399
want to find


414
00:11:34,399 --> 00:11:36,800
each bolt group and on that group we'll


415
00:11:36,800 --> 00:11:38,079
apply a style


416
00:11:38,079 --> 00:11:40,240
that has a css variable named order


417
00:11:40,240 --> 00:11:41,839
which represents the order in which they


418
00:11:41,839 --> 00:11:42,480
should appear


419
00:11:42,480 --> 00:11:44,240
we'll go ahead and do that for all five


420
00:11:44,240 --> 00:11:46,000
icons in the svg


421
00:11:46,000 --> 00:11:47,920
then we can come back to our main style


422
00:11:47,920 --> 00:11:50,079
sheet and add the animation delay


423
00:11:50,079 --> 00:11:50,639
property


424
00:11:50,639 --> 00:11:52,560
the cool thing about css variables is


425
00:11:52,560 --> 00:11:54,079
that we can use them with calc


426
00:11:54,079 --> 00:11:56,079
to dynamically calculate a value for the


427
00:11:56,079 --> 00:11:58,399
delay just multiply the order value by


428
00:11:58,399 --> 00:11:59,680
200 milliseconds


429
00:11:59,680 --> 00:12:01,680
to have each icon drop in 200


430
00:12:01,680 --> 00:12:03,279
milliseconds after the other


431
00:12:03,279 --> 00:12:05,200
and you now have an animated svg that


432
00:12:05,200 --> 00:12:06,800
will impress your friends and get you a


433
00:12:06,800 --> 00:12:08,720
job and land you customers by standing


434
00:12:08,720 --> 00:12:10,240
out from the competition i'm going to go


435
00:12:10,240 --> 00:12:11,360
ahead and wrap things up there


436
00:12:11,360 --> 00:12:12,959
if this video helped you please like and


437
00:12:12,959 --> 00:12:14,880
subscribe and consider becoming a pro


438
00:12:14,880 --> 00:12:16,800
member at fireship io thanks for


439
00:12:16,800 --> 00:12:18,720
watching and i will see you in the next


440
00:12:18,720 --> 00:12:21,360
one


