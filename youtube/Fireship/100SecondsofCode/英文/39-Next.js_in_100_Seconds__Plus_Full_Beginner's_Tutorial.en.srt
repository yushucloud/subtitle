1
00:00:00,000 --> 00:00:00,480
[Music]


2
00:00:00,480 --> 00:00:02,960
next js create fast search engine


3
00:00:02,960 --> 00:00:04,640
optimize react apps with zero


4
00:00:04,640 --> 00:00:05,600
configuration


5
00:00:05,600 --> 00:00:07,440
a traditional react app is rendered


6
00:00:07,440 --> 00:00:09,120
client side where the browser starts


7
00:00:09,120 --> 00:00:11,040
with a shell of an html page


8
00:00:11,040 --> 00:00:13,040
lacking any rendered content from there


9
00:00:13,040 --> 00:00:14,719
the browser fetches the javascript file


10
00:00:14,719 --> 00:00:16,560
containing the react code to render


11
00:00:16,560 --> 00:00:17,600
content to the page


12
00:00:17,600 --> 00:00:19,439
and make it interactive but there are


13
00:00:19,439 --> 00:00:21,199
two major drawbacks with client-side


14
00:00:21,199 --> 00:00:22,000
rendering


15
00:00:22,000 --> 00:00:24,160
one the content is not reliably indexed


16
00:00:24,160 --> 00:00:25,279
by all search engines


17
00:00:25,279 --> 00:00:27,439
or read by social media link bots and


18
00:00:27,439 --> 00:00:29,279
two it can take longer to reach the


19
00:00:29,279 --> 00:00:31,359
first contentful paint when a user first


20
00:00:31,359 --> 00:00:32,719
lands on the web page


21
00:00:32,719 --> 00:00:34,480
next is a framework that allows you to


22
00:00:34,480 --> 00:00:36,800
build a react app but render the content


23
00:00:36,800 --> 00:00:38,079
in advance on the server


24
00:00:38,079 --> 00:00:40,239
so the first thing a user or search bot


25
00:00:40,239 --> 00:00:42,480
sees is the fully rendered html


26
00:00:42,480 --> 00:00:44,079
after receiving this initial page


27
00:00:44,079 --> 00:00:45,680
client-side rendering takes over


28
00:00:45,680 --> 00:00:47,280
and it works just like a traditional


29
00:00:47,280 --> 00:00:49,440
react app it's the best of both worlds


30
00:00:49,440 --> 00:00:51,440
fully rendered content for bots highly


31
00:00:51,440 --> 00:00:53,120
interactive content for users


32
00:00:53,120 --> 00:00:54,800
inside of a next project you have a


33
00:00:54,800 --> 00:00:56,800
pages directory each javascript file


34
00:00:56,800 --> 00:00:57,520
defined here


35
00:00:57,520 --> 00:00:59,359
exports a react component that


36
00:00:59,359 --> 00:01:01,520
represents a route in the application


37
00:01:01,520 --> 00:01:03,680
in other words the file structure here


38
00:01:03,680 --> 00:01:05,600
mirrors the actual urls that the user


39
00:01:05,600 --> 00:01:06,560
will navigate to


40
00:01:06,560 --> 00:01:08,320
and next provides its own router to make


41
00:01:08,320 --> 00:01:09,680
navigation seamless


42
00:01:09,680 --> 00:01:11,360
but the real magic comes into play when


43
00:01:11,360 --> 00:01:12,880
we talk about data fetching


44
00:01:12,880 --> 00:01:14,799
because next can perform multiple server


45
00:01:14,799 --> 00:01:16,560
rendering strategies from a single


46
00:01:16,560 --> 00:01:17,280
project


47
00:01:17,280 --> 00:01:19,520
static generation or pre-rendering


48
00:01:19,520 --> 00:01:21,280
allows you to render your pages


49
00:01:21,280 --> 00:01:23,680
at build time each page or component can


50
00:01:23,680 --> 00:01:25,119
implement a function called


51
00:01:25,119 --> 00:01:27,119
get static props it might fetch data


52
00:01:27,119 --> 00:01:29,040
from a cloud database then pass the data


53
00:01:29,040 --> 00:01:30,560
as props to the component


54
00:01:30,560 --> 00:01:32,159
you can then build your app to render


55
00:01:32,159 --> 00:01:33,759
out all the html locally


56
00:01:33,759 --> 00:01:35,600
and upload it to a storage bucket where


57
00:01:35,600 --> 00:01:37,840
it can be easily cached by a cdn


58
00:01:37,840 --> 00:01:39,680
that works great for a blog or any kind


59
00:01:39,680 --> 00:01:41,200
of app where the data doesn't change


60
00:01:41,200 --> 00:01:41,680
often


61
00:01:41,680 --> 00:01:43,439
but if the data does change often you


62
00:01:43,439 --> 00:01:45,280
can implement server side rendering


63
00:01:45,280 --> 00:01:46,960
which builds the html page


64
00:01:46,960 --> 00:01:49,200
each time it's requested by the user in


65
00:01:49,200 --> 00:01:51,200
the component we implement data fetching


66
00:01:51,200 --> 00:01:53,360
with the get server side props function


67
00:01:53,360 --> 00:01:55,040
instead of running at build time this


68
00:01:55,040 --> 00:01:56,880
function runs at request time


69
00:01:56,880 --> 00:01:58,240
that means the page will fetch the


70
00:01:58,240 --> 00:02:00,320
latest data on the server each time a


71
00:02:00,320 --> 00:02:01,600
new request comes in


72
00:02:01,600 --> 00:02:03,200
that's great for pages with rapidly


73
00:02:03,200 --> 00:02:05,040
changing data but maybe you want


74
00:02:05,040 --> 00:02:07,200
something in between yet another option


75
00:02:07,200 --> 00:02:09,759
is incremental static regeneration by


76
00:02:09,759 --> 00:02:12,239
simply adding a revalidate option to get


77
00:02:12,239 --> 00:02:13,280
static props


78
00:02:13,280 --> 00:02:15,200
next can regenerate a page whenever a


79
00:02:15,200 --> 00:02:16,400
new request comes in


80
00:02:16,400 --> 00:02:18,400
within a certain time interval this has


81
00:02:18,400 --> 00:02:20,560
been next js in 100 seconds


82
00:02:20,560 --> 00:02:21,840
if you want to see more short videos


83
00:02:21,840 --> 00:02:23,920
like this make sure to subscribe and hit


84
00:02:23,920 --> 00:02:24,800
the like button


85
00:02:24,800 --> 00:02:26,800
then open up the s code and get ready to


86
00:02:26,800 --> 00:02:28,640
go beyond 100 seconds with a full


87
00:02:28,640 --> 00:02:29,760
breakdown of next


88
00:02:29,760 --> 00:02:31,360
before we get going i'd like to point


89
00:02:31,360 --> 00:02:33,200
out that i'm working on a full react


90
00:02:33,200 --> 00:02:35,360
next firebase course which i hope to


91
00:02:35,360 --> 00:02:36,959
have finally finished by the end of


92
00:02:36,959 --> 00:02:37,599
january


93
00:02:37,599 --> 00:02:39,440
which will be available to fireship pro


94
00:02:39,440 --> 00:02:41,200
members my goal over the next few


95
00:02:41,200 --> 00:02:41,680
minutes


96
00:02:41,680 --> 00:02:43,840
is to teach you the fundamentals of next


97
00:02:43,840 --> 00:02:45,840
while also explaining the complexities


98
00:02:45,840 --> 00:02:47,120
of server-side rendering


99
00:02:47,120 --> 00:02:49,440
to follow along open up the terminal and


100
00:02:49,440 --> 00:02:50,560
run npx


101
00:02:50,560 --> 00:02:52,640
create next app followed by the name of


102
00:02:52,640 --> 00:02:54,319
your app and if you get lost at any


103
00:02:54,319 --> 00:02:54,720
point


104
00:02:54,720 --> 00:02:56,480
make sure to grab the source code on


105
00:02:56,480 --> 00:02:58,319
github or fireship io


106
00:02:58,319 --> 00:03:00,560
let's open up the project in vs code and


107
00:03:00,560 --> 00:03:02,879
then go into the package.json file


108
00:03:02,879 --> 00:03:04,720
in development the only script we need


109
00:03:04,720 --> 00:03:06,239
to worry about is dev


110
00:03:06,239 --> 00:03:08,959
which you can execute by running npm run


111
00:03:08,959 --> 00:03:09,360
dev


112
00:03:09,360 --> 00:03:11,120
from the command line which will run our


113
00:03:11,120 --> 00:03:13,040
app on localhost 3000


114
00:03:13,040 --> 00:03:14,159
that should give you the default


115
00:03:14,159 --> 00:03:16,159
boilerplate in the browser now before we


116
00:03:16,159 --> 00:03:17,280
get into the react code


117
00:03:17,280 --> 00:03:18,560
there's a few things that i want to


118
00:03:18,560 --> 00:03:20,720
point out first in the styles directory


119
00:03:20,720 --> 00:03:23,200
here you'll notice how next supports css


120
00:03:23,200 --> 00:03:24,080
modules


121
00:03:24,080 --> 00:03:25,760
in the globals file you can define


122
00:03:25,760 --> 00:03:27,280
styles that apply to the entire


123
00:03:27,280 --> 00:03:28,239
application


124
00:03:28,239 --> 00:03:30,560
but in other files with dot module you


125
00:03:30,560 --> 00:03:32,879
can define classes that only apply to a


126
00:03:32,879 --> 00:03:34,879
specific route or component


127
00:03:34,879 --> 00:03:36,239
and you don't have to worry about coming


128
00:03:36,239 --> 00:03:38,080
up with a bunch of unique class names or


129
00:03:38,080 --> 00:03:39,920
naming conventions when managing your


130
00:03:39,920 --> 00:03:40,640
styles


131
00:03:40,640 --> 00:03:42,319
if you want to use styles from a certain


132
00:03:42,319 --> 00:03:44,560
module you just import the style sheet


133
00:03:44,560 --> 00:03:45,760
in your javascript


134
00:03:45,760 --> 00:03:48,080
then reference your styles in jsx as if


135
00:03:48,080 --> 00:03:50,080
the styles were a javascript object


136
00:03:50,080 --> 00:03:51,840
that's pretty awesome but from there


137
00:03:51,840 --> 00:03:53,360
let's shift our attention over to the


138
00:03:53,360 --> 00:03:54,480
pages directory


139
00:03:54,480 --> 00:03:56,480
inside this directory we define all the


140
00:03:56,480 --> 00:03:59,040
pages and routes for the application


141
00:03:59,040 --> 00:04:00,640
at the highest level we have this


142
00:04:00,640 --> 00:04:02,959
underscore app.js file which is like the


143
00:04:02,959 --> 00:04:04,799
main entry point into the app


144
00:04:04,799 --> 00:04:06,720
in other words every individual page


145
00:04:06,720 --> 00:04:08,239
will start from this template


146
00:04:08,239 --> 00:04:10,159
currently the application only has one


147
00:04:10,159 --> 00:04:12,319
page which points to the root url


148
00:04:12,319 --> 00:04:14,319
and is defined by the component in the


149
00:04:14,319 --> 00:04:15,680
index.js file


150
00:04:15,680 --> 00:04:18,079
when a user navigates to this url next


151
00:04:18,079 --> 00:04:20,239
will find the default export which is a


152
00:04:20,239 --> 00:04:21,280
react component


153
00:04:21,280 --> 00:04:24,000
in this file so every file or page in


154
00:04:24,000 --> 00:04:24,880
your application


155
00:04:24,880 --> 00:04:27,280
needs to have one default export to


156
00:04:27,280 --> 00:04:28,479
demonstrate this further


157
00:04:28,479 --> 00:04:30,000
let's create our first route in the


158
00:04:30,000 --> 00:04:32,320
pages directory create a new file called


159
00:04:32,320 --> 00:04:33,520
hello.js


160
00:04:33,520 --> 00:04:35,199
then we can define the content of this


161
00:04:35,199 --> 00:04:37,600
page by exporting a default react


162
00:04:37,600 --> 00:04:38,720
component from it


163
00:04:38,720 --> 00:04:40,720
from there we can go back to the browser


164
00:04:40,720 --> 00:04:43,040
and navigate to localhost 3000


165
00:04:43,040 --> 00:04:44,800
slash hello and we should get the


166
00:04:44,800 --> 00:04:46,160
content of that component


167
00:04:46,160 --> 00:04:47,759
congratulations you just built your


168
00:04:47,759 --> 00:04:49,360
first web page with next


169
00:04:49,360 --> 00:04:50,960
but now let's imagine a route that's a


170
00:04:50,960 --> 00:04:53,040
little more complex we have a cars route


171
00:04:53,040 --> 00:04:54,800
that should show a list of cars


172
00:04:54,800 --> 00:04:56,479
then an infinite number of cars that


173
00:04:56,479 --> 00:04:58,080
might be dynamically generated


174
00:04:58,080 --> 00:05:00,000
under that url we can implement a


175
00:05:00,000 --> 00:05:01,199
dynamic route like that


176
00:05:01,199 --> 00:05:04,160
by first creating a cars directory then


177
00:05:04,160 --> 00:05:05,759
inside the directory we'll add an


178
00:05:05,759 --> 00:05:07,039
index.js file


179
00:05:07,039 --> 00:05:09,280
which will show the main list of cars


180
00:05:09,280 --> 00:05:11,120
then for each individual car


181
00:05:11,120 --> 00:05:13,280
we'll add a component that has a file


182
00:05:13,280 --> 00:05:14,800
name of brackets


183
00:05:14,800 --> 00:05:18,160
paramname dot js the brackets make this


184
00:05:18,160 --> 00:05:19,199
route dynamic


185
00:05:19,199 --> 00:05:21,680
which means anytime a user navigates to


186
00:05:21,680 --> 00:05:22,240
cars


187
00:05:22,240 --> 00:05:25,680
slash whatever or cars slash tesla


188
00:05:25,680 --> 00:05:27,120
it will render the component in this


189
00:05:27,120 --> 00:05:28,960
file to see that in action


190
00:05:28,960 --> 00:05:30,080
let's go ahead and implement the


191
00:05:30,080 --> 00:05:32,400
component logic in the index file we'll


192
00:05:32,400 --> 00:05:34,160
just add a placeholder for the car's


193
00:05:34,160 --> 00:05:35,280
list for now


194
00:05:35,280 --> 00:05:37,199
but in the dynamic component we'll


195
00:05:37,199 --> 00:05:39,199
import the use router hook from the next


196
00:05:39,199 --> 00:05:39,680
router


197
00:05:39,680 --> 00:05:41,360
it allows us to access the query


198
00:05:41,360 --> 00:05:42,960
parameters from the url


199
00:05:42,960 --> 00:05:45,039
in this example the value is id but you


200
00:05:45,039 --> 00:05:46,880
can give it a name of whatever you want


201
00:05:46,880 --> 00:05:48,400
and then we'll render that value out to


202
00:05:48,400 --> 00:05:50,479
the template now back in the browser


203
00:05:50,479 --> 00:05:52,720
if we go to the car's url it renders out


204
00:05:52,720 --> 00:05:53,759
the car's component


205
00:05:53,759 --> 00:05:55,280
then if we add any string after the


206
00:05:55,280 --> 00:05:57,440
car's url it renders out the dynamic


207
00:05:57,440 --> 00:05:58,240
component


208
00:05:58,240 --> 00:05:59,520
now one other thing you may have noticed


209
00:05:59,520 --> 00:06:01,680
in the pages directory is this api


210
00:06:01,680 --> 00:06:02,400
directory


211
00:06:02,400 --> 00:06:04,400
so what is that all about the api


212
00:06:04,400 --> 00:06:06,400
directory is a special part of next


213
00:06:06,400 --> 00:06:08,560
for setting up routes that will only


214
00:06:08,560 --> 00:06:09,680
apply to the server


215
00:06:09,680 --> 00:06:11,360
that can be useful because the code you


216
00:06:11,360 --> 00:06:12,800
write here won't increase the


217
00:06:12,800 --> 00:06:14,639
client-side javascript bundle that needs


218
00:06:14,639 --> 00:06:16,639
to ultimately be sent over the network


219
00:06:16,639 --> 00:06:18,080
we're not going to get into api routes


220
00:06:18,080 --> 00:06:19,919
in this video but just know that it's a


221
00:06:19,919 --> 00:06:21,600
useful feature when you have work that


222
00:06:21,600 --> 00:06:23,039
needs to be done on the back end


223
00:06:23,039 --> 00:06:25,360
or if you simply want to expose an api


224
00:06:25,360 --> 00:06:26,639
for your end users


225
00:06:26,639 --> 00:06:28,560
but now let's shift our attention over


226
00:06:28,560 --> 00:06:30,560
to the most valuable feature in next


227
00:06:30,560 --> 00:06:32,800
which of course is data fetching next


228
00:06:32,800 --> 00:06:34,240
allows us to fetch data


229
00:06:34,240 --> 00:06:37,039
and render html on the server and again


230
00:06:37,039 --> 00:06:38,160
the benefit of doing that


231
00:06:38,160 --> 00:06:39,919
is that the end user gets rendered


232
00:06:39,919 --> 00:06:42,160
content quicker and the content can be


233
00:06:42,160 --> 00:06:44,319
reliably crawled by search bots and


234
00:06:44,319 --> 00:06:45,840
social media link bots


235
00:06:45,840 --> 00:06:47,520
now when it comes to server rendering


236
00:06:47,520 --> 00:06:49,120
there are two main options


237
00:06:49,120 --> 00:06:51,280
static generation and server side


238
00:06:51,280 --> 00:06:52,160
rendering


239
00:06:52,160 --> 00:06:53,840
static generation is also called


240
00:06:53,840 --> 00:06:55,919
pre-rendering because you generate all


241
00:06:55,919 --> 00:06:56,880
the html


242
00:06:56,880 --> 00:06:59,199
at build time it makes life very simple


243
00:06:59,199 --> 00:07:01,039
because you generate a bunch of html


244
00:07:01,039 --> 00:07:01,599
files


245
00:07:01,599 --> 00:07:03,759
then upload them to a storage bucket or


246
00:07:03,759 --> 00:07:04,639
static host


247
00:07:04,639 --> 00:07:06,160
and they can be delivered with very high


248
00:07:06,160 --> 00:07:08,240
performance over a cdn


249
00:07:08,240 --> 00:07:09,680
but there's a couple of big trade-offs


250
00:07:09,680 --> 00:07:11,840
here the first one is that your data may


251
00:07:11,840 --> 00:07:12,880
become stale


252
00:07:12,880 --> 00:07:14,720
if the data on the server changes you


253
00:07:14,720 --> 00:07:16,960
need to rebuild and redeploy your site


254
00:07:16,960 --> 00:07:18,319
in order for those changes to be


255
00:07:18,319 --> 00:07:19,199
reflected


256
00:07:19,199 --> 00:07:20,479
another important trait i have to think


257
00:07:20,479 --> 00:07:22,400
about is scale if your website has a


258
00:07:22,400 --> 00:07:24,240
million pages it'll be very slow and


259
00:07:24,240 --> 00:07:26,160
difficult to pre-render all of them


260
00:07:26,160 --> 00:07:27,680
that makes static generation most


261
00:07:27,680 --> 00:07:29,599
well-suited for data that doesn't change


262
00:07:29,599 --> 00:07:30,000
often


263
00:07:30,000 --> 00:07:32,000
and for sites that have a relatively low


264
00:07:32,000 --> 00:07:33,280
number of total pages


265
00:07:33,280 --> 00:07:35,360
a good example would be a blog because


266
00:07:35,360 --> 00:07:36,800
it might have a few hundred pages and


267
00:07:36,800 --> 00:07:38,400
those pages likely don't change on a


268
00:07:38,400 --> 00:07:39,440
daily basis


269
00:07:39,440 --> 00:07:40,720
let's go ahead and take a look at how we


270
00:07:40,720 --> 00:07:42,479
might implement static generation in


271
00:07:42,479 --> 00:07:43,199
next


272
00:07:43,199 --> 00:07:44,960
in the car component let's imagine we


273
00:07:44,960 --> 00:07:46,720
need to fetch data from an external


274
00:07:46,720 --> 00:07:47,360
source


275
00:07:47,360 --> 00:07:50,240
like a database or api to simulate that


276
00:07:50,240 --> 00:07:52,400
for the demo i've added a couple of json


277
00:07:52,400 --> 00:07:54,319
files to the public directory


278
00:07:54,319 --> 00:07:56,000
we have a file that returns an array of


279
00:07:56,000 --> 00:07:58,080
ids then an individual response


280
00:07:58,080 --> 00:08:00,639
for each car which contains an image and


281
00:08:00,639 --> 00:08:02,319
other data about the car


282
00:08:02,319 --> 00:08:03,919
now we can fetch this data for the car


283
00:08:03,919 --> 00:08:05,840
component by implementing


284
00:08:05,840 --> 00:08:08,319
the get static props function inside the


285
00:08:08,319 --> 00:08:09,520
component file


286
00:08:09,520 --> 00:08:11,280
when you build your site next will


287
00:08:11,280 --> 00:08:12,879
automatically call this function


288
00:08:12,879 --> 00:08:14,960
then send the result as props to the


289
00:08:14,960 --> 00:08:16,080
component itself


290
00:08:16,080 --> 00:08:17,680
what we want to do here is fetch the


291
00:08:17,680 --> 00:08:19,599
json for an individual car


292
00:08:19,599 --> 00:08:22,400
so it can be used in the html or ui for


293
00:08:22,400 --> 00:08:23,520
the cart page


294
00:08:23,520 --> 00:08:25,919
in this case we need the id from the url


295
00:08:25,919 --> 00:08:27,919
to know which car was requested


296
00:08:27,919 --> 00:08:29,520
we can get that information from the


297
00:08:29,520 --> 00:08:31,360
params argument and the function


298
00:08:31,360 --> 00:08:33,599
then from there we'll use the fetch api


299
00:08:33,599 --> 00:08:35,440
to make a request to localhost


300
00:08:35,440 --> 00:08:38,479
to request the json file with that id


301
00:08:38,479 --> 00:08:40,560
we can then convert it to json then the


302
00:08:40,560 --> 00:08:42,800
final step is to return an object


303
00:08:42,800 --> 00:08:45,120
that has a props property where each


304
00:08:45,120 --> 00:08:46,880
prop can then be accessed by the


305
00:08:46,880 --> 00:08:47,600
component


306
00:08:47,600 --> 00:08:48,959
up in the component code we can


307
00:08:48,959 --> 00:08:51,279
destructure the car prop and then use it


308
00:08:51,279 --> 00:08:52,480
in the jsx


309
00:08:52,480 --> 00:08:54,399
which i'm doing here by adding an image


310
00:08:54,399 --> 00:08:56,399
tag which relies on the data fetched by


311
00:08:56,399 --> 00:08:58,399
the server as the image source


312
00:08:58,399 --> 00:08:59,600
now if you're concerned about search


313
00:08:59,600 --> 00:09:01,839
engine optimization you likely want to


314
00:09:01,839 --> 00:09:02,320
add an


315
00:09:02,320 --> 00:09:04,800
seo friendly title as well as meta tags


316
00:09:04,800 --> 00:09:06,480
to the head of the document


317
00:09:06,480 --> 00:09:08,480
next makes that very easy to accomplish


318
00:09:08,480 --> 00:09:10,640
by simply importing the head component


319
00:09:10,640 --> 00:09:12,320
anything inside this component will be


320
00:09:12,320 --> 00:09:14,080
rendered out to the head of the document


321
00:09:14,080 --> 00:09:15,920
like in this case we add a title with


322
00:09:15,920 --> 00:09:17,600
the car color and id


323
00:09:17,600 --> 00:09:19,440
and we could also add meta tags for


324
00:09:19,440 --> 00:09:21,279
twitter and facebook cards if we wanted


325
00:09:21,279 --> 00:09:22,560
to


326
00:09:22,560 --> 00:09:24,399
now because we're working with a dynamic


327
00:09:24,399 --> 00:09:25,920
route there's one other thing we have to


328
00:09:25,920 --> 00:09:26,640
keep in mind


329
00:09:26,640 --> 00:09:28,720
and that's the fact that next has no way


330
00:09:28,720 --> 00:09:30,399
of knowing how many pages we actually


331
00:09:30,399 --> 00:09:31,519
have associated


332
00:09:31,519 --> 00:09:33,680
to a dynamic route in order to


333
00:09:33,680 --> 00:09:35,600
pre-render all the car ids


334
00:09:35,600 --> 00:09:38,320
next needs to know those ids in advance


335
00:09:38,320 --> 00:09:40,240
and the way we provide that information


336
00:09:40,240 --> 00:09:42,880
is by implementing the get static paths


337
00:09:42,880 --> 00:09:43,760
function


338
00:09:43,760 --> 00:09:46,080
this function can also request data from


339
00:09:46,080 --> 00:09:46,800
an api


340
00:09:46,800 --> 00:09:49,839
or database then its job is to return a


341
00:09:49,839 --> 00:09:50,959
paths object


342
00:09:50,959 --> 00:09:53,200
that contains an array with every route


343
00:09:53,200 --> 00:09:55,200
for this dynamic url


344
00:09:55,200 --> 00:09:57,440
in this demo we only have three routes


345
00:09:57,440 --> 00:09:59,200
tesla forward and lambo


346
00:09:59,200 --> 00:10:00,880
we map those values to an array of


347
00:10:00,880 --> 00:10:02,800
objects then return them from the


348
00:10:02,800 --> 00:10:03,519
function


349
00:10:03,519 --> 00:10:05,440
along with additional options like the


350
00:10:05,440 --> 00:10:06,880
fallback behavior


351
00:10:06,880 --> 00:10:08,079
now if we go visit the app in the


352
00:10:08,079 --> 00:10:09,920
browser we should see a fully rendered


353
00:10:09,920 --> 00:10:10,800
web page


354
00:10:10,800 --> 00:10:12,160
it doesn't look any different than a


355
00:10:12,160 --> 00:10:14,160
regular react app however


356
00:10:14,160 --> 00:10:15,839
if you open up the sources panel in


357
00:10:15,839 --> 00:10:17,600
chrome dev tools it'll show you the


358
00:10:17,600 --> 00:10:18,959
fully rendered html


359
00:10:18,959 --> 00:10:20,959
before it was touched by javascript


360
00:10:20,959 --> 00:10:22,480
notice how it contains the title


361
00:10:22,480 --> 00:10:24,160
and pre-rendered content which is


362
00:10:24,160 --> 00:10:25,600
essential for seo


363
00:10:25,600 --> 00:10:27,519
and sharing content on social media


364
00:10:27,519 --> 00:10:29,600
sites so that's how you implement server


365
00:10:29,600 --> 00:10:30,800
side generation


366
00:10:30,800 --> 00:10:33,040
but another big strategy is server side


367
00:10:33,040 --> 00:10:33,920
rendering


368
00:10:33,920 --> 00:10:36,320
the big difference is that with ssr the


369
00:10:36,320 --> 00:10:38,240
content is generated on a server


370
00:10:38,240 --> 00:10:40,560
when requested by the user this approach


371
00:10:40,560 --> 00:10:42,800
is ideal when data changes constantly


372
00:10:42,800 --> 00:10:44,480
because it ensures the end user will


373
00:10:44,480 --> 00:10:46,160
always get the latest and greatest data


374
00:10:46,160 --> 00:10:47,760
from whatever your data source happens


375
00:10:47,760 --> 00:10:48,399
to be


376
00:10:48,399 --> 00:10:50,399
however it's far less efficient because


377
00:10:50,399 --> 00:10:52,160
you need to have a server in place to


378
00:10:52,160 --> 00:10:53,600
respond to those requests


379
00:10:53,600 --> 00:10:55,519
as opposed to caching everything on a


380
00:10:55,519 --> 00:10:56,720
global cdn


381
00:10:56,720 --> 00:10:58,480
imagine something like an ebay auction


382
00:10:58,480 --> 00:11:00,000
where you have millions of listings


383
00:11:00,000 --> 00:11:01,760
and those listings are changing all the


384
00:11:01,760 --> 00:11:03,760
time that's probably a good candidate


385
00:11:03,760 --> 00:11:04,079
for


386
00:11:04,079 --> 00:11:06,640
ssr in any case it's very easy to


387
00:11:06,640 --> 00:11:07,760
implement it next


388
00:11:07,760 --> 00:11:09,519
back in our page file we'll go ahead and


389
00:11:09,519 --> 00:11:11,279
implement another function


390
00:11:11,279 --> 00:11:13,600
called get server side props the only


391
00:11:13,600 --> 00:11:15,279
thing that actually changes in our code


392
00:11:15,279 --> 00:11:16,640
is the name of the function


393
00:11:16,640 --> 00:11:18,800
we can simply copy the body of the git


394
00:11:18,800 --> 00:11:20,160
static props function


395
00:11:20,160 --> 00:11:22,399
and paste it into our new function it


396
00:11:22,399 --> 00:11:23,839
does the exact same thing


397
00:11:23,839 --> 00:11:25,920
but does it on every request instead of


398
00:11:25,920 --> 00:11:26,880
it build time


399
00:11:26,880 --> 00:11:29,120
then we can comment out get static props


400
00:11:29,120 --> 00:11:30,800
and get static paths because we no


401
00:11:30,800 --> 00:11:32,720
longer need those functions


402
00:11:32,720 --> 00:11:34,399
but the real beauty of next is that we


403
00:11:34,399 --> 00:11:35,920
can apply both of these paradigms


404
00:11:35,920 --> 00:11:38,000
wherever we want in the application


405
00:11:38,000 --> 00:11:40,160
we're not limited to one or the other


406
00:11:40,160 --> 00:11:41,360
i'm going to go ahead and wrap things up


407
00:11:41,360 --> 00:11:42,800
there if there's anything you want to


408
00:11:42,800 --> 00:11:44,240
see in my full next course


409
00:11:44,240 --> 00:11:46,240
make sure to let me know in the comments


410
00:11:46,240 --> 00:11:48,079
thanks for watching and i will see you


411
00:11:48,079 --> 00:11:53,760
in the next one


