1
00:00:00,320 --> 00:00:02,560
prisma an open source tool that makes it


2
00:00:02,560 --> 00:00:04,799
fun and safe to work with your database


3
00:00:04,799 --> 00:00:06,560
the relational database is ancient


4
00:00:06,560 --> 00:00:08,320
technology that has stood the test of


5
00:00:08,320 --> 00:00:10,719
time but writing sql code is not an


6
00:00:10,719 --> 00:00:12,639
ideal abstraction for modern app


7
00:00:12,639 --> 00:00:14,320
development it provides too much low


8
00:00:14,320 --> 00:00:15,920
level control and you'll probably blow


9
00:00:15,920 --> 00:00:17,520
your foot off writing it to address this


10
00:00:17,520 --> 00:00:20,000
concern orms like sqlize implement


11
00:00:20,000 --> 00:00:22,000
object relational mapping to express


12
00:00:22,000 --> 00:00:24,160
data with object oriented code like


13
00:00:24,160 --> 00:00:26,960
javascript classes prisma is also an orm


14
00:00:26,960 --> 00:00:28,880
that addresses similar problems but


15
00:00:28,880 --> 00:00:30,880
instead it has its own declarative


16
00:00:30,880 --> 00:00:32,800
schema definition language you write a


17
00:00:32,800 --> 00:00:34,559
schema to express your data and


18
00:00:34,559 --> 00:00:36,640
relationships in a human readable way or


19
00:00:36,640 --> 00:00:38,559
the schema can be automatically inferred


20
00:00:38,559 --> 00:00:40,559
from any existing database prisma then


21
00:00:40,559 --> 00:00:42,000
converts the schema into type


22
00:00:42,000 --> 00:00:43,680
definitions allowing you to perform


23
00:00:43,680 --> 00:00:45,520
typesafe crud operations with your own


24
00:00:45,520 --> 00:00:47,520
database models which means you get ide


25
00:00:47,520 --> 00:00:49,280
autocompletion tailored to your own


26
00:00:49,280 --> 00:00:51,199
custom schema in addition it handles


27
00:00:51,199 --> 00:00:53,039
migrations as your data structure


28
00:00:53,039 --> 00:00:54,719
evolves and if you want to visualize


29
00:00:54,719 --> 00:00:56,719
your data prisma studio allows you to


30
00:00:56,719 --> 00:00:58,480
view and manage all of your tables and


31
00:00:58,480 --> 00:01:00,480
rows in the browser to get started


32
00:01:00,480 --> 00:01:02,079
you'll need a relational database like


33
00:01:02,079 --> 00:01:04,799
mysql or postgres although mongodb is


34
00:01:04,799 --> 00:01:07,200
supported as well from a nodejs project


35
00:01:07,200 --> 00:01:10,400
run npx prisma init this creates a env


36
00:01:10,400 --> 00:01:12,479
file where you can add your database url


37
00:01:12,479 --> 00:01:14,320
and a prisma directory to define the


38
00:01:14,320 --> 00:01:16,320
schema if the existing database already


39
00:01:16,320 --> 00:01:19,119
has data we can run prismadb pool to


40
00:01:19,119 --> 00:01:21,119
introspect it and automatically generate


41
00:01:21,119 --> 00:01:23,200
the schema from it notice how each table


42
00:01:23,200 --> 00:01:24,880
is represented with the model keyword


43
00:01:24,880 --> 00:01:26,640
then inside the braces we have column


44
00:01:26,640 --> 00:01:28,880
names and their data types as well as


45
00:01:28,880 --> 00:01:31,119
optional constraints like for example we


46
00:01:31,119 --> 00:01:33,280
might use relation to create a foreign


47
00:01:33,280 --> 00:01:35,280
key constraint between a weapon and a


48
00:01:35,280 --> 00:01:37,119
human and we can also index the weapon


49
00:01:37,119 --> 00:01:38,880
id while we're at it the beauty of this


50
00:01:38,880 --> 00:01:40,400
is that the code is significantly more


51
00:01:40,400 --> 00:01:41,759
concise than what you would write


52
00:01:41,759 --> 00:01:44,320
otherwise in raw sql now if we decide to


53
00:01:44,320 --> 00:01:46,159
modify our schema like add an extra


54
00:01:46,159 --> 00:01:47,920
timestamp column we'll also need to


55
00:01:47,920 --> 00:01:49,600
modify the database structure which can


56
00:01:49,600 --> 00:01:51,520
be handled automatically with the prisma


57
00:01:51,520 --> 00:01:53,520
migrate command now to interact with the


58
00:01:53,520 --> 00:01:55,600
database on the server we tell prisma to


59
00:01:55,600 --> 00:01:57,360
generate the client library import the


60
00:01:57,360 --> 00:01:59,360
client into a javascript file and notice


61
00:01:59,360 --> 00:02:00,880
how it auto-completes the models in the


62
00:02:00,880 --> 00:02:02,719
schema if you do something wrong you'll


63
00:02:02,719 --> 00:02:04,479
know about it right away now find all


64
00:02:04,479 --> 00:02:06,719
the humans with the find menu method to


65
00:02:06,719 --> 00:02:08,319
filter the results we can add a where


66
00:02:08,319 --> 00:02:10,479
clause as a plain javascript object and


67
00:02:10,479 --> 00:02:12,319
if we want to join a related table we


68
00:02:12,319 --> 00:02:14,319
can do that by adding the include object


69
00:02:14,319 --> 00:02:15,599
prisma already knows how to run the


70
00:02:15,599 --> 00:02:17,599
complicated sql code under the hood and


71
00:02:17,599 --> 00:02:19,040
returns the data as an array of


72
00:02:19,040 --> 00:02:21,040
javascript objects ready to use in your


73
00:02:21,040 --> 00:02:23,360
application this has been prisma in 100


74
00:02:23,360 --> 00:02:24,879
seconds if you want to see more short


75
00:02:24,879 --> 00:02:26,640
videos like this hit the like button and


76
00:02:26,640 --> 00:02:28,080
subscribe and let me know if you want to


77
00:02:28,080 --> 00:02:29,680
see a full prisma tutorial in the


78
00:02:29,680 --> 00:02:31,599
comments thanks for watching and i will


79
00:02:31,599 --> 00:02:35,120
see you in the next one


