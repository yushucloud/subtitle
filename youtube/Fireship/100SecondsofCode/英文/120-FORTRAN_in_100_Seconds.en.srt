1
00:00:00,000 --> 00:00:02,000
fortran a compiled imperative


2
00:00:02,000 --> 00:00:03,919
programming language famous as the first


3
00:00:03,919 --> 00:00:05,680
ever high-level language designed for


4
00:00:05,680 --> 00:00:07,919
humans it was developed in the 1950s at


5
00:00:07,919 --> 00:00:10,480
ibm by john bakkus a guy who was too


6
00:00:10,480 --> 00:00:13,200
lazy to write assembly for the ibm 704


7
00:00:13,200 --> 00:00:14,960
mainframe computer the haters said it


8
00:00:14,960 --> 00:00:16,160
would never be as performant as


9
00:00:16,160 --> 00:00:19,359
hand-coded programs but by 1957 formula


10
00:00:19,359 --> 00:00:21,119
translator became the first computer


11
00:00:21,119 --> 00:00:23,119
language standard at the time computers


12
00:00:23,119 --> 00:00:25,199
were extremely rare but fortran was a


13
00:00:25,199 --> 00:00:26,880
huge technical breakthrough because for


14
00:00:26,880 --> 00:00:28,560
the first time ever people outside the


15
00:00:28,560 --> 00:00:30,080
computer science realm could actually


16
00:00:30,080 --> 00:00:31,920
use a computer most importantly the


17
00:00:31,920 --> 00:00:33,360
language implemented the first


18
00:00:33,360 --> 00:00:35,280
optimizing compiler which was able to


19
00:00:35,280 --> 00:00:36,960
produce machine code just as fast as


20
00:00:36,960 --> 00:00:38,879
anything coded by hand the language has


21
00:00:38,879 --> 00:00:40,399
evolved into many different versions


22
00:00:40,399 --> 00:00:42,239
over the years and is still in use today


23
00:00:42,239 --> 00:00:43,840
primarily for heavy duty number


24
00:00:43,840 --> 00:00:45,760
crunching and scientific computing when


25
00:00:45,760 --> 00:00:47,280
your grandma wrote fortran back in the


26
00:00:47,280 --> 00:00:49,360
70s she didn't have access to fancy


27
00:00:49,360 --> 00:00:51,120
tools like editors and terminals and


28
00:00:51,120 --> 00:00:53,039
instead wrote her code on a punch card


29
00:00:53,039 --> 00:00:54,879
each card represents one line of code


30
00:00:54,879 --> 00:00:56,559
and is kept neatly in a stack where it


31
00:00:56,559 --> 00:00:58,480
can then be fed into a card reader to be


32
00:00:58,480 --> 00:01:00,320
compiled the modern developer can get


33
00:01:00,320 --> 00:01:01,760
started by installing the fortran


34
00:01:01,760 --> 00:01:04,400
compiler then create a file ending in f


35
00:01:04,400 --> 00:01:07,200
or f95 to specify a certain version like


36
00:01:07,200 --> 00:01:09,680
fortran 95 use the program keyword to


37
00:01:09,680 --> 00:01:11,600
give your app a name in older versions


38
00:01:11,600 --> 00:01:13,439
keywords used all caps because the shift


39
00:01:13,439 --> 00:01:15,119
key didn't exist on punch card machines


40
00:01:15,119 --> 00:01:17,520
until the 1970s declare variables by


41
00:01:17,520 --> 00:01:19,680
starting with a type followed by a name


42
00:01:19,680 --> 00:01:21,680
and optionally a default value any


43
00:01:21,680 --> 00:01:24,320
variable names that start with ijklmn


44
00:01:24,320 --> 00:01:25,759
will automatically be considered


45
00:01:25,759 --> 00:01:27,840
integers to disable this ancient feature


46
00:01:27,840 --> 00:01:29,680
use the implicit nun directive at the


47
00:01:29,680 --> 00:01:31,439
top use the character type to create a


48
00:01:31,439 --> 00:01:33,280
string by declaring it with a fixed


49
00:01:33,280 --> 00:01:35,119
maximum length now print that value to


50
00:01:35,119 --> 00:01:37,040
the standard output using the executable


51
00:01:37,040 --> 00:01:39,360
statement of print star in addition the


52
00:01:39,360 --> 00:01:41,280
dimension keyword can be used to create


53
00:01:41,280 --> 00:01:43,040
an array of numbers and multiple


54
00:01:43,040 --> 00:01:44,880
dimensions will create a matrix just be


55
00:01:44,880 --> 00:01:46,560
careful not to allocate too much memory


56
00:01:46,560 --> 00:01:48,240
because your apple ii only has four


57
00:01:48,240 --> 00:01:50,000
kilobytes of ram early versions of the


58
00:01:50,000 --> 00:01:51,680
language didn't perform fine-grained


59
00:01:51,680 --> 00:01:53,520
memory management but modern versions


60
00:01:53,520 --> 00:01:55,439
support pointers that can manually


61
00:01:55,439 --> 00:01:57,680
allocate and de-allocate memory but the


62
00:01:57,680 --> 00:01:59,200
real killer feature of fortran when it


63
00:01:59,200 --> 00:02:01,040
came out in the 50s is the ability to


64
00:02:01,040 --> 00:02:03,280
perform loops perform loose perform


65
00:02:03,280 --> 00:02:05,520
loose the do and do while loops made it


66
00:02:05,520 --> 00:02:07,520
relatively easy for anybody to tell a


67
00:02:07,520 --> 00:02:09,280
computer how to do something multiple


68
00:02:09,280 --> 00:02:11,520
times on top of that fortran also made


69
00:02:11,520 --> 00:02:13,680
code reusable with procedures a function


70
00:02:13,680 --> 00:02:15,680
procedure takes immutable arguments


71
00:02:15,680 --> 00:02:17,520
performs some kind of calculation then


72
00:02:17,520 --> 00:02:19,280
returns a value it can be called with


73
00:02:19,280 --> 00:02:20,879
its name elsewhere in the code a


74
00:02:20,879 --> 00:02:22,959
subroutine is another type of procedure


75
00:02:22,959 --> 00:02:24,800
which can take mutable arguments but


76
00:02:24,800 --> 00:02:27,040
does not provide a return value now use


77
00:02:27,040 --> 00:02:28,319
your favorite implementation of the


78
00:02:28,319 --> 00:02:30,160
compiler to convert your code into an


79
00:02:30,160 --> 00:02:32,480
executable binary this has been fortran


80
00:02:32,480 --> 00:02:34,160
and 100 seconds let me know if you want


81
00:02:34,160 --> 00:02:35,760
to see a full tutorial in the comments


82
00:02:35,760 --> 00:02:37,599
thanks for watching and i will see you


83
00:02:37,599 --> 00:02:40,800
in the next one


