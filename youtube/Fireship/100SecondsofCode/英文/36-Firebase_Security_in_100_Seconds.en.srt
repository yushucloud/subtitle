1
00:00:00,399 --> 00:00:02,159
firebase security when you build a


2
00:00:02,159 --> 00:00:03,919
firebase app you can perform user


3
00:00:03,919 --> 00:00:04,799
authentication


4
00:00:04,799 --> 00:00:06,640
and work with your database entirely


5
00:00:06,640 --> 00:00:07,919
from your front-end code


6
00:00:07,919 --> 00:00:10,000
but how is this possible if our database


7
00:00:10,000 --> 00:00:11,599
is exposed on the client wouldn't that


8
00:00:11,599 --> 00:00:13,280
mean that any hacker could then read or


9
00:00:13,280 --> 00:00:14,559
write private user data


10
00:00:14,559 --> 00:00:15,839
the answer is no because your


11
00:00:15,839 --> 00:00:17,440
infrastructure is protected by a


12
00:00:17,440 --> 00:00:19,279
mechanism known as firebase security


13
00:00:19,279 --> 00:00:21,039
rules which can be applied to real-time


14
00:00:21,039 --> 00:00:21,680
database


15
00:00:21,680 --> 00:00:23,760
cloud storage and firestore in a


16
00:00:23,760 --> 00:00:25,439
traditional web application you have a


17
00:00:25,439 --> 00:00:26,000
server


18
00:00:26,000 --> 00:00:27,840
on that server you implement security


19
00:00:27,840 --> 00:00:30,400
logic that uses either tokens or cookies


20
00:00:30,400 --> 00:00:32,480
to verify that a user making a request


21
00:00:32,480 --> 00:00:34,800
is authorized to do so firebase rules


22
00:00:34,800 --> 00:00:36,320
achieve the same thing but without the


23
00:00:36,320 --> 00:00:38,320
need to write maintain and deploy


24
00:00:38,320 --> 00:00:39,600
server-side code


25
00:00:39,600 --> 00:00:41,840
instead you create a policy to define


26
00:00:41,840 --> 00:00:43,120
who has access to what


27
00:00:43,120 --> 00:00:45,200
in your database using a very easy to


28
00:00:45,200 --> 00:00:47,039
learn language called common expression


29
00:00:47,039 --> 00:00:47,680
language


30
00:00:47,680 --> 00:00:49,600
whenever a user makes a request to read


31
00:00:49,600 --> 00:00:51,440
or write to your database that request


32
00:00:51,440 --> 00:00:52,879
is routed through this policy


33
00:00:52,879 --> 00:00:55,120
every operation is denied by default


34
00:00:55,120 --> 00:00:56,320
when a request comes in


35
00:00:56,320 --> 00:00:58,160
it will look for the first rule to allow


36
00:00:58,160 --> 00:01:00,079
it once allowed firebase can then


37
00:01:00,079 --> 00:01:02,079
securely read or write to your database


38
00:01:02,079 --> 00:01:03,440
you can write rules from the firebase


39
00:01:03,440 --> 00:01:05,760
console or your ide in the console


40
00:01:05,760 --> 00:01:07,600
you can time travel back to any previous


41
00:01:07,600 --> 00:01:09,439
rules you've used in the past or use the


42
00:01:09,439 --> 00:01:11,520
playground to send a mock request to


43
00:01:11,520 --> 00:01:12,320
your database


44
00:01:12,320 --> 00:01:14,000
and in production you can analyze


45
00:01:14,000 --> 00:01:15,439
exactly how your rules are being


46
00:01:15,439 --> 00:01:16,159
executed


47
00:01:16,159 --> 00:01:18,479
to enforce a rule we start by matching a


48
00:01:18,479 --> 00:01:19,680
path in the database


49
00:01:19,680 --> 00:01:21,119
which can be as broad as the entire


50
00:01:21,119 --> 00:01:23,200
database or as granular as a single


51
00:01:23,200 --> 00:01:24,000
document


52
00:01:24,000 --> 00:01:25,759
a single document can be matched with a


53
00:01:25,759 --> 00:01:28,080
collection followed by a document id


54
00:01:28,080 --> 00:01:29,920
if we want anybody to read and write to


55
00:01:29,920 --> 00:01:32,000
this document we can say allow read and


56
00:01:32,000 --> 00:01:32,640
write


57
00:01:32,640 --> 00:01:34,479
but that's not very secure let's make


58
00:01:34,479 --> 00:01:36,640
sure a user is logged into our app to


59
00:01:36,640 --> 00:01:37,600
view the document


60
00:01:37,600 --> 00:01:39,280
which we can do by writing conditional


61
00:01:39,280 --> 00:01:41,040
logic we allow the operation


62
00:01:41,040 --> 00:01:43,280
if the request auth object does not


63
00:01:43,280 --> 00:01:45,200
equal null when it comes to writes we


64
00:01:45,200 --> 00:01:45,759
can make sure


65
00:01:45,759 --> 00:01:47,520
only the user that owns the document can


66
00:01:47,520 --> 00:01:49,200
write to it by checking the request


67
00:01:49,200 --> 00:01:51,439
auth user id in most cases though you'll


68
00:01:51,439 --> 00:01:53,040
want your rules to apply to an entire


69
00:01:53,040 --> 00:01:53,840
collection


70
00:01:53,840 --> 00:01:55,840
if we wrap the document id in braces the


71
00:01:55,840 --> 00:01:57,759
rule now applies to any document in that


72
00:01:57,759 --> 00:01:59,439
collection and we can use the document


73
00:01:59,439 --> 00:01:59,920
id


74
00:01:59,920 --> 00:02:01,920
as a variable in our logic and now we


75
00:02:01,920 --> 00:02:04,079
have a firebase app that's 100 secure


76
00:02:04,079 --> 00:02:06,079
without any vulnerabilities whatsoever


77
00:02:06,079 --> 00:02:07,759
but there's a lot more to learn consider


78
00:02:07,759 --> 00:02:09,759
becoming a pro member at fireship io to


79
00:02:09,759 --> 00:02:11,680
get access to the new firebase security


80
00:02:11,680 --> 00:02:13,200
master course where you'll learn all


81
00:02:13,200 --> 00:02:14,640
kinds of advanced techniques for


82
00:02:14,640 --> 00:02:16,080
real-world applications


83
00:02:16,080 --> 00:02:17,920
thanks for watching and i will see you


84
00:02:17,920 --> 00:02:21,680
in the next one


