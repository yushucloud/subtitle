1
00:00:00,240 --> 00:00:02,159
assembly a low-level programming


2
00:00:02,159 --> 00:00:03,760
language designed to simplify the


3
00:00:03,760 --> 00:00:06,319
instructions fed into a computer's cpu


4
00:00:06,319 --> 00:00:08,000
in other words it's a human-readable


5
00:00:08,000 --> 00:00:10,000
abstraction on top of machine code so


6
00:00:10,000 --> 00:00:11,759
programmers don't have to manually count


7
00:00:11,759 --> 00:00:13,440
ones and zeroes the first assembly


8
00:00:13,440 --> 00:00:15,519
language was created by kathleen booth


9
00:00:15,519 --> 00:00:18,240
in 1947 for the all-purpose electronic


10
00:00:18,240 --> 00:00:20,320
computer over the next decade it evolved


11
00:00:20,320 --> 00:00:22,320
into many different formats to power the


12
00:00:22,320 --> 00:00:24,480
super computers of the day like the ibm


13
00:00:24,480 --> 00:00:26,800
7090 which had a 20 million dollar price


14
00:00:26,800 --> 00:00:28,880
tag in today's dollars writing code and


15
00:00:28,880 --> 00:00:30,320
assembly was standard until the


16
00:00:30,320 --> 00:00:32,160
emergence of high level languages like


17
00:00:32,160 --> 00:00:34,399
fortran a few years later however


18
00:00:34,399 --> 00:00:36,480
assembly is still used today for direct


19
00:00:36,480 --> 00:00:38,399
access to the bare metal hardware and to


20
00:00:38,399 --> 00:00:40,239
address low-level performance issues


21
00:00:40,239 --> 00:00:42,160
often on device drivers and embedded


22
00:00:42,160 --> 00:00:43,840
systems and it's also used to run native


23
00:00:43,840 --> 00:00:45,280
software in a web browser via


24
00:00:45,280 --> 00:00:47,280
webassembly what's tricky is that each


25
00:00:47,280 --> 00:00:49,120
assembly language only works on a


26
00:00:49,120 --> 00:00:51,600
specific cpu architecture like arm for


27
00:00:51,600 --> 00:00:54,239
apple silicon and raspberry pi or x86


28
00:00:54,239 --> 00:00:56,079
for intel chips to get started you'll


29
00:00:56,079 --> 00:00:57,680
first need an assembler like the net


30
00:00:57,680 --> 00:01:00,320
wide assembler for x86 chips an assembly


31
00:01:00,320 --> 00:01:02,559
program is divided into three sections


32
00:01:02,559 --> 00:01:04,159
the text section contains the actual


33
00:01:04,159 --> 00:01:06,159
logic for the program by convention it


34
00:01:06,159 --> 00:01:07,840
contains an entry point called start


35
00:01:07,840 --> 00:01:08,960
which is where the code will start


36
00:01:08,960 --> 00:01:10,720
executing next we have the block


37
00:01:10,720 --> 00:01:12,400
starting symbol section which contains


38
00:01:12,400 --> 00:01:13,760
variables that might change throughout


39
00:01:13,760 --> 00:01:15,759
the lifecycle of the app and finally the


40
00:01:15,759 --> 00:01:17,520
data section is where we can initialize


41
00:01:17,520 --> 00:01:19,600
constants or data that does not change


42
00:01:19,600 --> 00:01:21,360
to declare a constant like a string we


43
00:01:21,360 --> 00:01:23,360
start with a label then use db for


44
00:01:23,360 --> 00:01:25,200
defined byte to place the hello world


45
00:01:25,200 --> 00:01:27,200
string into memory by itself it doesn't


46
00:01:27,200 --> 00:01:28,720
do anything and to print it to the


47
00:01:28,720 --> 00:01:30,560
standard output we will also need it to


48
00:01:30,560 --> 00:01:32,400
length we can use equate to convert a


49
00:01:32,400 --> 00:01:34,400
symbol into a constant the dollar sign


50
00:01:34,400 --> 00:01:35,920
will subtract the current position from


51
00:01:35,920 --> 00:01:37,680
the hello label providing the length of


52
00:01:37,680 --> 00:01:39,119
the string and now these constants can


53
00:01:39,119 --> 00:01:40,640
be referenced from the start label in


54
00:01:40,640 --> 00:01:42,079
the main program each line of code


55
00:01:42,079 --> 00:01:43,920
contains an instruction along with one


56
00:01:43,920 --> 00:01:45,600
or more operands and there are hundreds


57
00:01:45,600 --> 00:01:47,439
of instructions built into the language


58
00:01:47,439 --> 00:01:49,280
now to perform operations quickly the


59
00:01:49,280 --> 00:01:51,520
cpu has a limited number of registers


60
00:01:51,520 --> 00:01:53,680
which are like 64-bit chunks of memory


61
00:01:53,680 --> 00:01:55,759
built directly into the cpu instead of


62
00:01:55,759 --> 00:01:57,360
the ram we can insert data into a


63
00:01:57,360 --> 00:01:59,280
register with the move instruction by


64
00:01:59,280 --> 00:02:01,280
providing operands for the register name


65
00:02:01,280 --> 00:02:03,119
and the data to store there in this case


66
00:02:03,119 --> 00:02:04,320
number one is used because it


67
00:02:04,320 --> 00:02:06,560
corresponds to system write on linux


68
00:02:06,560 --> 00:02:08,319
next we need to tell the system where to


69
00:02:08,319 --> 00:02:10,160
write in which case we'll move one into


70
00:02:10,160 --> 00:02:12,400
the rdi register which corresponds to


71
00:02:12,400 --> 00:02:14,080
the standard output in the terminal the


72
00:02:14,080 --> 00:02:15,680
next register stores the message to


73
00:02:15,680 --> 00:02:17,520
right along with its length now execute


74
00:02:17,520 --> 00:02:19,520
the code stored in the cpu by calling


75
00:02:19,520 --> 00:02:21,520
the operating system kernel almost done


76
00:02:21,520 --> 00:02:23,120
but we'll get a segmentation fault if we


77
00:02:23,120 --> 00:02:24,560
try to run it at this point update the


78
00:02:24,560 --> 00:02:26,800
racks register with 60 for system exit


79
00:02:26,800 --> 00:02:28,319
and provide an error code of zero for a


80
00:02:28,319 --> 00:02:30,480
success now use the assembler to compile


81
00:02:30,480 --> 00:02:32,319
or assemble your code into an object


82
00:02:32,319 --> 00:02:34,080
file then use the linker to convert it


83
00:02:34,080 --> 00:02:35,760
into the final executable this has been


84
00:02:35,760 --> 00:02:37,920
assembly language in 100 seconds if you


85
00:02:37,920 --> 00:02:39,360
want to see more short videos like this


86
00:02:39,360 --> 00:02:41,200
hit the like button and subscribe thanks


87
00:02:41,200 --> 00:02:42,959
for watching and i will see you in the


88
00:02:42,959 --> 00:02:45,680
next one


