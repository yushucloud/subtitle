1
00:00:00,160 --> 00:00:02,000
in this video we'll look at seven


2
00:00:02,000 --> 00:00:03,439
different ways to deploy


3
00:00:03,439 --> 00:00:05,600
a server side application i built this


4
00:00:05,600 --> 00:00:06,960
api with node.js


5
00:00:06,960 --> 00:00:08,480
and now i'm ready to share it with the


6
00:00:08,480 --> 00:00:10,880
world but one does not simply deploy an


7
00:00:10,880 --> 00:00:11,840
app to production


8
00:00:11,840 --> 00:00:13,120
there's all kinds of different ways to


9
00:00:13,120 --> 00:00:15,040
get the job done with trade-offs between


10
00:00:15,040 --> 00:00:17,279
cost complexity and scalability


11
00:00:17,279 --> 00:00:19,199
on the surface deployment seems like it


12
00:00:19,199 --> 00:00:21,039
should be easy we just need a computer


13
00:00:21,039 --> 00:00:22,720
to host the app which we connect to the


14
00:00:22,720 --> 00:00:24,400
internet so it can handle requests from


15
00:00:24,400 --> 00:00:25,359
all of our users


16
00:00:25,359 --> 00:00:27,199
but resources are limited and that means


17
00:00:27,199 --> 00:00:29,199
we need to synchronize many computers


18
00:00:29,199 --> 00:00:30,080
all over the world


19
00:00:30,080 --> 00:00:31,920
just to keep things running fast by the


20
00:00:31,920 --> 00:00:33,440
end of this video you'll be able to


21
00:00:33,440 --> 00:00:35,680
analyze the trade-offs like a cto to


22
00:00:35,680 --> 00:00:37,440
choose the best deployment strategy for


23
00:00:37,440 --> 00:00:38,960
your server side application


24
00:00:38,960 --> 00:00:40,559
if you're new here like and subscribe


25
00:00:40,559 --> 00:00:42,079
then let's jump right into it


26
00:00:42,079 --> 00:00:43,680
first of all let's look at some of the


27
00:00:43,680 --> 00:00:45,840
features in this node.js application


28
00:00:45,840 --> 00:00:48,160
it requires node 16 which is the current


29
00:00:48,160 --> 00:00:49,680
bleeding edge version and that means


30
00:00:49,680 --> 00:00:50,719
wherever we deploy


31
00:00:50,719 --> 00:00:52,719
needs to support that exact version of


32
00:00:52,719 --> 00:00:55,440
node it provides a basic rest api built


33
00:00:55,440 --> 00:00:57,520
with the express js framework nothing


34
00:00:57,520 --> 00:00:58,239
too special


35
00:00:58,239 --> 00:00:59,760
but we want these endpoints to have


36
00:00:59,760 --> 00:01:01,600
extremely fast response times


37
00:01:01,600 --> 00:01:03,280
one of the endpoints though creates a


38
00:01:03,280 --> 00:01:05,199
websocket connection with the client


39
00:01:05,199 --> 00:01:06,720
that means that the connection between


40
00:01:06,720 --> 00:01:08,640
the client and server needs to stay


41
00:01:08,640 --> 00:01:10,479
open for a long time that'll come into


42
00:01:10,479 --> 00:01:12,320
play later because not every deployment


43
00:01:12,320 --> 00:01:12,880
strategy


44
00:01:12,880 --> 00:01:14,640
supports long-lived connections like


45
00:01:14,640 --> 00:01:16,640
that now one other important feature of


46
00:01:16,640 --> 00:01:17,280
this server


47
00:01:17,280 --> 00:01:18,960
is that it's stateless that means it


48
00:01:18,960 --> 00:01:20,960
doesn't store any persistent data in


49
00:01:20,960 --> 00:01:22,320
memory or on the disk


50
00:01:22,320 --> 00:01:24,400
that's needed between different http


51
00:01:24,400 --> 00:01:26,000
requests anything related to the


52
00:01:26,000 --> 00:01:27,920
application state would be stored in a


53
00:01:27,920 --> 00:01:29,119
dedicated database


54
00:01:29,119 --> 00:01:31,200
now to run this app on our local machine


55
00:01:31,200 --> 00:01:33,200
we use the npm start command made


56
00:01:33,200 --> 00:01:34,560
available in the package


57
00:01:34,560 --> 00:01:36,880
json file now the question becomes how


58
00:01:36,880 --> 00:01:38,720
do we do the same thing for a computer


59
00:01:38,720 --> 00:01:40,240
that's accessible to the greater


60
00:01:40,240 --> 00:01:41,680
internet the first option


61
00:01:41,680 --> 00:01:43,360
is to use your own hardware you might


62
00:01:43,360 --> 00:01:45,360
have an old pc laying around or maybe


63
00:01:45,360 --> 00:01:47,040
you want to invest in your own server


64
00:01:47,040 --> 00:01:48,799
rack or you can even use a 100


65
00:01:48,799 --> 00:01:50,880
raspberry pi like i showed in this video


66
00:01:50,880 --> 00:01:52,640
this was actually a common way to deploy


67
00:01:52,640 --> 00:01:54,000
a web application 15


68
00:01:54,000 --> 00:01:56,079
years ago because back in those days the


69
00:01:56,079 --> 00:01:57,439
cloud didn't exist yet


70
00:01:57,439 --> 00:01:59,119
almost every startup today will use the


71
00:01:59,119 --> 00:02:00,640
cloud because it's convenient and


72
00:02:00,640 --> 00:02:02,320
inexpensive but deploying to your own


73
00:02:02,320 --> 00:02:04,240
hardware has some unique advantages


74
00:02:04,240 --> 00:02:05,759
most importantly you own your


75
00:02:05,759 --> 00:02:07,600
infrastructure it's not owned by a tech


76
00:02:07,600 --> 00:02:08,000
company


77
00:02:08,000 --> 00:02:10,000
like amazon or google who can sync you


78
00:02:10,000 --> 00:02:11,680
at any moment if they don't like the cut


79
00:02:11,680 --> 00:02:12,400
of your jip


80
00:02:12,400 --> 00:02:14,000
but managing your own hardware is a


81
00:02:14,000 --> 00:02:15,760
major pain not only do you need to think


82
00:02:15,760 --> 00:02:17,520
about the server configuration itself


83
00:02:17,520 --> 00:02:18,800
but you also have to worry about things


84
00:02:18,800 --> 00:02:19,840
like electricity


85
00:02:19,840 --> 00:02:22,080
air conditioning natural disasters and


86
00:02:22,080 --> 00:02:22,879
things like that


87
00:02:22,879 --> 00:02:24,959
if the electricity or internet goes out


88
00:02:24,959 --> 00:02:26,720
then your website goes down another


89
00:02:26,720 --> 00:02:27,760
challenge is that if you're an


90
00:02:27,760 --> 00:02:29,280
individual working out of your garage


91
00:02:29,280 --> 00:02:31,280
you'll need to request a static ip


92
00:02:31,280 --> 00:02:32,800
address from your internet service


93
00:02:32,800 --> 00:02:33,280
provider


94
00:02:33,280 --> 00:02:34,640
if they don't give you one then you're


95
00:02:34,640 --> 00:02:36,319
pretty much screwed now as your app


96
00:02:36,319 --> 00:02:37,440
grows in popularity


97
00:02:37,440 --> 00:02:39,519
the only way to scale is to buy more


98
00:02:39,519 --> 00:02:41,680
computers and ideally those computers


99
00:02:41,680 --> 00:02:42,480
are located


100
00:02:42,480 --> 00:02:43,840
in different parts of the world which


101
00:02:43,840 --> 00:02:45,599
means you'll also want an international


102
00:02:45,599 --> 00:02:46,959
real estate portfolio


103
00:02:46,959 --> 00:02:49,120
luckily there is an easier way to deploy


104
00:02:49,120 --> 00:02:51,200
a node.js application and it's called


105
00:02:51,200 --> 00:02:52,000
the cloud


106
00:02:52,000 --> 00:02:53,599
i'm going to focus on google cloud


107
00:02:53,599 --> 00:02:55,599
platform for this video but keep in mind


108
00:02:55,599 --> 00:02:56,959
that there are many different cloud


109
00:02:56,959 --> 00:02:57,920
providers out there


110
00:02:57,920 --> 00:03:00,319
offering similar services one option for


111
00:03:00,319 --> 00:03:01,440
deploying to the cloud


112
00:03:01,440 --> 00:03:03,280
is to use compute engine to create a


113
00:03:03,280 --> 00:03:05,280
virtual machine which is basically just


114
00:03:05,280 --> 00:03:06,560
a computer in the cloud


115
00:03:06,560 --> 00:03:08,319
that you pay for by the hour and every


116
00:03:08,319 --> 00:03:10,319
customer on google cloud gets one free


117
00:03:10,319 --> 00:03:12,319
micro instance per month so the cost to


118
00:03:12,319 --> 00:03:14,239
get started in the cloud is way lower


119
00:03:14,239 --> 00:03:15,680
than if you were to buy your own


120
00:03:15,680 --> 00:03:16,720
physical hardware


121
00:03:16,720 --> 00:03:18,400
after creating a new vm on compute


122
00:03:18,400 --> 00:03:20,239
engine it'll take a few steps to get


123
00:03:20,239 --> 00:03:21,360
your app deployed


124
00:03:21,360 --> 00:03:23,760
first you'll need to ssh into it to


125
00:03:23,760 --> 00:03:25,519
interact with the operating system


126
00:03:25,519 --> 00:03:27,440
install your preferred node.js version


127
00:03:27,440 --> 00:03:29,200
then clone your source code to the file


128
00:03:29,200 --> 00:03:30,480
system from there you can start the


129
00:03:30,480 --> 00:03:31,280
application


130
00:03:31,280 --> 00:03:33,200
then go to the firewall settings and


131
00:03:33,200 --> 00:03:35,680
open up port 8080 so it can be accessed


132
00:03:35,680 --> 00:03:37,599
on the internet and now technically your


133
00:03:37,599 --> 00:03:39,440
app is deployed but there are a lot of


134
00:03:39,440 --> 00:03:41,120
things missing here for one you'll need


135
00:03:41,120 --> 00:03:43,040
to reserve a static ip address


136
00:03:43,040 --> 00:03:45,280
then update your dns settings to point a


137
00:03:45,280 --> 00:03:47,280
custom domain to it in addition you'll


138
00:03:47,280 --> 00:03:49,519
need to manage your own ssl certificate


139
00:03:49,519 --> 00:03:52,080
to serve it over https and another


140
00:03:52,080 --> 00:03:52,640
problem


141
00:03:52,640 --> 00:03:53,840
is that it's not going to scale


142
00:03:53,840 --> 00:03:56,159
automatically once the cpu and memory


143
00:03:56,159 --> 00:03:58,000
has been fully utilized the app will


144
00:03:58,000 --> 00:03:59,680
just stop working we could address that


145
00:03:59,680 --> 00:04:00,480
by bringing in


146
00:04:00,480 --> 00:04:02,959
nginx or setting up load balancers but


147
00:04:02,959 --> 00:04:04,799
it's a lot of extra configuration work


148
00:04:04,799 --> 00:04:06,480
that most people don't want to deal with


149
00:04:06,480 --> 00:04:08,000
so the next option we'll look at


150
00:04:08,000 --> 00:04:09,840
is the app engine standard environment


151
00:04:09,840 --> 00:04:12,400
for node.js which is a platform as a


152
00:04:12,400 --> 00:04:12,959
service


153
00:04:12,959 --> 00:04:14,799
it makes it incredibly easy to get our


154
00:04:14,799 --> 00:04:16,959
local node app to a production server


155
00:04:16,959 --> 00:04:18,799
and the cloud fully manages the virtual


156
00:04:18,799 --> 00:04:20,639
machines which means your app scales


157
00:04:20,639 --> 00:04:22,880
automatically as more traffic comes in


158
00:04:22,880 --> 00:04:24,479
all that manual configuration we had to


159
00:04:24,479 --> 00:04:26,479
do in the virtual machine is unnecessary


160
00:04:26,479 --> 00:04:27,280
in app engine


161
00:04:27,280 --> 00:04:28,960
because it's pre-configured to scale


162
00:04:28,960 --> 00:04:30,800
popular types of applications


163
00:04:30,800 --> 00:04:33,199
first we install the google cloud sdk on


164
00:04:33,199 --> 00:04:34,240
our local system


165
00:04:34,240 --> 00:04:36,639
second we create an app.yaml file in the


166
00:04:36,639 --> 00:04:37,600
root of the project


167
00:04:37,600 --> 00:04:39,680
inside the file we specify the runtime


168
00:04:39,680 --> 00:04:42,400
as node 14. we can also use this file to


169
00:04:42,400 --> 00:04:44,000
customize the hosting behavior


170
00:04:44,000 --> 00:04:45,759
and set limits on how the infrastructure


171
00:04:45,759 --> 00:04:47,919
will scale then the third step is to use


172
00:04:47,919 --> 00:04:50,080
the gcloud app deploy command which will


173
00:04:50,080 --> 00:04:52,000
upload the local code to the cloud


174
00:04:52,000 --> 00:04:53,919
then look for the npm start command in


175
00:04:53,919 --> 00:04:55,040
the package json


176
00:04:55,040 --> 00:04:56,960
to run the application then it provides


177
00:04:56,960 --> 00:04:59,360
a url where the actual hosted app can be


178
00:04:59,360 --> 00:05:01,840
accessed and notice how it's http secure


179
00:05:01,840 --> 00:05:03,759
because google manages the ssl


180
00:05:03,759 --> 00:05:04,880
certificate for you


181
00:05:04,880 --> 00:05:06,880
in addition app engine provides task


182
00:05:06,880 --> 00:05:08,160
queues cron jobs


183
00:05:08,160 --> 00:05:10,080
login and a bunch of other tools that


184
00:05:10,080 --> 00:05:11,840
you wouldn't have in a normal vm


185
00:05:11,840 --> 00:05:13,440
it's also important to point out that


186
00:05:13,440 --> 00:05:15,600
app engine is a persistent server which


187
00:05:15,600 --> 00:05:17,600
means it's capable of handling long live


188
00:05:17,600 --> 00:05:19,759
connections like websockets and it's way


189
00:05:19,759 --> 00:05:21,759
easier to get your app online compared


190
00:05:21,759 --> 00:05:23,120
to a regular vm


191
00:05:23,120 --> 00:05:24,720
but here's the catch the reason it's


192
00:05:24,720 --> 00:05:26,160
called the standard environment is


193
00:05:26,160 --> 00:05:27,440
because you have no control


194
00:05:27,440 --> 00:05:29,280
over the runtime itself that makes it


195
00:05:29,280 --> 00:05:30,960
easier for google to scale


196
00:05:30,960 --> 00:05:32,320
but if you have custom runtime


197
00:05:32,320 --> 00:05:34,240
dependencies or a version of node that's


198
00:05:34,240 --> 00:05:35,840
not supported then you won't be able to


199
00:05:35,840 --> 00:05:37,120
use it on the free tier


200
00:05:37,120 --> 00:05:39,039
now although app engine standard is free


201
00:05:39,039 --> 00:05:40,639
initially it becomes more and more


202
00:05:40,639 --> 00:05:42,160
expensive as you scale up


203
00:05:42,160 --> 00:05:43,520
and there may be less expensive


204
00:05:43,520 --> 00:05:45,440
serverless options as we'll see later


205
00:05:45,440 --> 00:05:47,520
the next option though is the app engine


206
00:05:47,520 --> 00:05:49,120
flexible environment the primary


207
00:05:49,120 --> 00:05:49,680
difference


208
00:05:49,680 --> 00:05:51,199
is that instead of a sandboxed


209
00:05:51,199 --> 00:05:52,880
environment you have full control over


210
00:05:52,880 --> 00:05:54,400
the environment with docker


211
00:05:54,400 --> 00:05:55,840
that means you can install any version


212
00:05:55,840 --> 00:05:57,600
of node.js that you'd like along with


213
00:05:57,600 --> 00:05:59,840
any other low-level system dependencies


214
00:05:59,840 --> 00:06:01,520
but at the same time the cloud will


215
00:06:01,520 --> 00:06:03,680
still automatically scale those vms up


216
00:06:03,680 --> 00:06:05,680
or down based on the incoming traffic


217
00:06:05,680 --> 00:06:07,600
and again this is called a platform as a


218
00:06:07,600 --> 00:06:09,440
service and is very similar to things


219
00:06:09,440 --> 00:06:10,400
like heroku


220
00:06:10,400 --> 00:06:12,960
or elastic bean stock on aws all you


221
00:06:12,960 --> 00:06:15,280
have to do is change the runtime to flex


222
00:06:15,280 --> 00:06:16,800
in the app.yaml file


223
00:06:16,800 --> 00:06:18,639
then add a docker file to the root of


224
00:06:18,639 --> 00:06:20,160
the project app engine will


225
00:06:20,160 --> 00:06:22,000
automatically manage the docker image


226
00:06:22,000 --> 00:06:23,440
and containers for you


227
00:06:23,440 --> 00:06:25,440
but in some cases developers want more


228
00:06:25,440 --> 00:06:27,759
control to orchestrate exactly how their


229
00:06:27,759 --> 00:06:28,960
infrastructure scales


230
00:06:28,960 --> 00:06:30,800
and that's where kubernetes comes in i


231
00:06:30,800 --> 00:06:32,720
once heard a wise quote about kubernetes


232
00:06:32,720 --> 00:06:34,160
that went something like you don't


233
00:06:34,160 --> 00:06:35,440
[__] need kubernetes


234
00:06:35,440 --> 00:06:36,800
and i think that's true for the vast


235
00:06:36,800 --> 00:06:38,400
majority of developers out there if you


236
00:06:38,400 --> 00:06:40,319
remember earlier deploying to a regular


237
00:06:40,319 --> 00:06:40,800
vm


238
00:06:40,800 --> 00:06:42,400
requires a lot of configuration


239
00:06:42,400 --> 00:06:44,160
kubernetes also requires a lot of


240
00:06:44,160 --> 00:06:45,039
configuration


241
00:06:45,039 --> 00:06:46,960
but provides a predictable framework for


242
00:06:46,960 --> 00:06:48,240
scaling your infrastructure


243
00:06:48,240 --> 00:06:50,080
it's popular for large teams who have


244
00:06:50,080 --> 00:06:51,919
extreme demands on their infrastructure


245
00:06:51,919 --> 00:06:54,319
apps like robinhood and pokemon go use


246
00:06:54,319 --> 00:06:56,000
kubernetes behind the scenes


247
00:06:56,000 --> 00:06:57,280
but if you're just deploying a little


248
00:06:57,280 --> 00:06:59,599
side project then kubernetes is probably


249
00:06:59,599 --> 00:07:01,440
way too expensive and complicated


250
00:07:01,440 --> 00:07:03,599
but at the other end of the complexity


251
00:07:03,599 --> 00:07:05,039
and cost spectrum we have


252
00:07:05,039 --> 00:07:07,120
serverless functions just like the app


253
00:07:07,120 --> 00:07:08,400
engine standard environment


254
00:07:08,400 --> 00:07:10,880
cloud functions provide a set runtime


255
00:07:10,880 --> 00:07:12,319
and allow you to deploy your code


256
00:07:12,319 --> 00:07:13,759
without ever having to think about the


257
00:07:13,759 --> 00:07:15,039
underlying infrastructure


258
00:07:15,039 --> 00:07:16,720
in fact you can just copy and paste your


259
00:07:16,720 --> 00:07:19,039
code directly into the ui to deploy it


260
00:07:19,039 --> 00:07:20,639
the primary difference here compared to


261
00:07:20,639 --> 00:07:21,840
something like app engine


262
00:07:21,840 --> 00:07:23,840
is that our servers are ephemeral or


263
00:07:23,840 --> 00:07:25,680
short-lived and that allows google to


264
00:07:25,680 --> 00:07:27,120
bill us for the exact amount of


265
00:07:27,120 --> 00:07:29,199
resources that we use instead of paying


266
00:07:29,199 --> 00:07:31,120
a fixed monthly price for a server


267
00:07:31,120 --> 00:07:33,280
we pay a tiny amount each time a


268
00:07:33,280 --> 00:07:35,199
function is invoked in addition you can


269
00:07:35,199 --> 00:07:37,039
trigger cloud functions based on many


270
00:07:37,039 --> 00:07:38,240
different events that happen in the


271
00:07:38,240 --> 00:07:40,319
cloud like when a record is updated in a


272
00:07:40,319 --> 00:07:42,479
database or when a file is uploaded to a


273
00:07:42,479 --> 00:07:44,000
storage bucket and that makes it much


274
00:07:44,000 --> 00:07:46,000
easier to run background jobs compared


275
00:07:46,000 --> 00:07:47,840
to other approaches cloud functions are


276
00:07:47,840 --> 00:07:49,759
a very easy and inexpensive way to


277
00:07:49,759 --> 00:07:51,440
deploy a node app but there are a few


278
00:07:51,440 --> 00:07:53,120
caveats that you need to be aware of


279
00:07:53,120 --> 00:07:54,800
in our case we have an endpoint that


280
00:07:54,800 --> 00:07:56,479
needs to support websockets


281
00:07:56,479 --> 00:07:58,080
however because cloud functions are


282
00:07:58,080 --> 00:07:59,919
short-lived we can't really implement


283
00:07:59,919 --> 00:08:00,960
web sockets in them


284
00:08:00,960 --> 00:08:02,800
another issue you might run into is


285
00:08:02,800 --> 00:08:04,560
something called the cold start time


286
00:08:04,560 --> 00:08:06,240
when a function is first allocated in


287
00:08:06,240 --> 00:08:08,080
the cloud it might take a little while


288
00:08:08,080 --> 00:08:10,080
to get things set up and produce a very


289
00:08:10,080 --> 00:08:11,599
high response time on the initial


290
00:08:11,599 --> 00:08:12,319
request


291
00:08:12,319 --> 00:08:14,080
another drawback is the fact that you


292
00:08:14,080 --> 00:08:16,160
have no control over the runtime when


293
00:08:16,160 --> 00:08:17,680
using a serverless function


294
00:08:17,680 --> 00:08:19,360
but there's actually one more deployment


295
00:08:19,360 --> 00:08:20,800
option we can use to get around this


296
00:08:20,800 --> 00:08:22,479
limitation called cloud run


297
00:08:22,479 --> 00:08:24,479
it works just like a serverless function


298
00:08:24,479 --> 00:08:26,160
but instead of using a predefined


299
00:08:26,160 --> 00:08:27,840
runtime you can customize it by


300
00:08:27,840 --> 00:08:29,599
containerizing your application with


301
00:08:29,599 --> 00:08:30,080
docker


302
00:08:30,080 --> 00:08:32,080
allowing us to specify the bleeding edge


303
00:08:32,080 --> 00:08:33,200
version of node.js


304
00:08:33,200 --> 00:08:34,479
along with any other low-level


305
00:08:34,479 --> 00:08:36,000
dependencies that we might need once


306
00:08:36,000 --> 00:08:37,839
we're able to run this app with docker


307
00:08:37,839 --> 00:08:39,599
we can then upload the image to the


308
00:08:39,599 --> 00:08:41,919
container registry then use the image to


309
00:08:41,919 --> 00:08:43,680
create a new cloud run deployment and


310
00:08:43,680 --> 00:08:44,959
now we have all the benefits of


311
00:08:44,959 --> 00:08:46,959
serverless like automatic scaling


312
00:08:46,959 --> 00:08:48,880
and pay-as-you-go pricing while also


313
00:08:48,880 --> 00:08:50,720
having a lot more control over the


314
00:08:50,720 --> 00:08:52,160
underlying server and as an


315
00:08:52,160 --> 00:08:54,240
added bonus we can set a minimum number


316
00:08:54,240 --> 00:08:56,240
of instances to reduce the cold start


317
00:08:56,240 --> 00:08:56,560
time


318
00:08:56,560 --> 00:08:58,480
although that comes at a higher cost and


319
00:08:58,480 --> 00:09:00,240
with that we have seven different ways


320
00:09:00,240 --> 00:09:00,959
to deploy


321
00:09:00,959 --> 00:09:02,959
a node.js application if you want to see


322
00:09:02,959 --> 00:09:04,399
some of these deployment options in


323
00:09:04,399 --> 00:09:04,800
action


324
00:09:04,800 --> 00:09:06,560
consider becoming a pro member at


325
00:09:06,560 --> 00:09:08,800
fireship io to get access to my full


326
00:09:08,800 --> 00:09:10,959
courses thanks for watching and i will


327
00:09:10,959 --> 00:09:15,519
see you in the next one


