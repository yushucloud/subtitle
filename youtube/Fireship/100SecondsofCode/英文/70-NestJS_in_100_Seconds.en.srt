1
00:00:00,160 --> 00:00:02,879
nest js is a node.js framework for


2
00:00:02,879 --> 00:00:04,560
building scalable server-side


3
00:00:04,560 --> 00:00:06,560
applications with typescript it provides


4
00:00:06,560 --> 00:00:08,400
a suite of tools that leverage either


5
00:00:08,400 --> 00:00:10,639
fastify or express to facilitate


6
00:00:10,639 --> 00:00:12,559
rapid development and predictable


7
00:00:12,559 --> 00:00:14,559
readable code it supports rest and


8
00:00:14,559 --> 00:00:16,960
graphql apis out of the box or you might


9
00:00:16,960 --> 00:00:19,119
use it to build a full stack application


10
00:00:19,119 --> 00:00:21,119
using the model view controller pattern


11
00:00:21,119 --> 00:00:23,199
similar to frameworks like laravel


12
00:00:23,199 --> 00:00:25,279
or ruby on rails and it contains a ton


13
00:00:25,279 --> 00:00:26,880
of built-in modules to work with


14
00:00:26,880 --> 00:00:27,599
databases


15
00:00:27,599 --> 00:00:29,679
handle security implement streaming and


16
00:00:29,679 --> 00:00:31,439
anything else you can imagine doing in a


17
00:00:31,439 --> 00:00:32,719
server side application


18
00:00:32,719 --> 00:00:34,480
nest has its own very powerful command


19
00:00:34,480 --> 00:00:36,239
line tool and you can scaffold out a new


20
00:00:36,239 --> 00:00:37,360
project with the nest


21
00:00:37,360 --> 00:00:39,280
new command that provides a code base


22
00:00:39,280 --> 00:00:41,360
pre-configured with jest for testing and


23
00:00:41,360 --> 00:00:43,120
set up with typescript to help us write


24
00:00:43,120 --> 00:00:45,120
more readable and reliable code in the


25
00:00:45,120 --> 00:00:46,320
source directory you'll notice a


26
00:00:46,320 --> 00:00:48,000
controller which is a fundamental


27
00:00:48,000 --> 00:00:49,440
building block of the framework


28
00:00:49,440 --> 00:00:51,600
it's responsible for handling incoming


29
00:00:51,600 --> 00:00:52,879
http requests


30
00:00:52,879 --> 00:00:54,559
and returning responses back to the


31
00:00:54,559 --> 00:00:56,640
client to implement a controller simply


32
00:00:56,640 --> 00:00:58,000
add the controller decorator


33
00:00:58,000 --> 00:01:00,079
to a class then inside the class you can


34
00:01:00,079 --> 00:01:01,039
implement methods


35
00:01:01,039 --> 00:01:03,680
and decorate them with http verbs like


36
00:01:03,680 --> 00:01:04,080
git


37
00:01:04,080 --> 00:01:07,280
post patch put etc by default this will


38
00:01:07,280 --> 00:01:09,920
create an http endpoint on the root url


39
00:01:09,920 --> 00:01:11,280
but you can pass a string to the


40
00:01:11,280 --> 00:01:12,080
decorator to


41
00:01:12,080 --> 00:01:14,080
change the route or implement dynamic


42
00:01:14,080 --> 00:01:15,680
route parameters in addition


43
00:01:15,680 --> 00:01:17,280
nest provides other decorators to


44
00:01:17,280 --> 00:01:19,200
control things like the status code and


45
00:01:19,200 --> 00:01:20,000
headers then


46
00:01:20,000 --> 00:01:21,600
in the method itself parameter


47
00:01:21,600 --> 00:01:23,520
decorators can be used to access the


48
00:01:23,520 --> 00:01:25,360
request parameters or body


49
00:01:25,360 --> 00:01:27,200
and finally the return value from the


50
00:01:27,200 --> 00:01:28,960
method is the response body


51
00:01:28,960 --> 00:01:30,960
that gets sent back down to the client


52
00:01:30,960 --> 00:01:32,159
what's awesome about nest


53
00:01:32,159 --> 00:01:33,759
is that you can use the cli to


54
00:01:33,759 --> 00:01:35,759
automatically generate more controllers


55
00:01:35,759 --> 00:01:37,759
to keep your code organized as it grows


56
00:01:37,759 --> 00:01:38,640
in complexity


57
00:01:38,640 --> 00:01:39,920
but there's more to nest than just


58
00:01:39,920 --> 00:01:42,000
controllers a provider is a class that


59
00:01:42,000 --> 00:01:43,520
contains shared logic throughout the


60
00:01:43,520 --> 00:01:44,720
entire application


61
00:01:44,720 --> 00:01:46,560
and can be injected as a dependency


62
00:01:46,560 --> 00:01:48,000
where needed any class with the


63
00:01:48,000 --> 00:01:49,920
injectable decorator can be injected in


64
00:01:49,920 --> 00:01:51,680
the constructor of another class


65
00:01:51,680 --> 00:01:53,280
for example a provider can be


66
00:01:53,280 --> 00:01:55,280
implemented as a guard to handle


67
00:01:55,280 --> 00:01:56,960
role-based user authentication


68
00:01:56,960 --> 00:01:59,200
or it might be implemented as a pipe to


69
00:01:59,200 --> 00:02:01,040
efficiently validate and transform


70
00:02:01,040 --> 00:02:02,479
values in a controller


71
00:02:02,479 --> 00:02:04,719
and lastly we have the module decorator


72
00:02:04,719 --> 00:02:06,640
which allows code to be organized into


73
00:02:06,640 --> 00:02:07,520
smaller chunks


74
00:02:07,520 --> 00:02:09,440
where it can be lazy loaded to run


75
00:02:09,440 --> 00:02:11,360
faster in serverless environments


76
00:02:11,360 --> 00:02:14,000
this has been nest js in 100 seconds if


77
00:02:14,000 --> 00:02:15,440
you want to see more short videos like


78
00:02:15,440 --> 00:02:15,760
this


79
00:02:15,760 --> 00:02:17,280
make sure to hit the like button and


80
00:02:17,280 --> 00:02:19,360
subscribe thanks for watching and i will


81
00:02:19,360 --> 00:02:22,400
see you in the next one


