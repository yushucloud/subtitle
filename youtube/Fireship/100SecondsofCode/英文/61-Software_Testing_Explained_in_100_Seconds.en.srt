1
00:00:00,240 --> 00:00:02,000
software it's not like engineering


2
00:00:02,000 --> 00:00:03,760
something easy like a bridge where you


3
00:00:03,760 --> 00:00:04,799
start with a blueprint


4
00:00:04,799 --> 00:00:06,720
build it to spec then forget about it


5
00:00:06,720 --> 00:00:08,800
software is dynamic with a lot of moving


6
00:00:08,800 --> 00:00:10,719
parts and requirements that evolve over


7
00:00:10,719 --> 00:00:11,120
time


8
00:00:11,120 --> 00:00:12,880
developers build apps on top of a


9
00:00:12,880 --> 00:00:14,799
mountain of abstractions and nobody


10
00:00:14,799 --> 00:00:16,880
fully understands how every layer works


11
00:00:16,880 --> 00:00:18,560
that's okay because we just need to make


12
00:00:18,560 --> 00:00:19,920
sure that our code matches the


13
00:00:19,920 --> 00:00:21,680
requirements of the product test driven


14
00:00:21,680 --> 00:00:23,600
development is scientifically proven to


15
00:00:23,600 --> 00:00:25,039
reduce defects and improve the


16
00:00:25,039 --> 00:00:26,960
maintainability of a code base but it


17
00:00:26,960 --> 00:00:28,800
does require some additional effort


18
00:00:28,800 --> 00:00:30,960
one option is manual testing where a


19
00:00:30,960 --> 00:00:32,800
human being clicks on every button and


20
00:00:32,800 --> 00:00:34,399
fills out every form then assigns a


21
00:00:34,399 --> 00:00:35,920
bunch of jira tickets so they can be


22
00:00:35,920 --> 00:00:37,440
backlogged by the developers


23
00:00:37,440 --> 00:00:38,960
but that's not very efficient for a


24
00:00:38,960 --> 00:00:41,040
large scale product a better approach is


25
00:00:41,040 --> 00:00:42,719
to use automated testing tools that


26
00:00:42,719 --> 00:00:44,559
allow developers to write code for the


27
00:00:44,559 --> 00:00:46,320
sole purpose of testing the main


28
00:00:46,320 --> 00:00:48,239
application code in a code base you'll


29
00:00:48,239 --> 00:00:49,920
often find files that end in


30
00:00:49,920 --> 00:00:52,320
test or dot spec inside you'll first


31
00:00:52,320 --> 00:00:54,160
find a line of code that describes the


32
00:00:54,160 --> 00:00:56,079
feature or thing that's being tested


33
00:00:56,079 --> 00:00:57,840
that's known as a test suite and it


34
00:00:57,840 --> 00:01:00,160
contains one or more individual tests


35
00:01:00,160 --> 00:01:02,160
an individual test usually starts with


36
00:01:02,160 --> 00:01:03,920
it followed by a description


37
00:01:03,920 --> 00:01:06,159
of what is being tested the idea is to


38
00:01:06,159 --> 00:01:07,840
describe the behavior of the code in


39
00:01:07,840 --> 00:01:09,200
human readable terms


40
00:01:09,200 --> 00:01:10,720
inside the test the code will be


41
00:01:10,720 --> 00:01:12,400
executed then one or more


42
00:01:12,400 --> 00:01:14,720
expectations or assertions are used to


43
00:01:14,720 --> 00:01:16,240
check that the code produces the


44
00:01:16,240 --> 00:01:18,080
expected result if the expectation


45
00:01:18,080 --> 00:01:20,000
returns false then the test fails


46
00:01:20,000 --> 00:01:22,560
if it's true it passes test runners like


47
00:01:22,560 --> 00:01:23,600
jest or karma


48
00:01:23,600 --> 00:01:25,280
can run all your tests automatically in


49
00:01:25,280 --> 00:01:26,880
the background or on a continuous


50
00:01:26,880 --> 00:01:28,880
integration server before you deploy


51
00:01:28,880 --> 00:01:30,640
now there are many different automated


52
00:01:30,640 --> 00:01:32,000
testing strategies that you should be


53
00:01:32,000 --> 00:01:32,640
aware of


54
00:01:32,640 --> 00:01:34,479
at the most granular level we have unit


55
00:01:34,479 --> 00:01:36,159
testing which is designed to test


56
00:01:36,159 --> 00:01:37,759
individual functions or methods


57
00:01:37,759 --> 00:01:39,119
like does this function return the


58
00:01:39,119 --> 00:01:41,119
proper value when given the arguments of


59
00:01:41,119 --> 00:01:41,360
a


60
00:01:41,360 --> 00:01:43,439
and b then we have integration testing


61
00:01:43,439 --> 00:01:44,720
to determine how well different


62
00:01:44,720 --> 00:01:46,880
components or modules work together like


63
00:01:46,880 --> 00:01:47,759
is the component


64
00:01:47,759 --> 00:01:49,520
able to use the database service to get


65
00:01:49,520 --> 00:01:51,200
data from the server at the highest


66
00:01:51,200 --> 00:01:53,040
level we have end-to-end testing which


67
00:01:53,040 --> 00:01:54,880
usually happens in a mock browser or


68
00:01:54,880 --> 00:01:55,439
device


69
00:01:55,439 --> 00:01:57,680
and simulates actual user behaviors like


70
00:01:57,680 --> 00:01:59,200
clicking on buttons and filling out


71
00:01:59,200 --> 00:01:59,680
forms


72
00:01:59,680 --> 00:02:01,520
it's like having a robot to do all your


73
00:02:01,520 --> 00:02:02,799
manual testing for you


74
00:02:02,799 --> 00:02:04,479
and that's not all there are many other


75
00:02:04,479 --> 00:02:06,640
types like performance and smoke testing


76
00:02:06,640 --> 00:02:07,600
which i'll explain


77
00:02:07,600 --> 00:02:09,520
in my upcoming test driven development


78
00:02:09,520 --> 00:02:10,800
breakdown hit the like button if you


79
00:02:10,800 --> 00:02:12,400
want to see more short videos like this


80
00:02:12,400 --> 00:02:14,319
thanks for watching and i will see you


81
00:02:14,319 --> 00:02:17,440
in the next one


