1
00:00:00,640 --> 00:00:03,760
graphql a query language for reading and


2
00:00:03,760 --> 00:00:05,759
mutating data in apis


3
00:00:05,759 --> 00:00:08,240
as a back-end developer graphql provides


4
00:00:08,240 --> 00:00:09,120
a type system


5
00:00:09,120 --> 00:00:11,200
where you can describe a schema for your


6
00:00:11,200 --> 00:00:12,400
data in turn


7
00:00:12,400 --> 00:00:14,160
this gives front-end consumers of the


8
00:00:14,160 --> 00:00:16,080
api the power to explore


9
00:00:16,080 --> 00:00:18,480
and request the exact data they need


10
00:00:18,480 --> 00:00:19,199
traditionally


11
00:00:19,199 --> 00:00:21,600
web developers have consumed apis using


12
00:00:21,600 --> 00:00:23,199
rest where data entities


13
00:00:23,199 --> 00:00:25,439
live on a bunch of urls on a server when


14
00:00:25,439 --> 00:00:26,720
a request is received


15
00:00:26,720 --> 00:00:28,560
the api responds with the full data


16
00:00:28,560 --> 00:00:30,000
payload of that entity


17
00:00:30,000 --> 00:00:31,840
that sounds simple enough but there are


18
00:00:31,840 --> 00:00:33,440
two potential drawbacks here


19
00:00:33,440 --> 00:00:35,200
we may need multiple entities at one


20
00:00:35,200 --> 00:00:36,480
time in which case


21
00:00:36,480 --> 00:00:38,480
each request is under fetching the


22
00:00:38,480 --> 00:00:39,760
actual data we want


23
00:00:39,760 --> 00:00:42,079
in other cases we may only want a small


24
00:00:42,079 --> 00:00:43,760
subset of a data entity


25
00:00:43,760 --> 00:00:45,760
in which case we need to over fetch from


26
00:00:45,760 --> 00:00:48,000
the api and that of course is bad for


27
00:00:48,000 --> 00:00:48,800
the environment


28
00:00:48,800 --> 00:00:51,760
how dare you instead of multiple urls a


29
00:00:51,760 --> 00:00:52,960
graphql api


30
00:00:52,960 --> 00:00:55,520
has a single entry point data is queried


31
00:00:55,520 --> 00:00:56,320
or fetched


32
00:00:56,320 --> 00:00:58,399
by describing it with a syntax that


33
00:00:58,399 --> 00:01:00,640
mirrors its return shape in json


34
00:01:00,640 --> 00:01:02,160
the front-end developer describes the


35
00:01:02,160 --> 00:01:03,600
data they want while the back-end


36
00:01:03,600 --> 00:01:04,320
developer


37
00:01:04,320 --> 00:01:06,560
writes code to resolve the request and


38
00:01:06,560 --> 00:01:08,479
it all happens in a syntax that can work


39
00:01:08,479 --> 00:01:09,920
with any programming language


40
00:01:09,920 --> 00:01:11,840
we can start defining a schema with our


41
00:01:11,840 --> 00:01:13,680
own custom objects using the type


42
00:01:13,680 --> 00:01:14,320
keyword


43
00:01:14,320 --> 00:01:16,640
a type can have multiple fields like a


44
00:01:16,640 --> 00:01:17,520
unique id


45
00:01:17,520 --> 00:01:19,360
and we'll make that required with a bang


46
00:01:19,360 --> 00:01:21,119
let's also give it integer and string


47
00:01:21,119 --> 00:01:21,680
values


48
00:01:21,680 --> 00:01:23,680
then create a relationship with another


49
00:01:23,680 --> 00:01:26,080
type a creator can have many videos


50
00:01:26,080 --> 00:01:27,840
which we can represent by wrapping the


51
00:01:27,840 --> 00:01:29,840
type in brackets on the flip side


52
00:01:29,840 --> 00:01:32,640
a video belongs to a creator now every


53
00:01:32,640 --> 00:01:33,840
graphql api


54
00:01:33,840 --> 00:01:35,920
has a query type which is the main entry


55
00:01:35,920 --> 00:01:38,079
point for a consumer of the api


56
00:01:38,079 --> 00:01:40,159
we can query a list of videos or an


57
00:01:40,159 --> 00:01:42,159
individual user based on their id


58
00:01:42,159 --> 00:01:43,840
that's how a consumer reads data but


59
00:01:43,840 --> 00:01:46,000
they may also want to mutate data


60
00:01:46,000 --> 00:01:48,000
in which case we implement a mutation


61
00:01:48,000 --> 00:01:49,759
type that defines how data can be


62
00:01:49,759 --> 00:01:51,360
modified on the api


63
00:01:51,360 --> 00:01:53,119
from there we can define code to resolve


64
00:01:53,119 --> 00:01:55,280
this data in any programming language


65
00:01:55,280 --> 00:01:57,200
once deployed any developer consuming


66
00:01:57,200 --> 00:01:59,360
this api will be able to explore it with


67
00:01:59,360 --> 00:02:00,719
a complete understanding


68
00:02:00,719 --> 00:02:02,560
of all possible queries and data


69
00:02:02,560 --> 00:02:04,320
entities which means the tooling can


70
00:02:04,320 --> 00:02:06,240
autocomplete your query as you type it


71
00:02:06,240 --> 00:02:07,280
out in your editor


72
00:02:07,280 --> 00:02:09,679
this has been graphql in 100 seconds if


73
00:02:09,679 --> 00:02:10,959
you want to see more short videos like


74
00:02:10,959 --> 00:02:12,879
this make sure to like and subscribe and


75
00:02:12,879 --> 00:02:14,800
turn on notifications because there is a


76
00:02:14,800 --> 00:02:15,760
lot more on the way


77
00:02:15,760 --> 00:02:17,840
thanks for watching and i will see you


78
00:02:17,840 --> 00:02:23,840
in the next one


