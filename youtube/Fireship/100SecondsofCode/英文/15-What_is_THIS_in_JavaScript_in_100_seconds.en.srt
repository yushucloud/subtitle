1
00:00:00,000 --> 00:00:02,580
what is this in JavaScript it's a


2
00:00:02,580 --> 00:00:04,319
keyword that references another value


3
00:00:04,319 --> 00:00:06,359
usually an object that represents the


4
00:00:06,359 --> 00:00:08,849
current execution context okay but what


5
00:00:08,849 --> 00:00:10,920
the hell does execution context mean it


6
00:00:10,920 --> 00:00:12,540
either refers to your global environment


7
00:00:12,540 --> 00:00:15,089
like the browser or nodejs for when used


8
00:00:15,089 --> 00:00:16,800
inside a function it references the


9
00:00:16,800 --> 00:00:18,600
object calling that function at a given


10
00:00:18,600 --> 00:00:19,170
time


11
00:00:19,170 --> 00:00:20,939
open up the browser and run console like


12
00:00:20,939 --> 00:00:22,769
this you get the window object back


13
00:00:22,769 --> 00:00:24,510
because you're in the global execution


14
00:00:24,510 --> 00:00:26,400
context doing the same thing and nodejs


15
00:00:26,400 --> 00:00:27,750
from the command line gives you the


16
00:00:27,750 --> 00:00:29,460
global object back things get


17
00:00:29,460 --> 00:00:31,050
interesting when we talk about function


18
00:00:31,050 --> 00:00:32,820
context define a function and then


19
00:00:32,820 --> 00:00:34,559
console.log this inside the function


20
00:00:34,559 --> 00:00:36,210
body now if we run this function in the


21
00:00:36,210 --> 00:00:37,620
browser we'll still get the window


22
00:00:37,620 --> 00:00:39,450
object back that's because our global


23
00:00:39,450 --> 00:00:41,640
context is executing the function now


24
00:00:41,640 --> 00:00:43,620
let's take that same function and use it


25
00:00:43,620 --> 00:00:45,629
as a property on an object when we call


26
00:00:45,629 --> 00:00:46,980
the function on this object it


27
00:00:46,980 --> 00:00:49,680
references this object now sometimes you


28
00:00:49,680 --> 00:00:51,300
might have a function and an object


29
00:00:51,300 --> 00:00:52,739
defined separately you can tell the


30
00:00:52,739 --> 00:00:54,780
function to use some other object as its


31
00:00:54,780 --> 00:00:56,699
this value using the functions bind


32
00:00:56,699 --> 00:00:58,170
method the result is a new function


33
00:00:58,170 --> 00:01:00,329
where any references to this inside the


34
00:01:00,329 --> 00:01:02,219
function will point to the object that


35
00:01:02,219 --> 00:01:04,199
you pass as the argument here but where


36
00:01:04,199 --> 00:01:06,060
you'll see this used most often is in


37
00:01:06,060 --> 00:01:07,710
constructor functions using the new


38
00:01:07,710 --> 00:01:09,689
keyword the new keyword allows you to


39
00:01:09,689 --> 00:01:11,640
call a function that creates an object


40
00:01:11,640 --> 00:01:13,950
where this is automatically bound to


41
00:01:13,950 --> 00:01:15,930
that newly created object and that means


42
00:01:15,930 --> 00:01:17,250
you can create properties and methods


43
00:01:17,250 --> 00:01:19,290
like many other object-oriented


44
00:01:19,290 --> 00:01:21,509
programming languages for example we can


45
00:01:21,509 --> 00:01:23,729
define a property like this name then we


46
00:01:23,729 --> 00:01:25,770
can define a method like say hello and


47
00:01:25,770 --> 00:01:27,689
use this to reference the name property


48
00:01:27,689 --> 00:01:29,460
on this object and that gives us a


49
00:01:29,460 --> 00:01:31,200
convenient way to keep the data and


50
00:01:31,200 --> 00:01:32,909
functionality of an object tightly


51
00:01:32,909 --> 00:01:34,470
coupled together but there's a lot more


52
00:01:34,470 --> 00:01:36,180
to this than meets the eye so keep


53
00:01:36,180 --> 00:01:37,650
watching if you want to go beyond 100


54
00:01:37,650 --> 00:01:39,479
seconds and learn some more advanced and


55
00:01:39,479 --> 00:01:41,460
weird aspects of this but first make


56
00:01:41,460 --> 00:01:42,540
sure to hit the like button and


57
00:01:42,540 --> 00:01:46,860
subscribe


58
00:01:46,860 --> 00:01:49,290
oh hey there thanks for sticking around


59
00:01:49,290 --> 00:01:51,420
this is a special bonus segment where we


60
00:01:51,420 --> 00:01:53,160
can slow things down and take a deeper


61
00:01:53,160 --> 00:01:55,230
dive into JavaScript this which gives


62
00:01:55,230 --> 00:01:56,640
you plenty of rope to hang yourself with


63
00:01:56,640 --> 00:01:58,380
if you like this extra segment let me


64
00:01:58,380 --> 00:01:59,640
know in the comments because there's


65
00:01:59,640 --> 00:02:01,650
always room to go beyond 100 seconds


66
00:02:01,650 --> 00:02:03,030
over the next few minutes we'll look at


67
00:02:03,030 --> 00:02:05,070
some caveats of this look at the bind


68
00:02:05,070 --> 00:02:06,990
call and apply methods and look at some


69
00:02:06,990 --> 00:02:08,790
more practical examples of object


70
00:02:08,790 --> 00:02:10,470
oriented and functional programming


71
00:02:10,470 --> 00:02:12,780
patterns so when I'm writing JavaScript


72
00:02:12,780 --> 00:02:14,610
code and I see this I always try to ask


73
00:02:14,610 --> 00:02:17,250
myself what is this but unfortunately if


74
00:02:17,250 --> 00:02:18,870
the answer is not very clear because


75
00:02:18,870 --> 00:02:20,550
this in JavaScript works differently


76
00:02:20,550 --> 00:02:22,230
than a lot of other languages and it


77
00:02:22,230 --> 00:02:23,520
just seems completely weird if you're


78
00:02:23,520 --> 00:02:24,480
brand new to programming


79
00:02:24,480 --> 00:02:26,910
now here's caveat number one strict mode


80
00:02:26,910 --> 00:02:29,400
and non strict mode back in the earlier


81
00:02:29,400 --> 00:02:30,870
days of JavaScript there were certain


82
00:02:30,870 --> 00:02:32,490
features of the language that sucked


83
00:02:32,490 --> 00:02:34,709
and so with es5 they introduced strict


84
00:02:34,709 --> 00:02:36,300
mode to turn some of those features off


85
00:02:36,300 --> 00:02:38,040
for this video I'm going to assume that


86
00:02:38,040 --> 00:02:39,510
you're in strict mode if you're doing


87
00:02:39,510 --> 00:02:40,290
front-end development


88
00:02:40,290 --> 00:02:41,490
you're probably in strict mode without


89
00:02:41,490 --> 00:02:43,140
even realizing it but it's important to


90
00:02:43,140 --> 00:02:44,370
note that this behaves slightly


91
00:02:44,370 --> 00:02:46,140
different if you're not in strict mode


92
00:02:46,140 --> 00:02:47,880
one of the most important differences is


93
00:02:47,880 --> 00:02:49,500
that in strict mode if you call a


94
00:02:49,500 --> 00:02:51,840
function in the global context this will


95
00:02:51,840 --> 00:02:53,640
be undefined instead of referring to


96
00:02:53,640 --> 00:02:56,070
window or global and node this usually


97
00:02:56,070 --> 00:02:57,750
isn't a big deal because in most code


98
00:02:57,750 --> 00:02:59,610
you'll just reference window or global


99
00:02:59,610 --> 00:03:01,620
directly and not use this as a reference


100
00:03:01,620 --> 00:03:03,930
to those objects now that's one thing to


101
00:03:03,930 --> 00:03:05,459
keep in mind but I think the single most


102
00:03:05,459 --> 00:03:07,350
important caveat to understand what this


103
00:03:07,350 --> 00:03:09,450
is how it works with arrow functions as


104
00:03:09,450 --> 00:03:11,280
you can see here we have an object on


105
00:03:11,280 --> 00:03:12,989
the first object property we have a


106
00:03:12,989 --> 00:03:14,550
function defined with the function


107
00:03:14,550 --> 00:03:16,320
keyword it's the same example that I


108
00:03:16,320 --> 00:03:17,430
showed you at the beginning of this


109
00:03:17,430 --> 00:03:19,830
video this when called by the object


110
00:03:19,830 --> 00:03:21,570
references the object that called that


111
00:03:21,570 --> 00:03:23,220
function now if we write a second


112
00:03:23,220 --> 00:03:24,720
property and use an arrow function


113
00:03:24,720 --> 00:03:26,310
you'll notice this is now the global


114
00:03:26,310 --> 00:03:28,800
object or undefined in strict mode in an


115
00:03:28,800 --> 00:03:30,810
arrow function this is based on the


116
00:03:30,810 --> 00:03:32,910
enclosing objects execution context


117
00:03:32,910 --> 00:03:35,280
which in this example would be global in


118
00:03:35,280 --> 00:03:36,570
other words it doesn't have its own


119
00:03:36,570 --> 00:03:38,519
binding to this so it looks up to its


120
00:03:38,519 --> 00:03:40,470
parent and closing object and uses that


121
00:03:40,470 --> 00:03:42,510
this value if you've ever used a BAS


122
00:03:42,510 --> 00:03:44,100
you'll notice in the documentation they


123
00:03:44,100 --> 00:03:45,600
tell you to use a regular function


124
00:03:45,600 --> 00:03:47,430
keyword as opposed to an arrow function


125
00:03:47,430 --> 00:03:48,660
and that's because they're not really


126
00:03:48,660 --> 00:03:50,130
suitable for methods because of the way


127
00:03:50,130 --> 00:03:52,230
they interact with this so now that you


128
00:03:52,230 --> 00:03:53,670
know some of the caveats we're going to


129
00:03:53,670 --> 00:03:55,319
look at three prototype methods that


130
00:03:55,319 --> 00:03:57,930
live on a function object bind call and


131
00:03:57,930 --> 00:03:59,790
apply let's start by looking at bind


132
00:03:59,790 --> 00:04:00,270
because


133
00:04:00,270 --> 00:04:01,620
I think you'll come across this one most


134
00:04:01,620 --> 00:04:03,870
often let's imagine we have a function


135
00:04:03,870 --> 00:04:05,580
and an object and these things are


136
00:04:05,580 --> 00:04:07,320
immutable meaning we can't change them


137
00:04:07,320 --> 00:04:09,360
the function reference is this inside


138
00:04:09,360 --> 00:04:10,740
the body which in this case would be the


139
00:04:10,740 --> 00:04:12,810
global context but we wanted to use this


140
00:04:12,810 --> 00:04:15,690
other object as this we can create a new


141
00:04:15,690 --> 00:04:17,790
function that's bound to this object by


142
00:04:17,790 --> 00:04:19,470
calling bind on the original function


143
00:04:19,470 --> 00:04:21,450
and passing the object as the argument


144
00:04:21,450 --> 00:04:23,520
when we execute this function you'll


145
00:04:23,520 --> 00:04:25,230
notice that this now refers to the


146
00:04:25,230 --> 00:04:27,780
object we passed in so bind gives you a


147
00:04:27,780 --> 00:04:29,910
way to explicitly set this on a function


148
00:04:29,910 --> 00:04:31,800
now in other cases you might want to


149
00:04:31,800 --> 00:04:33,150
call a function with a different this


150
00:04:33,150 --> 00:04:35,130
context but not create a whole brand-new


151
00:04:35,130 --> 00:04:37,260
function and for that you can use call


152
00:04:37,260 --> 00:04:39,780
or apply in this example we use the call


153
00:04:39,780 --> 00:04:41,430
method on the function and the first


154
00:04:41,430 --> 00:04:43,590
argument to it is it's this context that


155
00:04:43,590 --> 00:04:45,090
you want to set this will call the


156
00:04:45,090 --> 00:04:46,620
function immediately and you can pass


157
00:04:46,620 --> 00:04:48,420
additional arguments to it as well for


158
00:04:48,420 --> 00:04:49,920
the arguments that go to that function


159
00:04:49,920 --> 00:04:52,650
and lastly I'll point out that you also


160
00:04:52,650 --> 00:04:54,510
have the apply method which is identical


161
00:04:54,510 --> 00:04:56,430
to call the only difference is that the


162
00:04:56,430 --> 00:04:58,350
second argument is an array of arguments


163
00:04:58,350 --> 00:05:00,420
a good way to remember the difference is


164
00:05:00,420 --> 00:05:03,270
to thank a for array or apply or C for


165
00:05:03,270 --> 00:05:05,790
comma or call call is more common in


166
00:05:05,790 --> 00:05:07,230
modern JavaScript because you can use


167
00:05:07,230 --> 00:05:09,120
the spread syntax on the arguments when


168
00:05:09,120 --> 00:05:10,710
you're working with an array but the


169
00:05:10,710 --> 00:05:12,090
bottom line is that they both serve the


170
00:05:12,090 --> 00:05:14,250
same purpose to call a function with an


171
00:05:14,250 --> 00:05:16,380
explicit this context now it's worth


172
00:05:16,380 --> 00:05:18,090
noting that you tend to encounter this


173
00:05:18,090 --> 00:05:19,980
much more often in classical


174
00:05:19,980 --> 00:05:21,510
object-oriented programming


175
00:05:21,510 --> 00:05:23,460
versus functional programming both of


176
00:05:23,460 --> 00:05:24,930
which are programming paradigms that you


177
00:05:24,930 --> 00:05:27,720
can use in JavaScript for example one of


178
00:05:27,720 --> 00:05:29,280
the big motivations of react to use


179
00:05:29,280 --> 00:05:30,990
functional components over class-based


180
00:05:30,990 --> 00:05:32,310
components was so that developers


181
00:05:32,310 --> 00:05:34,170
wouldn't have to use this in their code


182
00:05:34,170 --> 00:05:35,400
because it gets even more complicated


183
00:05:35,400 --> 00:05:37,050
when you have a big framework with a


184
00:05:37,050 --> 00:05:38,880
bunch of dependencies and components


185
00:05:38,880 --> 00:05:40,860
personally though I find this to be very


186
00:05:40,860 --> 00:05:42,180
straightforward when working with


187
00:05:42,180 --> 00:05:44,250
JavaScript constructor functions let's


188
00:05:44,250 --> 00:05:45,870
imagine we wanted to create a horse


189
00:05:45,870 --> 00:05:47,370
class when this function is called with


190
00:05:47,370 --> 00:05:49,500
a new keyword it creates a new object so


191
00:05:49,500 --> 00:05:51,120
we can create methods and properties on


192
00:05:51,120 --> 00:05:52,980
those objects by making a reference to


193
00:05:52,980 --> 00:05:54,780
this so this works much more like a


194
00:05:54,780 --> 00:05:56,700
class definition in other languages like


195
00:05:56,700 --> 00:05:59,160
Java Ruby Python and so on and


196
00:05:59,160 --> 00:06:01,200
JavaScript actually provides syntactic


197
00:06:01,200 --> 00:06:02,970
sugar for this whole process using the


198
00:06:02,970 --> 00:06:04,650
class keyword but we'll save that one


199
00:06:04,650 --> 00:06:07,110
for a future 100 second video because


200
00:06:07,110 --> 00:06:08,280
there's one more important thing that


201
00:06:08,280 --> 00:06:09,720
you should know about this and that's a


202
00:06:09,720 --> 00:06:11,370
thing called method chaining you'll see


203
00:06:11,370 --> 00:06:13,050
a lot of JavaScript libraries that allow


204
00:06:13,050 --> 00:06:14,040
you to chain method


205
00:06:14,040 --> 00:06:15,600
together like this always keeping a


206
00:06:15,600 --> 00:06:17,670
reference to the original object so how


207
00:06:17,670 --> 00:06:18,720
do you change methods together in


208
00:06:18,720 --> 00:06:20,550
JavaScript well you simply return this


209
00:06:20,550 --> 00:06:22,170
from your method and now you can chain


210
00:06:22,170 --> 00:06:23,790
together an infinite number of method


211
00:06:23,790 --> 00:06:25,380
calls thanks for sticking around to go


212
00:06:25,380 --> 00:06:27,180
beyond 100 seconds I hope you learned


213
00:06:27,180 --> 00:06:29,070
something and I will see you in the next


214
00:06:29,070 --> 00:06:30,950
one


215
00:06:30,950 --> 00:06:39,129
[Music]


