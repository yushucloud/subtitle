1
00:00:00.320 --> 00:00:04.471
docker 一个可以将软件打包

2
00:00:02.231 --> 00:00:06.655
到可以在任何环境中可靠运行的容器中的工具，

3
00:00:04.471 --> 00:00:07.791
但是什么是容器以及

4
00:00:06.655 --> 00:00:09.943
为什么需要容器让我们假设您

5
00:00:07.791 --> 00:00:11.111
使用钴构建了一个应用程序，该应用程序可以在

6
00:00:09.943 --> 00:00:12.124
某种奇怪的 linux 上运行，您想

7
00:00:11.111 --> 00:00:14.140
与您的人共享这个应用程序 朋友，但他

8
00:00:12.124 --> 00:00:15.157
有一个完全不同的系统，所以

9
00:00:14.140 --> 00:00:17.175
问题变成了我们如何

10
00:00:15.157 --> 00:00:19.190
在任何机器上复制我们的软件所需的环境

11
00:00:17.175 --> 00:00:20.203
打包应用程序的一种方法是

12
00:00:19.190 --> 00:00:22.219
使用虚拟

13
00:00:20.203 --> 00:00:24.241
机模拟硬件，然后

14
00:00:22.219 --> 00:00:25.258
安装所需的操作系统和依赖项，

15
00:00:24.241 --> 00:00:27.278
这允许 我们在同一个基础设施上运行多个应用程序，

16
00:00:25.258 --> 00:00:28.286
但是因为

17
00:00:27.278 --> 00:00:30.304
每个 vm

18
00:00:28.286 --> 00:00:32.320
都运行自己的操作系统，所以它们

19
00:00:30.304 --> 00:00:34.340
往往体积庞大且速度慢

20
00:00:40.402 --> 00:00:44.439
或者换句话说，所有应用程序或容器

21
00:00:42.425 --> 00:00:45.457
都由单个内核运行

22
00:00:44.439 --> 00:00:47.473
，这使得几乎所有东西都更快

23
00:00:45.457 --> 00:00:49.489
、更高效 re 是 docker

24
00:00:47.473 --> 00:00:49.496
宇宙中的三个基本元素

25
00:00:49.496 --> 00:00:54.544
docker 文件 镜像和

26
00:00:51.517 --> 00:00:56.568
容器 docker 文件就像 dna

27
00:00:54.544 --> 00:00:58.585
它只是告诉 docker 如何

28
00:00:56.568 --> 00:01:00.600
构建镜像的代码，它本身就是

29
00:00:58.585 --> 00:01:01.616
你的软件的快照

30
00:01:00.600 --> 00:01:03.636
以及它的所有依赖项

31
00:01:01.616 --> 00:01:05.656
对于操作系统级别，该映像

32
00:01:03.636 --> 00:01:07.671
是不可变的，它可用于

33
00:01:05.656 --> 00:01:08.687
启动多个容器，这是您

34
00:01:07.671 --> 00:01:09.692
在现实世界中运行的实际软件

35
00:01:09.692 --> 00:01:13.729
创建一个 docker 文件并使用 from

36
00:01:11.712 --> 00:01:15.750
从现有模板（如

37
00:01:13.729 --> 00:01:15.757
ubuntu）开始，此基础映像被拉下

38
00:01:15.750 --> 00:01:17.775
从云中

39
00:01:15.757 --> 00:01:19.789
，您还可以从那里将自己的图像上传

40
00:01:17.775 --> 00:01:19.796
到各种不同的 docker

41
00:01:19.789 --> 00:01:21.813
注册表

42
00:01:19.796 --> 00:01:23.829
，您可能希望使用 run 来

43
00:01:21.813 --> 00:01:24.843
运行将依赖项安装到图像中的终端命令，然后

44
00:01:24.843 --> 00:01:27.875
您可以设置环境变量并执行

45
00:01:26.860 --> 00:01:29.892
各种其他操作 你要做的最后一

46
00:01:27.875 --> 00:01:30.907
件事是设置一个

47
00:01:29.892 --> 00:01:31.913
在启动容器时执行的默认命令

48
00:01:31.913 --> 00:01:34.947
，现在我们可以通过运行 do 创建图像文件

49
00:01:33.931 --> 00:01:36.962
cker build 命令

50
00:01:34.947 --> 00:01:38.985
它通过我们的 docker

51
00:01:36.962 --> 00:01:40.100
文件中的每个步骤逐层构建映像，

52
00:01:38.985 --> 00:01:42.102
然后我们可以使用 docker run 命令将该映像作为容器赋予生命，

53
00:01:42.102 --> 00:01:46.106
因为您的应用程序需要更多资源，您

54
00:01:44.104 --> 00:01:47.107
可以在多台机器上运行它多个

55
00:01:46.106 --> 00:01:49.109
云

56
00:01:51.111 --> 00:01:54.114
如果您喜欢它，请确保喜欢并

57
00:01:52.112 --> 00:01:56.116
订阅并继续关注更多 docker

58
00:01:54.114 --> 00:01:58.118
内容即将进入此频道，

59
00:01:56.116 --> 00:02:08.128
感谢您的收看，我将

60
00:01:58.118 --> 00:02:08.128
在下一个中看到您
