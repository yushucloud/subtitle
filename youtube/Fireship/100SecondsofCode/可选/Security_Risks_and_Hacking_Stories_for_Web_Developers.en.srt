1
00:00:00,000 --> 00:00:00,210
[Music]


2
00:00:00,210 --> 00:00:01,860
if debugging is the process of removing


3
00:00:01,860 --> 00:00:03,750
software bugs then programming must be


4
00:00:03,750 --> 00:00:05,759
the process of putting them in in most


5
00:00:05,759 --> 00:00:07,830
cases the bugs we introduce are harmless


6
00:00:07,830 --> 00:00:09,750
but sometimes they can cause us to lose


7
00:00:09,750 --> 00:00:11,400
hundreds of millions of dollars in a few


8
00:00:11,400 --> 00:00:12,840
minutes crash airplanes and spaceships


9
00:00:12,840 --> 00:00:14,190
and kill people


10
00:00:14,190 --> 00:00:15,570
today I want to tell you some stories


11
00:00:15,570 --> 00:00:17,460
about the most damaging hacks and bugs


12
00:00:17,460 --> 00:00:19,230
throughout history and explain seven


13
00:00:19,230 --> 00:00:21,060
software security concepts that every


14
00:00:21,060 --> 00:00:22,619
developer should know if you're new here


15
00:00:22,619 --> 00:00:24,150
like and subscribe and check out the


16
00:00:24,150 --> 00:00:26,789
full write-up on bioship i/o there are


17
00:00:26,789 --> 00:00:28,470
billions upon billions of lines of code


18
00:00:28,470 --> 00:00:30,359
in production today around 50 million


19
00:00:30,359 --> 00:00:32,669
lines for Microsoft Windows and over 2


20
00:00:32,669 --> 00:00:34,290
billion lines across all Google services


21
00:00:34,290 --> 00:00:36,239
and within all this code we have


22
00:00:36,239 --> 00:00:37,800
vulnerabilities that have either not yet


23
00:00:37,800 --> 00:00:39,750
been discovered or not yet been fixed


24
00:00:39,750 --> 00:00:41,250
these are known as zero-day


25
00:00:41,250 --> 00:00:43,050
vulnerabilities because as a developer


26
00:00:43,050 --> 00:00:45,539
you have zero days to get it fixed when


27
00:00:45,539 --> 00:00:46,800
a hacker decides to attack this


28
00:00:46,800 --> 00:00:48,170
vulnerability it's known as a zero-day


29
00:00:48,170 --> 00:00:50,579
exploit remember that one time Equifax


30
00:00:50,579 --> 00:00:52,440
had exposed the credit reports of a


31
00:00:52,440 --> 00:00:54,120
hundred and fifty million people that


32
00:00:54,120 --> 00:00:55,829
wasn't the result of a zero-day exploit


33
00:00:55,829 --> 00:00:57,420
it was the result of a known bug and


34
00:00:57,420 --> 00:00:58,770
Apache struts that had already been


35
00:00:58,770 --> 00:01:03,149
fixed weeks ago what sorry guys hackers


36
00:01:03,149 --> 00:01:04,890
apparently from China had been scanning


37
00:01:04,890 --> 00:01:06,299
the web for servers with this


38
00:01:06,299 --> 00:01:07,740
vulnerability they hit the mother lode


39
00:01:07,740 --> 00:01:09,689
with Equifax and extracted sensitive


40
00:01:09,689 --> 00:01:12,240
information over the next 76 days this


41
00:01:12,240 --> 00:01:13,799
breach has cost the company over a


42
00:01:13,799 --> 00:01:15,030
billion dollars and could have been


43
00:01:15,030 --> 00:01:16,560
prevented by installing a simple


44
00:01:16,560 --> 00:01:18,540
security patch being hacked by a known


45
00:01:18,540 --> 00:01:20,580
vulnerability is not uncommon at all in


46
00:01:20,580 --> 00:01:22,409
fact you're likely shipping code with a


47
00:01:22,409 --> 00:01:24,030
lot of known vulnerabilities right now


48
00:01:24,030 --> 00:01:26,070
if you're a j/s developer go into your


49
00:01:26,070 --> 00:01:28,290
project and hit NPM audit it will give


50
00:01:28,290 --> 00:01:29,579
you a breakdown of all the different


51
00:01:29,579 --> 00:01:31,140
ways you can be hacked via your open


52
00:01:31,140 --> 00:01:32,880
source dependencies now there's no


53
00:01:32,880 --> 00:01:34,560
reason to panic if you have hundreds of


54
00:01:34,560 --> 00:01:36,210
high severity alerts the best way to


55
00:01:36,210 --> 00:01:38,369
avoid being hacked is to simply update


56
00:01:38,369 --> 00:01:40,229
your packages but if you truly want to


57
00:01:40,229 --> 00:01:41,549
understand the flaws that are


58
00:01:41,549 --> 00:01:43,320
compromising these packages you should


59
00:01:43,320 --> 00:01:44,850
enroll in the enterprise security course


60
00:01:44,850 --> 00:01:46,710
from angular Academy it's a ten week


61
00:01:46,710 --> 00:01:48,240
long program that will teach you how to


62
00:01:48,240 --> 00:01:49,799
confidently build secure web


63
00:01:49,799 --> 00:01:51,570
applications you'll find the link in the


64
00:01:51,570 --> 00:01:53,130
description and you can use this code to


65
00:01:53,130 --> 00:01:55,770
take $50 off the enrollment price using


66
00:01:55,770 --> 00:01:57,450
components with known vulnerabilities is


67
00:01:57,450 --> 00:01:59,100
one of the most common ways that web


68
00:01:59,100 --> 00:02:00,840
applications get hacked but it's also


69
00:02:00,840 --> 00:02:02,520
very preventable because as you can see


70
00:02:02,520 --> 00:02:04,170
here most of the issues have already


71
00:02:04,170 --> 00:02:06,090
been patched and keep in mind this issue


72
00:02:06,090 --> 00:02:08,399
isn't unique to JavaScript or NPM all


73
00:02:08,399 --> 00:02:09,989
package managers that rely on open


74
00:02:09,989 --> 00:02:12,130
source code face similar issues


75
00:02:12,130 --> 00:02:14,020
so trust nobody and keep your packages


76
00:02:14,020 --> 00:02:16,510
updated but most of all Sammy is my peer


77
00:02:16,510 --> 00:02:19,270
oh wait a second I didn't mean to say


78
00:02:19,270 --> 00:02:21,130
that last part it was somehow injected


79
00:02:21,130 --> 00:02:23,740
into this video back in 2005 a guy named


80
00:02:23,740 --> 00:02:25,330
Sammy used an exploit known as


81
00:02:25,330 --> 00:02:27,310
cross-site scripting to updated users


82
00:02:27,310 --> 00:02:29,560
myspace profile with this text within a


83
00:02:29,560 --> 00:02:31,120
day it had spread to over a million


84
00:02:31,120 --> 00:02:31,720
users


85
00:02:31,720 --> 00:02:33,340
it was mostly harmless but they did a


86
00:02:33,340 --> 00:02:34,990
rest Sammy can victim of a felony and


87
00:02:34,990 --> 00:02:37,120
worst of all took away his internet for


88
00:02:37,120 --> 00:02:39,280
a year a cross-site scripting exploit


89
00:02:39,280 --> 00:02:41,320
occurs when the attacker manages to run


90
00:02:41,320 --> 00:02:43,000
some JavaScript code on a different


91
00:02:43,000 --> 00:02:45,130
users browser there are a few different


92
00:02:45,130 --> 00:02:46,840
ways to achieve this but the most common


93
00:02:46,840 --> 00:02:48,730
way is for the attacker to save the


94
00:02:48,730 --> 00:02:50,650
script in a web applications database


95
00:02:50,650 --> 00:02:52,390
the malicious script will then be


96
00:02:52,390 --> 00:02:54,130
accessed by a different user that will


97
00:02:54,130 --> 00:02:55,810
execute the JavaScript on the client


98
00:02:55,810 --> 00:02:57,700
side device and at that point the


99
00:02:57,700 --> 00:02:59,500
JavaScript code can submit forms click


100
00:02:59,500 --> 00:03:01,420
on buttons on behalf of the logged in


101
00:03:01,420 --> 00:03:03,490
user so how do you avoid cross-site


102
00:03:03,490 --> 00:03:05,110
scripting attacks as a developer


103
00:03:05,110 --> 00:03:07,030
well the attacker first needs to save


104
00:03:07,030 --> 00:03:09,100
some malicious code on your server so


105
00:03:09,100 --> 00:03:10,840
step one is to do some server-side


106
00:03:10,840 --> 00:03:13,150
validation of incoming data if it's


107
00:03:13,150 --> 00:03:14,890
surrounded by script tags you might not


108
00:03:14,890 --> 00:03:16,450
want to save it but let's imagine you


109
00:03:16,450 --> 00:03:18,910
fail to sanitize the incoming data the


110
00:03:18,910 --> 00:03:20,620
attacker still needs a way to run that


111
00:03:20,620 --> 00:03:22,630
script on the client-side device so the


112
00:03:22,630 --> 00:03:24,490
attacker is counting on you to render


113
00:03:24,490 --> 00:03:26,470
out the raw HTML of the script


114
00:03:26,470 --> 00:03:28,240
fortunately modern front-end frameworks


115
00:03:28,240 --> 00:03:29,770
make it really difficult to shoot


116
00:03:29,770 --> 00:03:31,450
yourself in the foot in react for


117
00:03:31,450 --> 00:03:33,490
example if you want to write unsafe code


118
00:03:33,490 --> 00:03:35,380
you have to use this dangerously set


119
00:03:35,380 --> 00:03:37,540
inner HTML prop just to do so


120
00:03:37,540 --> 00:03:39,460
so with cross-site scripting we have


121
00:03:39,460 --> 00:03:40,780
malicious code running on the browser


122
00:03:40,780 --> 00:03:43,209
but it's also possible to run bad code


123
00:03:43,209 --> 00:03:45,790
directly on a database let's go back to


124
00:03:45,790 --> 00:03:47,560
2008 and look at a company named


125
00:03:47,560 --> 00:03:49,630
Heartland Payment Systems a company with


126
00:03:49,630 --> 00:03:51,100
the highest standards and the most


127
00:03:51,100 --> 00:03:53,560
trusted transactions and also a company


128
00:03:53,560 --> 00:03:54,850
if that was the target of one of the


129
00:03:54,850 --> 00:03:56,680
most elaborate and interesting hacks of


130
00:03:56,680 --> 00:03:58,720
all time the attackers first gained


131
00:03:58,720 --> 00:04:00,820
access to the company's databases by


132
00:04:00,820 --> 00:04:03,370
using a technique known as SQL injection


133
00:04:03,370 --> 00:04:05,230
instead of sending the expected data to


134
00:04:05,230 --> 00:04:05,860
the database


135
00:04:05,860 --> 00:04:08,470
they sent raw SQL statements and because


136
00:04:08,470 --> 00:04:10,270
the data was not validated the database


137
00:04:10,270 --> 00:04:11,860
would run this code as if it came from


138
00:04:11,860 --> 00:04:13,630
the developers now this particular


139
00:04:13,630 --> 00:04:15,459
database contain the information that


140
00:04:15,459 --> 00:04:16,870
you would find on the back of a magnetic


141
00:04:16,870 --> 00:04:18,850
strip on a credit card and they use this


142
00:04:18,850 --> 00:04:20,560
stolen data to create counterfeit credit


143
00:04:20,560 --> 00:04:22,330
cards that actually worked it's


144
00:04:22,330 --> 00:04:23,830
estimated that over a hundred million


145
00:04:23,830 --> 00:04:25,270
cards were compromised and


146
00:04:25,270 --> 00:04:27,639
hacker Albert Gonzalez was sentenced to


147
00:04:27,639 --> 00:04:28,780
20 years in prison


148
00:04:28,780 --> 00:04:31,000
injection attacks similar to this effect


149
00:04:31,000 --> 00:04:33,190
many different types of databases if you


150
00:04:33,190 --> 00:04:35,169
use an ORM or object relational mapping


151
00:04:35,169 --> 00:04:37,000
tool for your database you should be


152
00:04:37,000 --> 00:04:38,560
safe from attacks like this but of


153
00:04:38,560 --> 00:04:39,819
course it's always a good idea to


154
00:04:39,819 --> 00:04:41,650
validate your input before it's sent to


155
00:04:41,650 --> 00:04:43,930
your database another very easy way to


156
00:04:43,930 --> 00:04:45,849
create a big problem as a developer is


157
00:04:45,849 --> 00:04:48,580
to expose or leak a sensitive API key


158
00:04:48,580 --> 00:04:50,919
you can think of a private API key as a


159
00:04:50,919 --> 00:04:52,750
username and password and all bundled up


160
00:04:52,750 --> 00:04:54,759
into a single string and it allows your


161
00:04:54,759 --> 00:04:56,500
servers to securely communicate with


162
00:04:56,500 --> 00:04:59,139
paid services like AWS Google cloud and


163
00:04:59,139 --> 00:05:01,599
so on a few years ago I accidentally


164
00:05:01,599 --> 00:05:04,270
leaked my AWS API key and it was almost


165
00:05:04,270 --> 00:05:06,970
really bad I was using the node SDK for


166
00:05:06,970 --> 00:05:09,009
a service that required the API key I


167
00:05:09,009 --> 00:05:11,020
hard-coded the API key directly in a


168
00:05:11,020 --> 00:05:12,729
source code instead of setting it as an


169
00:05:12,729 --> 00:05:14,860
environment variable I then proceeded to


170
00:05:14,860 --> 00:05:16,990
push the source code to a public github


171
00:05:16,990 --> 00:05:22,090
repo a few weeks went by and then all of


172
00:05:22,090 --> 00:05:23,860
a sudden I get a notification from AWS


173
00:05:23,860 --> 00:05:26,139
that I've maxed out my budget when I


174
00:05:26,139 --> 00:05:28,240
logged into my AWS account I had racked


175
00:05:28,240 --> 00:05:30,819
up charges around $5,000 for ec2


176
00:05:30,819 --> 00:05:32,500
instances running all over the world


177
00:05:32,500 --> 00:05:34,509
luckily Amazon was nice enough to refund


178
00:05:34,509 --> 00:05:36,130
those charges but it definitely made me


179
00:05:36,130 --> 00:05:36,880
feel like an idiot


180
00:05:36,880 --> 00:05:39,219
nowadays automatic scanners can often


181
00:05:39,219 --> 00:05:41,139
detect if you have an exposed API key


182
00:05:41,139 --> 00:05:43,930
and email you a notification but github


183
00:05:43,930 --> 00:05:45,430
isn't the only place that you might leak


184
00:05:45,430 --> 00:05:47,259
an API key when you include a private


185
00:05:47,259 --> 00:05:49,270
key in a client-side web or mobile app a


186
00:05:49,270 --> 00:05:51,279
hacker might be able to find it directly


187
00:05:51,279 --> 00:05:53,319
in your source code now if you do end up


188
00:05:53,319 --> 00:05:55,270
with an exposed API key you can fix the


189
00:05:55,270 --> 00:05:57,130
problem by simply rolling it to a new


190
00:05:57,130 --> 00:05:59,199
value and of course we're moving it from


191
00:05:59,199 --> 00:06:01,779
any public repos or source code many


192
00:06:01,779 --> 00:06:03,520
good API s will help you minimize the


193
00:06:03,520 --> 00:06:05,020
damage by allowing you to assign


194
00:06:05,020 --> 00:06:07,539
privileges to a specific API key this


195
00:06:07,539 --> 00:06:09,159
allows you to follow the principle of


196
00:06:09,159 --> 00:06:11,199
least privilege and only give API keys


197
00:06:11,199 --> 00:06:12,849
access to the resources that they


198
00:06:12,849 --> 00:06:14,380
actually need that will mitigate the


199
00:06:14,380 --> 00:06:15,729
amount of damage that can be done if


200
00:06:15,729 --> 00:06:17,949
that key does end up being leaked if we


201
00:06:17,949 --> 00:06:19,810
look at a major cloud provider like AWS


202
00:06:19,810 --> 00:06:21,520
will see that they offer hundreds of


203
00:06:21,520 --> 00:06:23,110
different services and they might be


204
00:06:23,110 --> 00:06:24,639
used by a company with thousands of


205
00:06:24,639 --> 00:06:26,560
employees working on different projects


206
00:06:26,560 --> 00:06:29,110
sharing a single API key that has access


207
00:06:29,110 --> 00:06:30,940
to everything would be a very bad idea


208
00:06:30,940 --> 00:06:33,159
instead the major cloud providers have a


209
00:06:33,159 --> 00:06:35,199
system called i.m which allows you to


210
00:06:35,199 --> 00:06:36,699
create groups or roles for your


211
00:06:36,699 --> 00:06:39,070
organization once you've created a role


212
00:06:39,070 --> 00:06:40,900
can attach a policy to that role to give


213
00:06:40,900 --> 00:06:42,960
it access to a service that it needs


214
00:06:42,960 --> 00:06:45,220
implementing fine-grained access control


215
00:06:45,220 --> 00:06:46,780
over your data is more important than


216
00:06:46,780 --> 00:06:49,540
ever in 2016 an employee of Morrison's


217
00:06:49,540 --> 00:06:51,940
supermarkets in the UK stole the private


218
00:06:51,940 --> 00:06:54,340
data of over 100,000 employees this


219
00:06:54,340 --> 00:06:56,290
rogue employee did it by simply copying


220
00:06:56,290 --> 00:06:59,110
the data onto a USB stick now this is


221
00:06:59,110 --> 00:07:01,000
obviously unethical and illegal on the


222
00:07:01,000 --> 00:07:03,160
employees part but the company itself is


223
00:07:03,160 --> 00:07:05,350
facing a huge lawsuit and the penalties


224
00:07:05,350 --> 00:07:07,000
for data breaches are becoming larger


225
00:07:07,000 --> 00:07:09,730
with laws like GDP are in the EU so the


226
00:07:09,730 --> 00:07:11,440
bottom line here is to always follow the


227
00:07:11,440 --> 00:07:12,640
principle of least privilege when it


228
00:07:12,640 --> 00:07:14,470
comes to accessing your customer or


229
00:07:14,470 --> 00:07:16,720
employee data in speaking of data you


230
00:07:16,720 --> 00:07:17,950
might come across something called the


231
00:07:17,950 --> 00:07:20,740
CIA triad it's a model for data security


232
00:07:20,740 --> 00:07:22,000
that stands for confidentiality


233
00:07:22,000 --> 00:07:24,100
integrity and availability


234
00:07:24,100 --> 00:07:25,840
generally speaking you make data


235
00:07:25,840 --> 00:07:27,460
confidential by implementing user


236
00:07:27,460 --> 00:07:29,620
authentication so only authorized users


237
00:07:29,620 --> 00:07:32,110
can access the data integrity it means


238
00:07:32,110 --> 00:07:33,820
the data can't be accidentally modified


239
00:07:33,820 --> 00:07:35,350
or deleted without the users


240
00:07:35,350 --> 00:07:36,940
authorization but I think the most


241
00:07:36,940 --> 00:07:38,620
interesting question is how do you make


242
00:07:38,620 --> 00:07:41,080
your data highly available in 2018


243
00:07:41,080 --> 00:07:43,600
github survive the biggest DDoS attack


244
00:07:43,600 --> 00:07:45,280
or a distributed denial of service


245
00:07:45,280 --> 00:07:46,210
attack in history


246
00:07:46,210 --> 00:07:48,400
it took github down for less than 10


247
00:07:48,400 --> 00:07:49,870
minutes but that's still a pretty big


248
00:07:49,870 --> 00:07:51,310
deal considering how many people around


249
00:07:51,310 --> 00:07:53,170
the world depend on github at any given


250
00:07:53,170 --> 00:07:55,750
moment a DDoS attack works by flooding a


251
00:07:55,750 --> 00:07:57,460
service with so much traffic that it


252
00:07:57,460 --> 00:07:59,500
just fails to scale and completely stops


253
00:07:59,500 --> 00:08:01,390
working you can see in this chart how


254
00:08:01,390 --> 00:08:03,460
the inbound traffic suddenly spiked but


255
00:08:03,460 --> 00:08:05,020
the server's treated these as legitimate


256
00:08:05,020 --> 00:08:06,850
requests and responded with a normal


257
00:08:06,850 --> 00:08:09,190
response github is big enough to handle


258
00:08:09,190 --> 00:08:10,870
attacks like this but smaller sites


259
00:08:10,870 --> 00:08:13,600
might not be so lucky in some cases DDoS


260
00:08:13,600 --> 00:08:14,950
attacks have been used to shut down a


261
00:08:14,950 --> 00:08:16,900
service and then request a ransom from


262
00:08:16,900 --> 00:08:18,550
the owner so how do you protect yourself


263
00:08:18,550 --> 00:08:21,070
well the simple answer is to be ready to


264
00:08:21,070 --> 00:08:23,050
scale and that likely means using a big


265
00:08:23,050 --> 00:08:25,090
cloud provider a service like Google


266
00:08:25,090 --> 00:08:26,530
cloud armor has the bandwidth to handle


267
00:08:26,530 --> 00:08:28,210
attacks like this and it can also


268
00:08:28,210 --> 00:08:29,590
prevent many other attacks that we


269
00:08:29,590 --> 00:08:31,390
talked about earlier in the video but at


270
00:08:31,390 --> 00:08:32,950
the end of the day nobody's application


271
00:08:32,950 --> 00:08:35,260
is 100% safe there are likely hackers


272
00:08:35,260 --> 00:08:36,760
out there right now using zero-day


273
00:08:36,760 --> 00:08:38,349
exploits that we don't know about yet


274
00:08:38,349 --> 00:08:39,940
and it's only a matter of time before


275
00:08:39,940 --> 00:08:41,500
the next major data breach is in the


276
00:08:41,500 --> 00:08:43,120
headlines if this video helped you


277
00:08:43,120 --> 00:08:44,770
please like and subscribe and make sure


278
00:08:44,770 --> 00:08:46,000
to check out the enterprise security


279
00:08:46,000 --> 00:08:47,830
course if you really want to master


280
00:08:47,830 --> 00:08:49,990
these concepts thanks for watching and I


281
00:08:49,990 --> 00:08:50,390
will


282
00:08:50,390 --> 00:08:53,040
talk to you soon


283
00:08:53,040 --> 00:09:01,210
[Music]


