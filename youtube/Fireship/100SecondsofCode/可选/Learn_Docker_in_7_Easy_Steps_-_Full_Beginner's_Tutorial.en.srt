1
00:00:00,080 --> 00:00:01,680
one of the leading causes of imposter


2
00:00:01,680 --> 00:00:03,760
syndrome among developers is not knowing


3
00:00:03,760 --> 00:00:05,440
docker it makes it hard to go to parties


4
00:00:05,440 --> 00:00:06,480
where everybody's talking about


5
00:00:06,480 --> 00:00:07,440
kubernetes


6
00:00:07,440 --> 00:00:09,440
swarms shuffle sharding while you hide


7
00:00:09,440 --> 00:00:10,800
in the corner googling what is a


8
00:00:10,800 --> 00:00:12,160
container we've all been there at one


9
00:00:12,160 --> 00:00:12,960
point or another


10
00:00:12,960 --> 00:00:14,400
in today's video you'll learn everything


11
00:00:14,400 --> 00:00:16,000
you need to know about docker to survive


12
00:00:16,000 --> 00:00:17,680
as a developer in 2020


13
00:00:17,680 --> 00:00:19,119
we'll take a hands-on approach by


14
00:00:19,119 --> 00:00:21,199
containerizing a node.js application


15
00:00:21,199 --> 00:00:22,320
i'll assume you've never touched a


16
00:00:22,320 --> 00:00:23,920
docker container before so we'll go


17
00:00:23,920 --> 00:00:25,439
through installation and tooling


18
00:00:25,439 --> 00:00:26,560
as well as the most important


19
00:00:26,560 --> 00:00:28,640
instructions in a dockerfile in addition


20
00:00:28,640 --> 00:00:30,080
we'll look at very important advanced


21
00:00:30,080 --> 00:00:31,760
concepts like port forwarding


22
00:00:31,760 --> 00:00:33,600
volumes and how to manage multiple


23
00:00:33,600 --> 00:00:35,360
containers with docker compose


24
00:00:35,360 --> 00:00:37,280
we'll do everything step by step so feel


25
00:00:37,280 --> 00:00:39,040
free to skip ahead with the chapters in


26
00:00:39,040 --> 00:00:40,399
the video description


27
00:00:40,399 --> 00:00:42,000
what is docker from a practical


28
00:00:42,000 --> 00:00:43,840
standpoint it's just a way to package


29
00:00:43,840 --> 00:00:46,239
software so it can run on any hardware


30
00:00:46,239 --> 00:00:47,680
now in order to understand how that


31
00:00:47,680 --> 00:00:49,200
process works there are three things


32
00:00:49,200 --> 00:00:50,879
that you absolutely must know


33
00:00:50,879 --> 00:00:53,680
docker files images and containers a


34
00:00:53,680 --> 00:00:55,840
docker file is a blueprint for building


35
00:00:55,840 --> 00:00:56,879
a docker image


36
00:00:56,879 --> 00:00:59,120
a docker image is a template for running


37
00:00:59,120 --> 00:01:00,160
docker containers


38
00:01:00,160 --> 00:01:02,719
a container is just a running process in


39
00:01:02,719 --> 00:01:04,559
our case we have a node application we


40
00:01:04,559 --> 00:01:05,840
need to have a server that's running the


41
00:01:05,840 --> 00:01:07,760
same version of node and that has also


42
00:01:07,760 --> 00:01:09,280
installed these dependencies


43
00:01:09,280 --> 00:01:10,880
it works on my machine but if someone


44
00:01:10,880 --> 00:01:12,159
else with a different machine tries to


45
00:01:12,159 --> 00:01:13,600
run it with a different version of node


46
00:01:13,600 --> 00:01:14,479
it might break


47
00:01:14,479 --> 00:01:16,240
the whole point of docker is to solve


48
00:01:16,240 --> 00:01:18,080
problems like this by reproducing


49
00:01:18,080 --> 00:01:19,759
environments the developer who creates


50
00:01:19,759 --> 00:01:21,439
the software can define the environment


51
00:01:21,439 --> 00:01:22,720
with a docker file


52
00:01:22,720 --> 00:01:24,479
then any developer at that point can use


53
00:01:24,479 --> 00:01:26,000
the docker file to rebuild the


54
00:01:26,000 --> 00:01:27,520
environment which is saved as an


55
00:01:27,520 --> 00:01:29,680
immutable snapshot known as an image


56
00:01:29,680 --> 00:01:31,360
images can be uploaded to the cloud in


57
00:01:31,360 --> 00:01:33,280
both public and private registries


58
00:01:33,280 --> 00:01:35,360
then any developer or server that wants


59
00:01:35,360 --> 00:01:36,640
to run that software


60
00:01:36,640 --> 00:01:38,320
can pull the image down to create a


61
00:01:38,320 --> 00:01:40,000
container which is just a running


62
00:01:40,000 --> 00:01:42,479
process of that image in other words one


63
00:01:42,479 --> 00:01:44,320
image file can be used to spawn the same


64
00:01:44,320 --> 00:01:46,240
process multiple times in multiple


65
00:01:46,240 --> 00:01:46,960
places


66
00:01:46,960 --> 00:01:48,399
and it's at that point where tools like


67
00:01:48,399 --> 00:01:50,320
kubernetes and swarm come into play


68
00:01:50,320 --> 00:01:51,920
to scale containers to an infinite


69
00:01:51,920 --> 00:01:53,840
workload the best way to really learn


70
00:01:53,840 --> 00:01:54,399
docker


71
00:01:54,399 --> 00:01:56,399
is to use it and to use it we need to


72
00:01:56,399 --> 00:01:58,320
install it if you're on mac or windows i


73
00:01:58,320 --> 00:01:59,840
would highly recommend installing the


74
00:01:59,840 --> 00:02:01,759
docker desktop application it installs


75
00:02:01,759 --> 00:02:03,200
everything you need for the command line


76
00:02:03,200 --> 00:02:04,719
and also gives you a gui where you can


77
00:02:04,719 --> 00:02:06,240
inspect your running containers


78
00:02:06,240 --> 00:02:07,920
once installed you should have access to


79
00:02:07,920 --> 00:02:09,599
docker from the command line and here's


80
00:02:09,599 --> 00:02:11,200
the first command you should memorize


81
00:02:11,200 --> 00:02:13,440
docker which gives you a list of all the


82
00:02:13,440 --> 00:02:14,959
running containers on your system


83
00:02:14,959 --> 00:02:16,480
you'll notice how every container has a


84
00:02:16,480 --> 00:02:19,200
unique id and is also linked to an image


85
00:02:19,200 --> 00:02:20,560
and keep in mind you can find the same


86
00:02:20,560 --> 00:02:22,400
information from the gui as well now the


87
00:02:22,400 --> 00:02:23,760
other thing you'll want to install is


88
00:02:23,760 --> 00:02:26,080
the docker extension for vs code or for


89
00:02:26,080 --> 00:02:26,959
your ide


90
00:02:26,959 --> 00:02:28,319
this will give you language support when


91
00:02:28,319 --> 00:02:30,239
you write your docker files and can also


92
00:02:30,239 --> 00:02:32,080
link up to remote registries and a bunch


93
00:02:32,080 --> 00:02:32,879
of other stuff


94
00:02:32,879 --> 00:02:34,480
now that we have docker installed we can


95
00:02:34,480 --> 00:02:36,000
move on to what is probably the most


96
00:02:36,000 --> 00:02:37,920
important section of this video and


97
00:02:37,920 --> 00:02:39,120
that's the docker file


98
00:02:39,120 --> 00:02:41,200
which contains code to build your docker


99
00:02:41,200 --> 00:02:43,040
image and ultimately run your app as a


100
00:02:43,040 --> 00:02:43,840
container


101
00:02:43,840 --> 00:02:45,440
now to follow along at this point you


102
00:02:45,440 --> 00:02:47,280
can grab my source code from github or


103
00:02:47,280 --> 00:02:48,959
fireship io or better yet


104
00:02:48,959 --> 00:02:50,560
use your own application as a starting


105
00:02:50,560 --> 00:02:52,319
point in this case i just have a single


106
00:02:52,319 --> 00:02:53,440
index.js file


107
00:02:53,440 --> 00:02:55,599
that exposes an api endpoint that sends


108
00:02:55,599 --> 00:02:56,640
back a response


109
00:02:56,640 --> 00:02:58,800
docker is easy then we expose our app


110
00:02:58,800 --> 00:03:00,560
using the port environment variable


111
00:03:00,560 --> 00:03:02,159
and that'll come into play later the


112
00:03:02,159 --> 00:03:03,840
question we're faced with now is how do


113
00:03:03,840 --> 00:03:05,200
we dockerize this app


114
00:03:05,200 --> 00:03:07,120
we'll start by creating a docker file in


115
00:03:07,120 --> 00:03:08,239
the root of the project


116
00:03:08,239 --> 00:03:10,239
the first instruction in our docker file


117
00:03:10,239 --> 00:03:12,159
is from and if you hover over it it will


118
00:03:12,159 --> 00:03:13,680
give you some documentation about what


119
00:03:13,680 --> 00:03:14,319
it does


120
00:03:14,319 --> 00:03:15,599
you could start from scratch with


121
00:03:15,599 --> 00:03:17,440
nothing but the docker runtime however


122
00:03:17,440 --> 00:03:18,000
most docker


123
00:03:18,000 --> 00:03:19,920
files will start with a specific base


124
00:03:19,920 --> 00:03:21,120
image for example


125
00:03:21,120 --> 00:03:22,879
when i type ubuntu you'll notice it's


126
00:03:22,879 --> 00:03:24,640
underlined and when i control click it


127
00:03:24,640 --> 00:03:26,480
it will take me to all the base images


128
00:03:26,480 --> 00:03:28,159
for this flavor of linux and then you'll


129
00:03:28,159 --> 00:03:29,519
notice it supports a variety of


130
00:03:29,519 --> 00:03:31,040
different tags which are just different


131
00:03:31,040 --> 00:03:32,720
variations on this base image


132
00:03:32,720 --> 00:03:34,720
ubuntu doesn't have nodejs installed by


133
00:03:34,720 --> 00:03:36,560
default we could still use this image


134
00:03:36,560 --> 00:03:38,159
and install node.js manually


135
00:03:38,159 --> 00:03:39,680
however there is a better option and


136
00:03:39,680 --> 00:03:41,280
that's to use the officially supported


137
00:03:41,280 --> 00:03:42,400
node.js image


138
00:03:42,400 --> 00:03:43,920
we'll go ahead and use the node version


139
00:03:43,920 --> 00:03:45,440
12 base image which will give us


140
00:03:45,440 --> 00:03:46,799
everything we need to start working with


141
00:03:46,799 --> 00:03:48,159
node in this environment


142
00:03:48,159 --> 00:03:49,599
the next thing we'll want to do is add


143
00:03:49,599 --> 00:03:51,440
our app source code to the image


144
00:03:51,440 --> 00:03:53,120
the working directory instruction is


145
00:03:53,120 --> 00:03:54,560
kind of like when you cd into a


146
00:03:54,560 --> 00:03:55,200
directory


147
00:03:55,200 --> 00:03:57,040
now any subsequent instructions in our


148
00:03:57,040 --> 00:03:58,879
docker file will start from this app


149
00:03:58,879 --> 00:03:59,680
directory


150
00:03:59,680 --> 00:04:01,200
now at this point there is something


151
00:04:01,200 --> 00:04:02,319
very important that you need to


152
00:04:02,319 --> 00:04:03,120
understand


153
00:04:03,120 --> 00:04:04,640
and that's that every instruction in


154
00:04:04,640 --> 00:04:06,560
this docker file is considered its own


155
00:04:06,560 --> 00:04:07,760
step or layer


156
00:04:07,760 --> 00:04:09,519
in order to keep things efficient docker


157
00:04:09,519 --> 00:04:11,040
will attempt to cache layers


158
00:04:11,040 --> 00:04:12,959
if nothing is actually changed now


159
00:04:12,959 --> 00:04:14,319
normally when you're working on a node


160
00:04:14,319 --> 00:04:14,879
project


161
00:04:14,879 --> 00:04:16,320
you get your source code and then you


162
00:04:16,320 --> 00:04:18,320
install your dependencies but in docker


163
00:04:18,320 --> 00:04:19,519
we actually want to install our


164
00:04:19,519 --> 00:04:21,840
dependencies first so they can be cached


165
00:04:21,840 --> 00:04:23,440
in other words we don't want to have to


166
00:04:23,440 --> 00:04:25,360
reinstall all of our node modules every


167
00:04:25,360 --> 00:04:27,040
time we change our app source code we


168
00:04:27,040 --> 00:04:28,960
use the copy instruction which takes two


169
00:04:28,960 --> 00:04:29,520
arguments


170
00:04:29,520 --> 00:04:31,600
the first argument is our local package


171
00:04:31,600 --> 00:04:32,880
json location


172
00:04:32,880 --> 00:04:34,400
and then the second argument is the


173
00:04:34,400 --> 00:04:35,919
place we want to copy it in the


174
00:04:35,919 --> 00:04:37,520
container which is the current working


175
00:04:37,520 --> 00:04:38,400
directory


176
00:04:38,400 --> 00:04:40,400
and now that we have a package json we


177
00:04:40,400 --> 00:04:42,720
can run the npm install command


178
00:04:42,720 --> 00:04:44,400
this is just like opening a terminal


179
00:04:44,400 --> 00:04:45,919
session and running a command


180
00:04:45,919 --> 00:04:47,360
and when it's finished the results will


181
00:04:47,360 --> 00:04:49,120
be committed to the docker image as a


182
00:04:49,120 --> 00:04:49,680
layer


183
00:04:49,680 --> 00:04:50,880
now that we have our modules in the


184
00:04:50,880 --> 00:04:52,639
image we can then copy over our source


185
00:04:52,639 --> 00:04:53,280
code


186
00:04:53,280 --> 00:04:55,120
which we'll do by copying over all of


187
00:04:55,120 --> 00:04:56,800
our local files to the current working


188
00:04:56,800 --> 00:04:57,680
directory


189
00:04:57,680 --> 00:04:59,280
but this actually creates a problem for


190
00:04:59,280 --> 00:05:00,639
us because you'll notice that we have a


191
00:05:00,639 --> 00:05:02,400
node modules folder here in our local


192
00:05:02,400 --> 00:05:03,199
file system


193
00:05:03,199 --> 00:05:04,880
that would also be copied over to the


194
00:05:04,880 --> 00:05:06,880
image and override the node modules that


195
00:05:06,880 --> 00:05:08,000
we install there


196
00:05:08,000 --> 00:05:09,680
what we need is some kind of way for a


197
00:05:09,680 --> 00:05:11,919
docker to ignore our local node modules


198
00:05:11,919 --> 00:05:13,600
we can do that by creating a docker


199
00:05:13,600 --> 00:05:14,400
ignore file


200
00:05:14,400 --> 00:05:16,400
and adding node modules to it it works


201
00:05:16,400 --> 00:05:18,000
just like a git ignore file which you've


202
00:05:18,000 --> 00:05:19,360
probably seen before


203
00:05:19,360 --> 00:05:21,199
okay so at this point we have our source


204
00:05:21,199 --> 00:05:22,479
code in the docker image


205
00:05:22,479 --> 00:05:24,240
but in order to run our code we're using


206
00:05:24,240 --> 00:05:26,000
an environment variable we can set that


207
00:05:26,000 --> 00:05:27,520
environment variable in the container


208
00:05:27,520 --> 00:05:28,479
using the env


209
00:05:28,479 --> 00:05:30,080
instruction now when we actually have a


210
00:05:30,080 --> 00:05:31,919
running container we also want it to be


211
00:05:31,919 --> 00:05:34,240
listening on port 8080 so we can access


212
00:05:34,240 --> 00:05:36,240
the nodejs express app publicly


213
00:05:36,240 --> 00:05:37,600
and we'll look at port some more detail


214
00:05:37,600 --> 00:05:38,720
in just a minute when we run the


215
00:05:38,720 --> 00:05:39,280
container


216
00:05:39,280 --> 00:05:40,479
and that brings us to our final


217
00:05:40,479 --> 00:05:42,400
instruction command there can only be


218
00:05:42,400 --> 00:05:44,000
one of these per docker file and it


219
00:05:44,000 --> 00:05:45,680
tells the container how to run the


220
00:05:45,680 --> 00:05:46,800
actual application


221
00:05:46,800 --> 00:05:48,639
which it does by starting a process to


222
00:05:48,639 --> 00:05:50,639
serve the express app you'll also notice


223
00:05:50,639 --> 00:05:51,600
that unlike run


224
00:05:51,600 --> 00:05:53,120
we've made this command an array of


225
00:05:53,120 --> 00:05:55,360
strings this is known as exec form


226
00:05:55,360 --> 00:05:56,960
and it's the preferred way to do things


227
00:05:56,960 --> 00:05:58,400
unlike a regular command it doesn't


228
00:05:58,400 --> 00:05:59,840
start up a shell session


229
00:05:59,840 --> 00:06:01,360
and that's basically all there is to it


230
00:06:01,360 --> 00:06:02,960
we now have a full set of instructions


231
00:06:02,960 --> 00:06:04,319
for building a docker image


232
00:06:04,319 --> 00:06:05,919
and that brings us to the next question


233
00:06:05,919 --> 00:06:07,520
how do we build a docker image


234
00:06:07,520 --> 00:06:09,120
you build a docker image by running the


235
00:06:09,120 --> 00:06:11,039
docker build command there's a lot of


236
00:06:11,039 --> 00:06:12,319
different options you can pass with the


237
00:06:12,319 --> 00:06:13,840
command but the one you want to know for


238
00:06:13,840 --> 00:06:14,400
right now


239
00:06:14,400 --> 00:06:16,720
is tag or t this will give your image a


240
00:06:16,720 --> 00:06:18,400
name tag that's easy to remember so you


241
00:06:18,400 --> 00:06:19,680
can access it later


242
00:06:19,680 --> 00:06:21,280
when defining the tag name i'd first


243
00:06:21,280 --> 00:06:23,120
recommend setting up a username on


244
00:06:23,120 --> 00:06:24,000
docker hub


245
00:06:24,000 --> 00:06:25,919
and then do that username followed by


246
00:06:25,919 --> 00:06:27,680
whatever you want to call this image


247
00:06:27,680 --> 00:06:29,840
so in my case it would be fireship slash


248
00:06:29,840 --> 00:06:31,360
demo app and you could also add a


249
00:06:31,360 --> 00:06:33,280
version number separated by a colon


250
00:06:33,280 --> 00:06:34,960
from there you simply add the path to


251
00:06:34,960 --> 00:06:36,639
your docker file which in our case is


252
00:06:36,639 --> 00:06:38,160
just a period for the current working


253
00:06:38,160 --> 00:06:38,800
directory


254
00:06:38,800 --> 00:06:40,319
when we run it you'll notice it starts


255
00:06:40,319 --> 00:06:42,319
with step one which is to pull the node


256
00:06:42,319 --> 00:06:43,520
12 image remotely


257
00:06:43,520 --> 00:06:44,880
then it goes through each step in our


258
00:06:44,880 --> 00:06:46,560
docker file and finally it says


259
00:06:46,560 --> 00:06:47,840
successfully built the


260
00:06:47,840 --> 00:06:49,840
image id and now that we have this image


261
00:06:49,840 --> 00:06:51,759
we can use it as a base image to create


262
00:06:51,759 --> 00:06:53,599
other images or we can use it to run


263
00:06:53,599 --> 00:06:54,479
containers


264
00:06:54,479 --> 00:06:56,160
in real life to use this image you'll


265
00:06:56,160 --> 00:06:57,840
most likely push it to a container


266
00:06:57,840 --> 00:06:58,960
registry somewhere


267
00:06:58,960 --> 00:07:00,479
that might be docker hub or your


268
00:07:00,479 --> 00:07:02,240
favorite cloud provider and the command


269
00:07:02,240 --> 00:07:03,520
you would use to do that is


270
00:07:03,520 --> 00:07:05,840
docker push then a developer or server


271
00:07:05,840 --> 00:07:07,120
somewhere else in the world could use


272
00:07:07,120 --> 00:07:09,440
docker pull to pull that image back down


273
00:07:09,440 --> 00:07:10,960
but we just want to run it here locally


274
00:07:10,960 --> 00:07:12,800
in our system so let's do that with the


275
00:07:12,800 --> 00:07:14,080
docker run command


276
00:07:14,080 --> 00:07:15,840
we can supply it with the image id or


277
00:07:15,840 --> 00:07:17,599
the tag name and all that does


278
00:07:17,599 --> 00:07:19,360
is create a running process called a


279
00:07:19,360 --> 00:07:21,199
container and we can see in the terminal


280
00:07:21,199 --> 00:07:23,280
it should say app listening on localhost


281
00:07:23,280 --> 00:07:25,520
8080. but if we open the browser and go


282
00:07:25,520 --> 00:07:27,360
to that address we don't see anything


283
00:07:27,360 --> 00:07:29,039
so why can't i access my container


284
00:07:29,039 --> 00:07:31,759
locally remember we exposed port 8080 in


285
00:07:31,759 --> 00:07:32,720
our docker file


286
00:07:32,720 --> 00:07:34,560
but by default it's not accessible to


287
00:07:34,560 --> 00:07:36,240
the outside world let's refactor our


288
00:07:36,240 --> 00:07:37,199
command to use the p


289
00:07:37,199 --> 00:07:39,199
flag to implement port forwarding from


290
00:07:39,199 --> 00:07:40,639
the docker container to our local


291
00:07:40,639 --> 00:07:41,680
machine


292
00:07:41,680 --> 00:07:43,599
on the left side we'll map a port on our


293
00:07:43,599 --> 00:07:45,759
local machine 5000 in this case


294
00:07:45,759 --> 00:07:48,240
to a port on the docker container 8080


295
00:07:48,240 --> 00:07:49,199
on the right side


296
00:07:49,199 --> 00:07:50,879
and now if we open the browser and go to


297
00:07:50,879 --> 00:07:53,280
localhost 5000 we'll see the app running


298
00:07:53,280 --> 00:07:53,919
there


299
00:07:53,919 --> 00:07:55,199
now one thing to keep in mind at this


300
00:07:55,199 --> 00:07:56,879
point is that the docker container will


301
00:07:56,879 --> 00:07:58,560
still be running even after you close


302
00:07:58,560 --> 00:07:59,919
the terminal window


303
00:07:59,919 --> 00:08:01,599
let's go ahead and open up the dashboard


304
00:08:01,599 --> 00:08:03,120
and stop the container you should


305
00:08:03,120 --> 00:08:04,479
actually have two running containers


306
00:08:04,479 --> 00:08:06,240
here if you've been following along


307
00:08:06,240 --> 00:08:08,400
when you stop the container any state or


308
00:08:08,400 --> 00:08:09,919
data that you created inside of it will


309
00:08:09,919 --> 00:08:11,039
be lost


310
00:08:11,039 --> 00:08:12,639
but there can be situations where you


311
00:08:12,639 --> 00:08:14,479
want to share data across multiple


312
00:08:14,479 --> 00:08:15,360
containers


313
00:08:15,360 --> 00:08:16,960
and the preferred way to do that is with


314
00:08:16,960 --> 00:08:19,360
volumes a volume is just a dedicated


315
00:08:19,360 --> 00:08:20,800
folder on the host machine


316
00:08:20,800 --> 00:08:22,479
and inside this folder a container can


317
00:08:22,479 --> 00:08:24,800
create files that can be remounted into


318
00:08:24,800 --> 00:08:26,800
future containers or multiple containers


319
00:08:26,800 --> 00:08:27,759
at the same time


320
00:08:27,759 --> 00:08:29,759
to create a volume we use the docker


321
00:08:29,759 --> 00:08:31,280
volume create command


322
00:08:31,280 --> 00:08:32,880
now that we have this volume we can


323
00:08:32,880 --> 00:08:34,640
mount it somewhere in our container when


324
00:08:34,640 --> 00:08:35,519
we run it


325
00:08:35,519 --> 00:08:36,880
multiple containers can mount this


326
00:08:36,880 --> 00:08:38,880
volume simultaneously and access the


327
00:08:38,880 --> 00:08:40,080
same set of files


328
00:08:40,080 --> 00:08:41,760
and the files stick around after all the


329
00:08:41,760 --> 00:08:43,360
containers are shut down


330
00:08:43,360 --> 00:08:44,880
now that you know how to run a container


331
00:08:44,880 --> 00:08:46,880
let's talk a little bit about debugging


332
00:08:46,880 --> 00:08:48,240
when things don't go as planned you


333
00:08:48,240 --> 00:08:49,839
might be wondering how do i inspect the


334
00:08:49,839 --> 00:08:51,760
logs and how do i get into my container


335
00:08:51,760 --> 00:08:53,200
and start interacting with the command


336
00:08:53,200 --> 00:08:53,680
line


337
00:08:53,680 --> 00:08:55,360
well this is where docker desktop really


338
00:08:55,360 --> 00:08:56,880
comes in handy if you click on the


339
00:08:56,880 --> 00:08:58,399
running container you can see all the


340
00:08:58,399 --> 00:08:59,279
logs right there


341
00:08:59,279 --> 00:09:01,279
and you can even search through them you


342
00:09:01,279 --> 00:09:02,720
can also execute commands in your


343
00:09:02,720 --> 00:09:04,880
container by clicking on the cli button


344
00:09:04,880 --> 00:09:06,320
and keep in mind you can also do this


345
00:09:06,320 --> 00:09:07,920
from your own command line using the


346
00:09:07,920 --> 00:09:09,680
docker exec command


347
00:09:09,680 --> 00:09:11,440
in any case it puts us in the root of


348
00:09:11,440 --> 00:09:13,279
the file system of that container so we


349
00:09:13,279 --> 00:09:15,040
can then ls to see files


350
00:09:15,040 --> 00:09:16,800
or do whatever we want in our linux


351
00:09:16,800 --> 00:09:19,040
environment that's useful to know but


352
00:09:19,040 --> 00:09:20,160
one of the best things you can do to


353
00:09:20,160 --> 00:09:21,519
keep your containers healthy


354
00:09:21,519 --> 00:09:23,680
is to write simple maintainable micro


355
00:09:23,680 --> 00:09:25,760
services each container should only run


356
00:09:25,760 --> 00:09:26,800
one process


357
00:09:26,800 --> 00:09:28,560
and if your app needs multiple processes


358
00:09:28,560 --> 00:09:30,399
then you should use multiple containers


359
00:09:30,399 --> 00:09:32,160
and docker has a tool designed just for


360
00:09:32,160 --> 00:09:34,000
that called docker compose


361
00:09:34,000 --> 00:09:35,680
it's just a tool for running multiple


362
00:09:35,680 --> 00:09:37,519
docker containers at the same time


363
00:09:37,519 --> 00:09:38,959
we already have a docker file for our


364
00:09:38,959 --> 00:09:40,800
node app but let's imagine that our node


365
00:09:40,800 --> 00:09:42,959
app also needs to access a mysql


366
00:09:42,959 --> 00:09:43,839
database


367
00:09:43,839 --> 00:09:45,600
and we also likely want a volume to


368
00:09:45,600 --> 00:09:47,360
persist the database across multiple


369
00:09:47,360 --> 00:09:48,399
containers


370
00:09:48,399 --> 00:09:49,760
we can manage all that with docker


371
00:09:49,760 --> 00:09:51,880
compose by creating a


372
00:09:51,880 --> 00:09:53,839
docker-compose.yaml file in the root of


373
00:09:53,839 --> 00:09:54,880
our project


374
00:09:54,880 --> 00:09:56,640
inside that file we have a services


375
00:09:56,640 --> 00:09:58,240
object where each key


376
00:09:58,240 --> 00:10:00,000
in that object represents a different


377
00:10:00,000 --> 00:10:01,519
container that we want to run


378
00:10:01,519 --> 00:10:03,600
we'll use web to define our node.js app


379
00:10:03,600 --> 00:10:04,800
that we've already built


380
00:10:04,800 --> 00:10:06,640
and then we'll use build to point it to


381
00:10:06,640 --> 00:10:08,160
the current working directory which is


382
00:10:08,160 --> 00:10:10,240
where it can find the docker file


383
00:10:10,240 --> 00:10:11,519
and then we'll also define the port


384
00:10:11,519 --> 00:10:13,360
forwarding configuration here as well


385
00:10:13,360 --> 00:10:15,040
then we have a separate container called


386
00:10:15,040 --> 00:10:18,399
db which is our mysql database process


387
00:10:18,399 --> 00:10:20,399
after services we'll also define a


388
00:10:20,399 --> 00:10:22,720
volume to store the database data across


389
00:10:22,720 --> 00:10:23,920
multiple containers


390
00:10:23,920 --> 00:10:25,519
and then we can mount that volume in our


391
00:10:25,519 --> 00:10:27,279
db container and hopefully you're


392
00:10:27,279 --> 00:10:28,240
starting to see how much


393
00:10:28,240 --> 00:10:29,760
easier it is to define this stuff as


394
00:10:29,760 --> 00:10:32,000
yaml as opposed to writing it out as


395
00:10:32,000 --> 00:10:33,279
individual commands


396
00:10:33,279 --> 00:10:34,720
and now that we have this configuration


397
00:10:34,720 --> 00:10:36,800
set we can run docker compose up from


398
00:10:36,800 --> 00:10:38,399
the command line which will find this


399
00:10:38,399 --> 00:10:38,880
file


400
00:10:38,880 --> 00:10:40,800
and run all the containers together we


401
00:10:40,800 --> 00:10:42,000
can mess around with our app for a


402
00:10:42,000 --> 00:10:42,560
little while


403
00:10:42,560 --> 00:10:44,800
and then run docker compose down to shut


404
00:10:44,800 --> 00:10:46,480
down all the containers together


405
00:10:46,480 --> 00:10:47,680
i'm going to go ahead and wrap things up


406
00:10:47,680 --> 00:10:49,200
there if this video helped you please


407
00:10:49,200 --> 00:10:50,959
like and subscribe and consider becoming


408
00:10:50,959 --> 00:10:52,880
a pro member at fireship io


409
00:10:52,880 --> 00:10:54,560
where we use docker in a variety of


410
00:10:54,560 --> 00:10:56,240
different project-based courses


411
00:10:56,240 --> 00:10:58,079
thanks for watching and i will see you


412
00:10:58,079 --> 00:11:01,839
in the next one


