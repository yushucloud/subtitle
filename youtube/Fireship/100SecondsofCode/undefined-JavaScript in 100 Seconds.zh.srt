1
00:00:02.207 --> 00:00:06.631
javascript 一种高级单线程

2
00:00:04.439 --> 00:00:07.775
垃圾收集解释或

3
00:00:06.631 --> 00:00:09.967
及时编译的基于原型的

4
00:00:07.775 --> 00:00:11.118
多范式动态语言，具有

5
00:00:09.967 --> 00:00:14.147
非阻塞事件循环，以构建网站而闻名，

6
00:00:11.118 --> 00:00:16.166
它是

7
00:00:14.147 --> 00:00:18.182
由 Brendan ike 在短短一周内于 1995 年创建的，其

8
00:00:16.166 --> 00:00:19.199
目标是 在 netscape 浏览器中添加了一种易于学习的

9
00:00:18.182 --> 00:00:21.218
脚本语言，

10
00:00:19.199 --> 00:00:23.234
它最初被命名为 mocha，

11
00:00:21.218 --> 00:00:25.254
但当时的天才营销

12
00:00:23.234 --> 00:00:27.272
人员希望它在今天听起来像一种性感的

13
00:00:25.254 --> 00:00:28.288
新 java 语言，它是一种

14
00:00:27.272 --> 00:00:30.306
功能齐全的语言，它

15
00:00:28.288 --> 00:00:32.322
通过 ecmascript 标准继续发展

16
00:00:30.306 --> 00:00:34.339
以构建

17
00:00:32.322 --> 00:00:35.354
前端 Web 应用程序而闻名，因为它

18
00:00:34.339 --> 00:00:37.373
是除了 Web

19
00:00:35.354 --> 00:00:39.394
程序集之外唯一在浏览器中原生支持的语言，

20
00:00:37.373 --> 00:00:41.410
但是任何可以

21
00:00:39.394 --> 00:00:43.430
用 javascript 构建的东西都将用 javascript 构建，

22
00:00:41.410 --> 00:00:45.452
例如

23
00:00:43.430 --> 00:00:47.476
带有 node.js 的服务器端应用程序和带有

24
00:00:45.452 --> 00:00:49.492
react 的移动应用程序 带有电子的本机或离子和桌面应用程序

25
00:00:47.476 --> 00:00:51.513
，它是一种解释性

26
00:00:49.492 --> 00:00:53.533
脚本语言，但工具 li ke v8

27
00:00:51.513 --> 00:00:55.553
引擎和 chromium 使用即时

28
00:00:53.533 --> 00:00:57.574
编译器在运行时将其转换为机器代码

29
00:00:55.553 --> 00:00:59.597
，它在

30
00:00:57.574 --> 00:01:01.611
处理 i o 密集型作业方面也非常出色，

31
00:00:59.597 --> 00:01:03.634
尽管它是

32
00:01:01.611 --> 00:01:05.651
通过非阻塞事件循环实现的单线程语言

33
00:01:03.634 --> 00:01:06.668
，可以 在后台排队工作

34
00:01:05.651 --> 00:01:08.688
而不阻塞主

35
00:01:06.668 --> 00:01:11.712
线程开始创建一个

36
00:01:08.688 --> 00:01:13.733
以.js 结尾的文件您的代码

37
00:01:11.712 --> 00:01:15.751
将从全局上下文开始执行

38
00:01:13.733 --> 00:01:17.769
使用控制台使用内置调试器记录一个值

39
00:01:15.751 --> 00:01:18.785
现在考虑

40
00:01:17.769 --> 00:01:20.808
您想要的位置 运行此文件是

41
00:01:18.785 --> 00:01:22.826
前端浏览器还是浏览器中的后端 node.js

42
00:01:20.808 --> 00:01:24.842
服务器，您可以

43
00:01:22.826 --> 00:01:26.863
使用脚本标记引用它，然后

44
00:01:24.842 --> 00:01:28.884
当您在网站上打开该 html 文件时，浏览器将执行它

45
00:01:26.863 --> 00:01:30.904
javascript 通常

46
00:01:28.884 --> 00:01:32.922
用于 从 dom

47
00:01:30.904 --> 00:01:34.939
文档查询选择器中抓取一个元素将抓取

48
00:01:32.922 --> 00:01:36.965
第一个按钮，然后我们可以

49
00:01:34.939 --> 00:01:38.981
使用 var let 或 const

50
00:01:40.100 --> 00:01:44.103
将其分配给一个变量 ed while const

51
00:01:42.101 --> 00:01:45.105
用于现在无法重新分配的变量

52
00:01:44.103 --> 00:01:47.107
以使按钮具有交互性我们

53
00:01:45.105 --> 00:01:49.109
可以通过为单击事件定义一个函数来为其添加事件侦听器

54
00:01:49.109 --> 00:01:53.113
我们可以在此处使用 function 关键字

55
00:01:51.111 --> 00:01:55.115
或更简洁的箭头语法

56
00:01:53.113 --> 00:01:57.116
现在是事件循环

57
00:01:55.115 --> 00:01:58.118
每当发生新点击时都会执行此函数

58
00:01:57.116 --> 00:02:00.120
函数是

59
00:01:58.118 --> 00:02:02.122
支持函数式编程模式的第一类对象，

60
00:02:00.120 --> 00:02:04.124
但 javascript 也支持

61
00:02:02.122 --> 00:02:06.126
面向对象模式的类和继承，

62
00:02:04.124 --> 00:02:08.128
即使它是单线程的，它也

63
00:02:06.126 --> 00:02:10.130
可以与

64
00:02:08.128 --> 00:02:13.133
也支持异步等待的 promise api 异步工作

65
00:02:10.130 --> 00:02:15.135
语法js代码也可以在服务器上运行，这

66
00:02:13.133 --> 00:02:16.136
要归功于nodejs运行时而

67
00:02:15.135 --> 00:02:18.138
不是网页上的按钮它

68
00:02:16.136 --> 00:02:20.140
与文件系统api之类的东西交互

69
00:02:20.140 --> 00:02:23.143
通过拉起终端并

70
00:02:22.141 --> 00:02:25.145
输入节点命令在服务器上执行你的代码这是

71
00:02:23.143 --> 00:02:27.147
javascript 100秒内点击喜欢

72
00:02:25.145 --> 00:02:29.148
按钮订阅，如果你

73
00:02:27.147 --> 00:02:30.150
想看更多这样的短视频并成为

74
00:02:29.148 --> 00:02:32.152
如果你想学习

75
00:02:30.150 --> 00:02:34.154
如何用 javascript 做各种疯狂的事情，fireship pro 会员，

76
00:02:32.152 --> 00:02:37.157
谢谢你的收看，我

77
00:02:34.154 --> 00:02:37.157
会在下一个看到你
