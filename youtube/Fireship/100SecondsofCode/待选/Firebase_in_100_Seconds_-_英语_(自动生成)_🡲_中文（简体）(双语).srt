1
00:00:00,080 --> 00:00:04,560
firebase a suite of tools for building apps and managing infrastructure on top
firebase 一套工具，用于在谷歌云平台上构建应用程序和管理基础设施，

2
00:00:04,560 --> 00:00:09,360
of google cloud platform it was founded by james tamplin and andrew lee in 2011
由 james tamplin 和 andrew lee 于 2011 年创立，当时

3
00:00:09,360 --> 00:00:12,880
after they discovered that developers were using their chat software to manage
他们发现开发人员正在使用他们的聊天软件来管理

4
00:00:12,880 --> 00:00:17,359
non-chat application data this inspired them to create a real-time database a
非聊天应用程序数据，这激发了他们创建 实时

5
00:00:17,359 --> 00:00:21,279
json database that automatically stays in sync with your front-end application
数据库 自动与前端应用程序保持同步的 json 数据库，

6
00:00:21,279 --> 00:00:25,119
it was later expanded to support user authentication and website hosting to
后来扩展为支持用户身份验证和网站托管，以

7
00:00:25,119 --> 00:00:29,439
act as a complete backend as a service in 2014 it was acquired by google where
充当完整的后端即服务，在 2014 年被谷歌收购

8
00:00:29,439 --> 00:00:32,880
it was further expanded with serverless computing via cloud functions push
，进一步发展通过云功能扩展无服务器计算

9
00:00:32,880 --> 00:00:37,120
notifications via cloud messaging and other google services like analytics and
通过云消息传递和其他谷歌服务（如分析和

10
00:00:37,120 --> 00:00:41,520
admob in 2017 google acquired fabric from twitter and also launched a new
admob）于 2017 年扩展谷歌从 twitter 收购了 fabric并推出了一个

11
00:00:41,520 --> 00:00:45,360
document database called firestore to support a wider range of applications
名为 firestore 的新文档数据库，以支持更广泛的应用程序，

12
00:00:45,360 --> 00:00:48,480
most importantly though firebase provides software development kits for
最重要的是尽管 firebase提供软件开发

13
00:00:48,480 --> 00:00:52,160
virtually every platform to manage and scale this infrastructure with little to
几乎每个平台的套件来管理和扩展这个 几乎

14
00:00:52,160 --> 00:00:55,760
no back-end code to build a full stack application right now create a free
没有后端代码的基础架构现在可以构建一个完整的堆栈应用程序创建一个免费的

15
00:00:55,760 --> 00:00:59,359
firebase project then open up some code for your favorite front-end platform
firebase项目然后为您最喜欢的前端平台打开一些代码

16
00:00:59,359 --> 00:01:02,879
install the firebase sdk then connect it to the cloud with your project
安装firebase sdk然后在初始化后使用您的项目凭据将其连接到云

17
00:01:02,879 --> 00:01:06,000
credentials once initialized you can start interacting with your backend
您可以首先开始与您的后端资源进行交互

18
00:01:06,000 --> 00:01:09,520
resources first we might want to know if the user is logged in or not we can
我们可能想知道用户是否已登录我们可以

19
00:01:09,520 --> 00:01:13,200
listen to the current user with the on off state changed function the user will
使用 onoff state changed 功能监听当前用户用户一开始

20
00:01:13,200 --> 00:01:16,720
be null at first but we can log them in with their google account using the sign
将为空，但我们可以登录他们 他们的谷歌帐户使用

21
00:01:16,720 --> 00:01:20,240
in with pop-up function now that we have a user logged in we might want to store
带有弹出功能的登录现在我们有一个用户登录我们可能想要

22
00:01:20,240 --> 00:01:23,759
something in a database we can make a reference to a document in firestore
在数据库中存储一些东西我们可以引用firestore中的文档然后在引用

23
00:01:23,759 --> 00:01:27,680
then write json data to it while making a reference to the current user's user
时将json数据写入它当前用户的用户

24
00:01:27,680 --> 00:01:31,680
id but the amazing thing is that we can listen to updates to that data in real
ID，但令人惊奇的是，我们可以

25
00:01:31,680 --> 00:01:35,920
time by simply referencing the document using the onsnapshot function anytime


26
00:01:35,920 --> 00:01:39,520
the data changes on the server it'll be reflected in the ui with zero latency
在数据发生变化时通过使用 onsnapshot 函数简单地引用文档来实时收听该数据的更新 在服务器上，由于开箱即用的乐观更新，它将以零延迟反映在 ui

27
00:01:39,520 --> 00:01:43,040
thanks to optimistic updates out of the box but that doesn't seem very secure
中，但这似乎不太安全

28
00:01:43,040 --> 00:01:46,960
how do we control who has access to the database firestore security rules allow
我们如何控制谁可以访问数据库 firestore 安全规则允许

29
00:01:46,960 --> 00:01:50,640
you to define access control logic in a simple readable format with common
您定义访问控制逻辑 以具有通用表达式语言的简单可读格式，

30
00:01:50,640 --> 00:01:53,840
expression language you can do almost everything from the front end but when
您几乎可以从前端执行所有操作，但是当

31
00:01:53,840 --> 00:01:56,960
you do need to run server-side code firebase cloud functions provides a
您确实需要运行服务器端代码时，firebase 云函数提供了一个

32
00:01:56,960 --> 00:02:00,399
tightly integrated serverless backend not only does it allow you to create
紧密集成的无服务器后端，它不仅允许您创建

33
00:02:00,399 --> 00:02:04,399
http endpoints but functions can also be triggered in the background based on
http 端点，而且还允许您创建函数 也可以根据

34
00:02:04,399 --> 00:02:07,439
events that happen in your project like rights to the database user
项目中发生的事件在后台触发，例如对数据库用户

35
00:02:07,439 --> 00:02:11,280
authentication events file uploads and many others when developing locally
身份验证事件文件上传的权限以及在本地开发时的许多其他事件

36
00:02:11,280 --> 00:02:15,440
firebase has an emulator suite to run and test your code in a mock environment
firebase 有一个模拟器套件，可以在需要时在模拟环境中运行和测试您的代码

37
00:02:15,440 --> 00:02:18,560
when it's time to deploy run the firebase deploy command to push your
deploy 运行firebase deploy 命令将您的

38
00:02:18,560 --> 00:02:22,080
code to the cloud and allocate infrastructure to run it at any scale
代码推送到云端并分配基础设施以在任何规模上运行它

39
00:02:22,080 --> 00:02:26,000
this has been firebase in 100 seconds if you're ready to build a serious app with
ebase 在 100 秒内如果您准备好使用 firebase 构建一个严肃的应用程序，

40
00:02:26,000 --> 00:02:30,080
firebase i can think of no better place to learn than fireship io the web app i
我想不出比 fireship io 更好的学习场所了

41
00:02:30,080 --> 00:02:33,840
built with firebase to teach firebase thanks for watching and i will see you


42
00:02:33,840 --> 00:02:36,640
in the next one
