1
00:00:00,000 --> 00:00:04,799
DevOps a set of practices to build test and release your code in small frequent
DevOps 一组实践，用于以小而频繁的

2
00:00:04,799 --> 00:00:08,880
steps one of the core practices of DevOps is continuous integration which
步骤构建测试和发布代码 DevOps 的核心实践之一是持续集成，它

3
00:00:08,880 --> 00:00:13,049
has developers commit their code to a shared repository often on a daily basis
让开发人员经常将他们的代码提交到共享存储库，

4
00:00:13,049 --> 00:00:16,710
each commit triggers an automated workflow on a CI server that can notify
每次提交都会触发CI 上的自动化工作流 服务器可以

5
00:00:16,710 --> 00:00:20,460
developers of any issues integrating their changes when a repo evolves in
在 repo 以这样的小步骤发展时通知开发人员集成他们的更改的任何问题

6
00:00:20,460 --> 00:00:24,420
small steps like this it prevents what's known as merge Towel imagine Mary you're
它可以防止所谓的合并毛巾想象 Mary 你

7
00:00:24,420 --> 00:00:27,210
back and developer builds a new API for your product
回来了，开发人员

8
00:00:27,210 --> 00:00:31,830
shortly after Jane your front-end developer starts work on a new UI a few
在 Jane 你的前端开发人员之后不久为你的产品构建了一个新的 API 几个月后开始在新 UI 上工作，

9
00:00:31,830 --> 00:00:34,890
months later when it comes time to merge their features we find that they're
当需要合并它们的功能时，我们发现它们

10
00:00:34,890 --> 00:00:38,309
completely incompatible the build fails and we now have to spend a bunch of time
完全不兼容，构建失败，我们现在必须花费大量时间

11
00:00:38,309 --> 00:00:41,940
and money resolving these conflicts let's go ahead and build a continuous
和金钱来解决这些冲突，让我们继续构建一个 持续

12
00:00:41,940 --> 00:00:45,600
integration pipeline now to see how it prevents issues like this here on github
集成管道现在看看它如何在 github 上防止此类问题

13
00:00:45,600 --> 00:00:49,559
I have a node.js web app in order to deliver this out to my customers I need
我有一个 node.js Web 应用程序，以便将其交付给我的客户

14
00:00:49,559 --> 00:00:53,879
to run three commands test build and deploy I can automate this entire
需要运行三个命令测试构建和部署我可以

15
00:00:53,879 --> 00:00:58,020
process in the cloud by using a CI service like github actions first I
通过使用像github操作这样的CI服务在云中自动化整个过程我首先

16
00:00:58,020 --> 00:01:01,770
create a workflow and then I tell it to run on every push to the master branch
创建一个工作流然后我告诉它在每次推送到主分支时运行

17
00:01:01,770 --> 00:01:06,150
the event triggers a job that runs on a Linux container in the cloud and we tell
事件触发一个工作 它在云中的 Linux 容器上运行，我们

18
00:01:06,150 --> 00:01:10,080
the container what to do as a series of steps first it checks out the code in
通过一系列步骤告诉容器要做什么，首先它检查

19
00:01:10,080 --> 00:01:14,280
this github repo then sets up nodejs installs my dependencies and runs my
这个 github repo 中的代码，然后设置 nodejs安装我的依赖项并运行我的

20
00:01:14,280 --> 00:01:17,189
tests build and deploy commands now anytime we
测试，现在我们可以随时构建和部署命令

21
00:01:17,189 --> 00:01:20,970
commit code to the master branch in this repo it will run this workflow if any of
将代码提交到此 repo 中的 master 分支，如果任何步骤失败，它将运行此工作流

22
00:01:20,970 --> 00:01:24,150
the steps fail the bad software won't be delivered to our customers and will
，不良软件将不会交付给我们的客户，并且会

23
00:01:24,150 --> 00:01:27,060
automatically know there's an issue that needs to be addressed at the end of the
自动知道有一个问题需要在一天结束时解决

24
00:01:27,060 --> 00:01:31,049
day CI CD offers two main benefits it helps you automate things that would
CI  CD 提供了两个主要好处，它可以帮助您将

25
00:01:31,049 --> 00:01:34,020
otherwise have to be done manually by developers that will increase your
原本必须由开发人员手动完成的事情自动化，这将提高您的

26
00:01:34,020 --> 00:01:37,740
velocity but it also detects small problems early before they can grow into
速度，但它还可以在小问题发展为 majo 之前及早发现它们

27
00:01:37,740 --> 00:01:42,210
major disasters and that results in higher code quality this has been C ICD
r 灾难并导致更高的代码质量这

28
00:01:42,210 --> 00:01:45,780
or DevOps in 100 seconds make sure to hit the like button if you want to see
是 100 秒内的 C ICD 或 DevOps如果您想观看更多这样的短视频，请确保点击“赞”按钮，

29
00:01:45,780 --> 00:01:49,110
more short videos like this and stay tuned tomorrow for a full dead loss
并在明天继续关注使用 github 操作的完整死损

30
00:01:49,110 --> 00:01:53,070
project using github actions thanks for watching and I will see you in the next
项目谢谢观看，我会在下一个看到你

31
00:01:53,070 --> 00:01:55,250
one
