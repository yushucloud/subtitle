1
00:00:00,030 --> 00:00:01,979
arrey reduce start with a list of items


2
00:00:01,979 --> 00:00:04,200
then iterate over them to compute a


3
00:00:04,200 --> 00:00:06,270
single value it works just like basic


4
00:00:06,270 --> 00:00:08,340
arithmetic consider one plus two plus


5
00:00:08,340 --> 00:00:10,740
three what we have here is a list of


6
00:00:10,740 --> 00:00:12,599
numbers they're reduced to a single


7
00:00:12,599 --> 00:00:14,580
value using a function called addition


8
00:00:14,580 --> 00:00:16,650
in arithmetic we go from left to right


9
00:00:16,650 --> 00:00:18,960
the results of the first computation is


10
00:00:18,960 --> 00:00:20,730
then added to the next one so it's


11
00:00:20,730 --> 00:00:22,769
actually just a loop but a loop with a


12
00:00:22,769 --> 00:00:25,019
memory take for example in array of


13
00:00:25,019 --> 00:00:27,210
orders from our online store our goal is


14
00:00:27,210 --> 00:00:28,859
to calculate the total dollar amount of


15
00:00:28,859 --> 00:00:30,689
sales across all of the orders in this


16
00:00:30,689 --> 00:00:33,059
array one option is to create a variable


17
00:00:33,059 --> 00:00:34,829
that starts at zero then we'll start a


18
00:00:34,829 --> 00:00:36,840
for loop and increment this value for


19
00:00:36,840 --> 00:00:38,940
each order total reduce can solve the


20
00:00:38,940 --> 00:00:40,469
same type of problem but without


21
00:00:40,469 --> 00:00:42,899
mutating the appstate directly it does


22
00:00:42,899 --> 00:00:45,090
this by applying a reducer function to


23
00:00:45,090 --> 00:00:47,250
each element in that array your job is


24
00:00:47,250 --> 00:00:49,020
to define the reducer function the


25
00:00:49,020 --> 00:00:50,640
signature of that function has two


26
00:00:50,640 --> 00:00:52,649
required positional arguments the first


27
00:00:52,649 --> 00:00:54,719
one being the accumulator that's just a


28
00:00:54,719 --> 00:00:56,879
fancy word for the last value that you


29
00:00:56,879 --> 00:00:58,829
returned from this function the second


30
00:00:58,829 --> 00:01:00,420
argument represents the current element


31
00:01:00,420 --> 00:01:02,489
in the loop or in our case and ordered


32
00:01:02,489 --> 00:01:04,830
object the way we change the accumulated


33
00:01:04,830 --> 00:01:06,930
or remembered value is to return a value


34
00:01:06,930 --> 00:01:08,880
from the function to combine all of the


35
00:01:08,880 --> 00:01:10,890
order totals into a single number we


36
00:01:10,890 --> 00:01:12,869
simply add the accumulated value to the


37
00:01:12,869 --> 00:01:15,030
current value and optionally we can add


38
00:01:15,030 --> 00:01:16,650
a starting value as a second argument


39
00:01:16,650 --> 00:01:19,229
which will set at zero the end result is


40
00:01:19,229 --> 00:01:20,820
the combined order total across all


41
00:01:20,820 --> 00:01:22,470
elements in the array we started with


42
00:01:22,470 --> 00:01:24,360
many things and reduced it down to one


43
00:01:24,360 --> 00:01:26,250
thing in some cases you might want to


44
00:01:26,250 --> 00:01:27,900
start at the end of the array and work


45
00:01:27,900 --> 00:01:29,520
your way backwards you can use reduced


46
00:01:29,520 --> 00:01:30,990
write to start at the end of the array


47
00:01:30,990 --> 00:01:33,030
and work your way to the beginning this


48
00:01:33,030 --> 00:01:35,100
has been array reduce and 100 seconds


49
00:01:35,100 --> 00:01:37,140
thanks for watching and I will see you


50
00:01:37,140 --> 00:01:38,140
in the next one


51
00:01:38,140 --> 00:01:41,239
[Music]


