1
00:00:00,320 --> 00:00:04,720
docker是一个可以将软件打包到任何环境中的可靠容器运行工具

2
00:00:04,720 --> 00:00:09,920
但是什么是容器以及为什么需要容器，让我们假设您使用cobalt构建了一个应用程序

3
00:00:09,920 --> 00:00:13,121
该应用程序可以在linux上运行,您想与您的朋友

4
00:00:13,121 --> 00:00:16,321
分享这个应用程序，你们有两个完全不同的系统

5
00:00:16,321 --> 00:00:21,521
问题变成了我们如何在任何机器上复制我们的软件所需的环境

6
00:00:21,521 --> 00:00:25,721
打包应用程序的一种方法是使用虚拟机模拟硬件环境

7
00:00:25,721 --> 00:00:29,561
然后安装所需的操作系统和相关软件

8
00:00:29,561 --> 00:00:33,761
这允许我们在同一个基础设施上运行多个应用程序

9
00:00:33,761 --> 00:00:36,961
但是每个虚拟机都运行自己的操作系统

10
00:00:36,961 --> 00:00:40,560
因此它们往往体积庞大且运行速度慢

11
00:00:40,560 --> 00:00:43,760
与虚拟机非常相似，单有一个关键性区别

12
00:00:43,760 --> 00:00:47,960
那就是虚拟化操作系统，而不是虚拟化硬件容器

13
00:00:47,960 --> 00:00:52,160
或者换句话说，所有应用程序或容器都在单个内核运行

14
00:00:52,160 --> 00:00:55,520
这使得几乎所有事情都变得更快、更高效

15
00:00:55,520 --> 00:00:57,840
docker宇宙中包含三个基本元素

16
00:00:57,840 --> 00:01:02,640
docker文件、docker镜像、docker容器文件，

17
00:01:02,640 --> 00:01:06,800
他们就像DNA只告诉docker如何构建镜像的代码

18
00:01:06,800 --> 00:01:09,920
它是软件快照以及它的所有

19
00:01:09,920 --> 00:01:14,120
对于操作系统级别的依赖，该映像不可变用于启动多个容器

20
00:01:14,120 --> 00:01:17,239
这是您在现实世界中运行的实际软件

21
00:01:17,239 --> 00:01:19,800
创建一个docker文件并使用

22
00:01:19,800 --> 00:01:25,000
从现有模板开始,如ubuntu，此基础映从云中像被拉取下来

23
00:01:25,000 --> 00:01:27,481
您还可以将自己的镜像上传到

24
00:01:27,481 --> 00:01:29,640
各种不同的docker注册中心中

25
00:01:29,640 --> 00:01:32,921
您可能希望使用run命令将依赖项安装到镜像中

26
00:01:32,921 --> 00:01:36,040
然后您可以设置环境变量并执行其他各种命令

27
00:01:36,040 --> 00:01:39,241
你要做的最后一件事是设置一个在

28
00:01:39,241 --> 00:01:41,320
启动容器时执行的默认命令

29
00:01:41,320 --> 00:01:45,520
现在我们可以通过运行 docker build 命令来创建镜像文件

30
00:01:45,520 --> 00:01:49,720
它通过我们的docker文件中的每个步骤逐层构建映像

31
00:01:49,720 --> 00:01:53,920
然后我们可以使用 docker run 命令将该映像作为容器赋予生命

32
00:01:53,920 --> 00:01:57,600
当您的应用程序需要更多资源时

33
00:01:57,600 --> 00:02:00,960
您可以在多台云服务上运行它

34
00:02:00,960 --> 00:02:02,879
如果您确定喜欢它

35
00:02:02,879 --> 00:02:06,279
请订阅并继续关注更多docker内容

36
00:02:06,279 --> 00:02:08,320
感谢您的收看，下次见