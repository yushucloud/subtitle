1
00:00:00,030 --> 00:00:04,680
查看 j/s 它是一个用于构建前端 UI 的 JavaScript 框架，您可以

2
00:00:04,680 --> 00:00:07,680
从简单开始，然后逐步添加

3
00:00:07,680 --> 00:00:11,790
构建复杂 Web 应用程序所需的工具和功能，它提供了一种构建

4
00:00:11,790 --> 00:00:15,660
封装组件的方法JavaScript 中的数据或状态，然后

5
00:00:15,660 --> 00:00:19,500
将该状态响应式连接到 HTML 中的模板，我们将这些

6
00:00:19,500 --> 00:00:23,220
组件称为声明性视图，因为当我们在它链接或绑定的此数据对象上声明数据时，相同的数据输入将始终

7
00:00:23,220 --> 00:00:27,210
在可视 UI 中产生相同的输出

8
00:00:27,210 --> 00:00:30,960
当数据的值

9
00:00:30,960 --> 00:00:34,440
发生变化时，组件将自动重新呈现，或者换句话说，

10
00:00:34,440 --> 00:00:38,040
它是响应式的，并且框架在后台做了大量工作，以

11
00:00:38,040 --> 00:00:41,610
确保这个过程在巨大的组件树中是性能的

12
00:00:41,610 --> 00:00:45,780
由于视图基于 HTML 的模板语法，我们可以在模板中处理这些数据我们可以

13
00:00:45,780 --> 00:00:50,219
使用双括号为表达式插入一个值，我们也有 有

14
00:00:50,219 --> 00:00:54,809
多种指令来根据数据控制 HTML 的行为，我们可以使用

15
00:00:54,809 --> 00:00:58,829
VF 仅在右侧的值为真时呈现元素，然后我们

16
00:00:58,829 --> 00:01:01,829
可能会有一个后备元素，仅在值时呈现

17
00:01:01,829 --> 00:01:06,390
Fall C with V 否则我们可以通过使用 V on 指令监听事件来使应用程序交互

18
00:01:06,390 --> 00:01:10,409
我们可以监听元素上的事件然后在右侧运行一些代码

19
00:01:10,409 --> 00:01:13,799
来处理该事件我们可以直接在模板中执行此操作

20
00:01:13,799 --> 00:01:18,090
或 定义一个自定义方法和组件方法对象，该方法可以

21
00:01:18,090 --> 00:01:21,540
访问我们的响应式数据，这意味着我们所要做的就是更改

22
00:01:21,540 --> 00:01:25,320
数据的值，组件将自动重新渲染，这

23
00:01:25,320 --> 00:01:28,799
就是构建交互式响应式声明式 UI 所需要的全部内容 带有视图的组件 该

24
00:01:28,799 --> 00:01:32,460
框架因其简单性而受到开发人员的喜爱，而且它能够

25
00:01:32,460 --> 00:01:36,689
逐步扩展复杂性，它的插件系统允许您轻松

26
00:01:36,689 --> 00:01:40,920
放入诸如 路由器状态管理Firebase 支持等等，也许

27
00:01:40,920 --> 00:01:44,700
最好的是它不是由一些大型公司赞助的，它没有一直

28
00:01:44,700 --> 00:01:47,520
推出新版本的压力，并且很好地倾听了它的

29
00:01:47,520 --> 00:01:51,299
社区，这是 GU Jas 和 100秒敬请期待

30
00:01:51,299 --> 00:01:54,780
不久的将来在 YouTube 上的完整教程，

31
00:01:54,780 --> 00:01:58,140
如果您准备开始构建一个完整的堆栈应用程序，请查看我在 Fire Ship 上查看 Firebase 课程，

32
00:01:58,140 --> 00:02:02,090
感谢观看，我会在下一个