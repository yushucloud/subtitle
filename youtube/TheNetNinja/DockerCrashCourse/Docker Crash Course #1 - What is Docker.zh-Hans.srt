1
00:00:00,160 --> 00:00:02,080
嘿，帮派，欢迎来到你的第一个


2
00:00:02,080 --> 00:00:03,850
docker 教程


3
00:00:03,850 --> 00:00:08,720
[音乐]


4
00:00:08,720 --> 00:00:10,559
所以我一直想做一个


5
00:00:10,559 --> 00:00:12,559
docker 教程有一段时间了，但它


6
00:00:12,559 --> 00:00:14,240
总是被搁置，因为


7
00:00:14,240 --> 00:00:16,000
我想先制作另一个系列，


8
00:00:16,000 --> 00:00:18,320
但现在我已经 决定给


9
00:00:18,320 --> 00:00:20,240
它应有的关注并创建一个


10
00:00:20,240 --> 00:00:22,080
关于它的速成课程，


11
00:00:22,080 --> 00:00:24,160
所以 docker 是


12
00:00:24,160 --> 00:00:26,320
新开发人员有时会忽略的东西之一，


13
00:00:26,320 --> 00:00:28,640
因为乍一看


14
00:00:28,640 --> 00:00:30,800
很难理解为什么我们会使用它，


15
00:00:30,800 --> 00:00:32,480
但绝对值得花


16
00:00:32,480 --> 00:00:35,040
时间 因为它


17
00:00:35,040 --> 00:00:37,040
可以使您自己或团队开发应用程序


18
00:00:37,040 --> 00:00:39,680
更容易管理，


19
00:00:39,680 --> 00:00:41,600
它的方式是使用所谓的


20
00:00:41,600 --> 00:00:44,079
容器


21
00:00:44,079 --> 00:00:47,280
在计算机上的隔离环境中运行应用


22
00:00:47,280 --> 00:00:49,600
程序，例如节点应用程序或


23
00:00:49,600 --> 00:00:52,239
反应 应用程序或 mongodb 服务


24
00:00:52,239 --> 00:00:54,239
或其他完全类似于 python


25
00:00:54,239 --> 00:00:56,399
应用程序的东西现在我们将


26
00:00:56,399 --> 00:00:58,719
在课程后面更多地讨论容器，


27
00:00:58,719 --> 00:01:00,719
但关键是这个


28
00:01:00,719 --> 00:01:03,680
想象我 f 我在一个开发团队中，我


29
00:01:03,680 --> 00:01:08,880
正在 node.js 环境中制作应用程序，


30
00:01:08,880 --> 00:01:10,799
而我需要的应用程序的 node.js 版本是一个


31
00:01:10,799 --> 00:01:13,600
非常特定的版本，它具有


32
00:01:13,600 --> 00:01:16,320
我现在需要使用的功能也想象我


33
00:01:16,320 --> 00:01:18,320
想要 与


34
00:01:18,320 --> 00:01:20,560
我团队中的另一个人共享应用程序，以便他们


35
00:01:20,560 --> 00:01:22,720
也可以在他们的计算机上运行它，


36
00:01:22,720 --> 00:01:24,640
然后他们必须


37
00:01:24,640 --> 00:01:26,720
设置他们的开发环境以


38
00:01:26,720 --> 00:01:29,280
匹配我的，以确保应用程序


39
00:01:29,280 --> 00:01:34,240
正确运行，例如他们会 必须


40
00:01:34,240 --> 00:01:36,400
安装与应用程序需要


41
00:01:36,400 --> 00:01:38,240
正确运行的相同版本的 node.js 他们还需要


42
00:01:38,240 --> 00:01:40,640
安装所有项目依赖项并


43
00:01:40,640 --> 00:01:42,240
设置任何配置（如


44
00:01:42,240 --> 00:01:44,079
环境变量）以确保


45
00:01:44,079 --> 00:01:46,399
一切都以相同的方式工作，


46
00:01:46,399 --> 00:01:48,079
所以会有 一个重要的设置


47
00:01:48,079 --> 00:01:49,119
过程


48
00:01:49,119 --> 00:01:50,960
只是为了让应用程序在


49
00:01:50,960 --> 00:01:52,320
另一台计算机上运行


50
00:01:52,320 --> 00:01:54,640
现在想象相同的场景，但有


51
00:01:54,640 --> 00:01:56,880
多个其他应用程序以及都


52
00:01:56,880 --> 00:01:59,280
需要它们自己的特定


53
00:01:59,280 --> 00:02:01,680
环境设置 并且这些应用程序


54
00:02:01,680 --> 00:02:03,920
可能需要在多台


55
00:02:03,920 --> 00:02:05,280
不同的机器


56
00:02:05,280 --> 00:02:07,040
上运行，这意味着


57
00:02:07,040 --> 00:02:08,959
每次我们想要运行不同的


58
00:02:08,959 --> 00:02:11,280
应用程序时都需要进行大量设置，


59
00:02:11,280 --> 00:02:13,840
即使在我们自己的机器上也需要不同的开发环境，


60
00:02:13,840 --> 00:02:16,400
因为不同的应用程序


61
00:02:16,400 --> 00:02:18,480
可能需要不同版本的节点


62
00:02:18,480 --> 00:02:21,040
或 python 或 php 或其他东西，


63
00:02:21,040 --> 00:02:23,200
这就是 docker 和容器


64
00:02:23,200 --> 00:02:24,239
发挥作用的地方，


65
00:02:24,239 --> 00:02:25,840
因此您现在可以将容器


66
00:02:25,840 --> 00:02:28,400
视为一个盒子或一个包，其中包含


67
00:02:28,400 --> 00:02:31,040
我们的应用程序运行所需的


68
00:02:31,040 --> 00:02:33,280
所有内容，因此所有源代码都依赖于


69
00:02:33,280 --> 00:02:35,680
正确的运行时环境和 版本


70
00:02:35,680 --> 00:02:38,000
等，这个容器可以运行我们的


71
00:02:38,000 --> 00:02:40,720
应用程序，然后


72
00:02:40,720 --> 00:02:45,680
与我们计算机上的任何其他进程隔离，因此在我们的计算机


73
00:02:45,680 --> 00:02:47,760
上安装什么版本的 node 或 python 或其他任何东西都没有关系，


74
00:02:47,760 --> 00:02:50,000
因为


75
00:02:50,000 --> 00:02:52,560
应用程序需要运行的所有内容都在里面


76
00:02:52,560 --> 00:02:55,120
容器，然后这


77
00:02:55,120 --> 00:02:57,599
使我或我团队中的其他人更


78
00:02:57,599 --> 00:02:59,680
容易运行这些不同的


79
00:02:59,680 --> 00:03:01,760
我们的计算机上的应用程序，我们不需要


80
00:03:01,760 --> 00:03:03,040
担心设置


81
00:03:03,040 --> 00:03:04,640
任何东西的不同版本或安装


82
00:03:04,640 --> 00:03:06,959
依赖项，因为它们都在


83
00:03:06,959 --> 00:03:09,440
容器本身中 一个可预测的


84
00:03:09,440 --> 00:03:12,319
一致和隔离的环境


85
00:03:12,319 --> 00:03:14,159
我或


86
00:03:14,159 --> 00:03:15,920
运行这些容器的其他人唯一需要


87
00:03:15,920 --> 00:03:18,400
的东西 计算机是 docker 来管理这些


88
00:03:18,400 --> 00:03:19,599
容器


89
00:03:19,599 --> 00:03:22,800
，这是 docker 的核心，


90
00:03:22,800 --> 00:03:25,280
它是一个管理容器的工具，


91
00:03:25,280 --> 00:03:27,680
所以这再次是


92
00:03:27,680 --> 00:03:29,599
对 docker 和容器的简化概述


93
00:03:29,599 --> 00:03:32,560
，我们将更详细地


94
00:03:32,560 --> 00:03:35,040
了解它们是如何实现的 稍后工作，以及他们


95
00:03:35,040 --> 00:03:36,720
如何改进


96
00:03:36,720 --> 00:03:38,720
应用程序到服务器的部署，


97
00:03:38,720 --> 00:03:40,720
因为与容器


98
00:03:40,720 --> 00:03:42,879
可以在您自己或其他人的计算机上运行的方式非常相似，


99
00:03:42,879 --> 00:03:45,519
它们也可以被拉到


100
00:03:45,519 --> 00:03:47,040
您的生产


101
00:03:47,040 --> 00:03:48,879
服务器上，这样您就不用 不需要


102
00:03:48,879 --> 00:03:50,480
配置服务器，因为所有


103
00:03:50,480 --> 00:03:52,640
配置和设置都


104
00:03:52,640 --> 00:03:54,319
已经在


105
00:03:54,319 --> 00:03:55,599
容器中 t 虚拟


106
00:03:55,599 --> 00:03:58,000
机不能解决


107
00:03:58,000 --> 00:04:00,720
容器解决的相同问题，是的，它们可以解决问题，


108
00:04:00,720 --> 00:04:02,560
但是有些


109
00:04:02,560 --> 00:04:05,200
差异有时会使容器成为更好的


110
00:04:05,200 --> 00:04:07,519
选择，首先


111
00:04:07,519 --> 00:04:09,920
，您制作的每个虚拟机都运行自己的完整


112
00:04:09,920 --> 00:04:12,319
操作系统和自己的内核，并且


113
00:04:12,319 --> 00:04:14,080
它运行在您的主机操作系统之上，


114
00:04:14,080 --> 00:04:16,000
无论


115
00:04:16,000 --> 00:04:17,040
可能是什么，


116
00:04:17,040 --> 00:04:19,280
但容器不共享


117
00:04:19,280 --> 00:04:21,600
主机的操作系统内核，


118
00:04:21,600 --> 00:04:23,199
因此它们比虚拟机更轻量级


119
00:04:23,199 --> 00:04:25,680
并且不那么臃肿，这也


120
00:04:25,680 --> 00:04:27,360
意味着它们通常更快


121
00:04:27,360 --> 00:04:30,800
启动并且它们在您的计算机上使用更少的内存


122
00:04:30,800 --> 00:04:33,280
现在容器确实包含特定操作系统的精简


123
00:04:33,280 --> 00:04:35,600
版本，


124
00:04:35,600 --> 00:04:37,600
但它们仍然


125
00:04:37,600 --> 00:04:39,919
在引擎盖下使用主机的内核，


126
00:04:39,919 --> 00:04:42,880
因此基本上容器


127
00:04:42,880 --> 00:04:44,479
比虚拟机更轻量级和更快，


128
00:04:44,479 --> 00:04:46,560
尽管两者都可以解决


129
00:04:46,560 --> 00:04:48,639
同样的问题，


130
00:04:48,639 --> 00:04:50,720
有时你更喜欢虚拟机而不是


131
00:04:50,720 --> 00:04:53,040
容器，所以它不是一个 一个


132
00:04:53,040 --> 00:04:55,199
比另一个好，


133
00:04:55,199 --> 00:04:56,960
但无论如何，现在我们对


134
00:04:56,960 --> 00:04:58,880
docker 和


135
00:04:58,880 --> 00:05:00,560
容器的全部内容有了这种鸟瞰图，下一步


136
00:05:00,560 --> 00:05:03,039
是安装 docker 并开始使用它，


137
00:05:03,039 --> 00:05:04,400
我们将在下一课中这样做


138
00:05:04,400 --> 00:05:05,919
但首先我只是想


139
00:05:05,919 --> 00:05:08,720
用几个方面来结束这个，


140
00:05:08,720 --> 00:05:10,400
所以首先在你开始这


141
00:05:10,400 --> 00:05:12,240
门课程之前，你可能应该有


142
00:05:12,240 --> 00:05:14,240
一点 web 开发的经验，


143
00:05:14,240 --> 00:05:16,400
也许你已经创建了节点


144
00:05:16,400 --> 00:05:18,320
应用程序反应站点或 类似的东西


145
00:05:18,320 --> 00:05:22,160
没有什么特别的，但是您


146
00:05:22,160 --> 00:05:24,160
对本系列中的 Web 开发


147
00:05:24,160 --> 00:05:31,440
有了大致的


148
00:05:31,440 --> 00:05:33,600
了解 例如，制作一个简单的 node


149
00:05:33,600 --> 00:05:36,000
express 应用程序或如何使用 nodebomb


150
00:05:36,000 --> 00:05:39,680
但这不是绝对必要的，我还将


151
00:05:39,680 --> 00:05:41,840
在本系列的后面使用 docker 和 react 但同样你


152
00:05:41,840 --> 00:05:43,759
并不需要了解太多 ab 做出反应来


153
00:05:43,759 --> 00:05:45,440
学习 docker 方面的东西，但我


154
00:05:45,440 --> 00:05:47,120
不会


155
00:05:47,120 --> 00:05:49,120
假装现在知道基础知识没有用，如果你


156
00:05:49,120 --> 00:05:50,400
想先学习一些基础知识，我


157
00:05:50,400 --> 00:05:54,560
有很多关于 node javascript 的教程


158
00:05:54,560 --> 00:05:57,039
在 youtube 上的 net ninja


159
00:05:57,039 --> 00:05:58,560
pro 网站上做出反应等等，所以我将在视频下方留下一些


160
00:05:58,560 --> 00:06:02,319
指向其他课程的链接


161
00:06:02,319 --> 00:06:06,080
我还为本教程系列中的不同课程创建了课程文件，


162
00:06:06,080 --> 00:06:07,840
你可以找到它们 全部在这个


163
00:06:07,840 --> 00:06:10,479
repo docker 速成课程中，我


164
00:06:10,479 --> 00:06:13,120
将把链接留在视频下方，所以如果你


165
00:06:13,120 --> 00:06:14,960
想查看特定


166
00:06:14,960 --> 00:06:17,199
课程的代码，例如第五课，你


167
00:06:17,199 --> 00:06:19,840
可以在这里选择第五课分支


168
00:06:19,840 --> 00:06:21,840
，然后你会看到


169
00:06:21,840 --> 00:06:24,160
现在该分支中的所有代码如果您想


170
00:06:24,160 --> 00:06:26,160
下载特定课程，请


171
00:06:26,160 --> 00:06:28,400
选择课程然后转到此代码按钮


172
00:06:28,400 --> 00:06:30,160
并选择下载 zip，这


173
00:06:30,160 --> 00:06:32,319
将为您下载该特定课程的 zip 文件夹，


174
00:06:32,319 --> 00:06:34,880
因此再次


175
00:06:34,880 --> 00:06:36,560
链接到此 回购将下跌 n


176
00:06:36,560 --> 00:06:38,800
在视频下方，所以无论如何这是您


177
00:06:38,800 --> 00:06:44,560
在下一课中对 docker 的介绍，


178
00:06:44,560 --> 00:06:46,479
如果您现在想在


179
00:06:46,479 --> 00:06:48,000
没有 youtube 广告的情况下观看整个课程，我们将继续在我们


180
00:06:48,000 --> 00:06:50,240
的计算机上安装 docker


181
00:06:50,240 --> 00:06:52,720
net ninja 网站 netninja.dev 您可以花


182
00:06:52,720 --> 00:06:54,479
2 美元购买课程以


183
00:06:54,479 --> 00:06:56,880
立即访问所有课程，或者您可以


184
00:06:56,880 --> 00:06:58,880
注册 net ninja pro 并立即


185
00:06:58,880 --> 00:07:00,639
访问我的所有课程而无需


186
00:07:00,639 --> 00:07:03,440
广告以及未


187
00:07:03,440 --> 00:07:06,319
找到的高级课程 在 youtube 上，包括我的 udemy 的


188
00:07:06,319 --> 00:07:08,000
，每月 9 美元，


189
00:07:08,000 --> 00:07:10,240
当您在这里使用此促销代码时，您可以获得第一个月的半价


190
00:07:10,240 --> 00:07:12,720
，所以


191
00:07:12,720 --> 00:07:14,639
我将在视频说明下方留下这个链接


192
00:07:14,639 --> 00:07:16,800
供您注册，


193
00:07:16,800 --> 00:07:18,319
我真的 希望你喜欢这个系列


194
00:07:18,319 --> 00:07:19,759
，请不要忘记分享


195
00:07:19,759 --> 00:07:21,919
订阅和


196
00:07:21,919 --> 00:07:23,520
喜欢真正有帮助的视频，我将


197
00:07:23,520 --> 00:07:27,599
在下一课见到你


